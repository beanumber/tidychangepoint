[{"path":"https://beanumber.github.io/tidychangepoint/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://beanumber.github.io/tidychangepoint/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://beanumber.github.io/tidychangepoint/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://beanumber.github.io/tidychangepoint/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://beanumber.github.io/tidychangepoint/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://beanumber.github.io/tidychangepoint/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://beanumber.github.io/tidychangepoint/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://beanumber.github.io/tidychangepoint/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://beanumber.github.io/tidychangepoint/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://beanumber.github.io/tidychangepoint/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://beanumber.github.io/tidychangepoint/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://beanumber.github.io/tidychangepoint/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://beanumber.github.io/tidychangepoint/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://beanumber.github.io/tidychangepoint/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://beanumber.github.io/tidychangepoint/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://beanumber.github.io/tidychangepoint/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://beanumber.github.io/tidychangepoint/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://beanumber.github.io/tidychangepoint/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://beanumber.github.io/tidychangepoint/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://beanumber.github.io/tidychangepoint/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://beanumber.github.io/tidychangepoint/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://beanumber.github.io/tidychangepoint/articles/climate_data.html","id":"central-england-temperature","dir":"Articles","previous_headings":"","what":"Central England Temperature","title":"Climate data in tidychangepoint","text":"Shi et al. (2022) use changepoint detection algorithms analyze time series annual temperature data Central England. data available via CET tidychangepoint. data go back 1659, simple plot illustrates increase temperature recent years.  Shi et al. (2022) use genetic algorithm identify changepoints time series. code reproduces analysis. Note since genetic algorithm random, results vary. Shi, et al. used maxiter value 50,000 order obtain results used paper. , use much lower value solely interest computational speed. Note algorithm fitting “meanshift” model, estimates mean μi\\mu_i regions defined changepoint set. objective function employs BIC penalty. One departure Shi’s implementation use log_gabin_population() function generate first generation 200 (.e. popSize) possible changepoint sets. data point chosen uniformly random probability equal lnN\\ln{N}, NN number observations (362, case). Compare changepoint set discovered algorithm: fitness() function returns named vector value objective function discovered changepoint set. Information regions, including means, shown tidy() function. default, glance() returns summary segmenter produced discovered changepoint set. includes fitness, elapsed time, parameters used segmenter. However, can also run glance() model resulting discovered changepoint set. provides information model fit, including values various alternative model fitting metrics. important note one metrics (case, BIC) actually one used segmenter! plot() function returns informative plot original time series, changepoint set corresponding regions demarcated.","code":"plot(CET) trend_wn <- CET |>   segment(     method = \"ga\",      model_fn = fit_meanshift_norm,      penalty_fn = BIC,      population = log_gabin_population(CET),     popSize = 200,      maxiter = 50,     run = 10   ) ## Seeding initial population with probability: 0.0161274134792387 changepoints(trend_wn) ##  x34  x41 x252 x336  ##   34   41  252  336 changepoints(trend_wn, use_labels = TRUE) |>   as_year() ## [1] \"1692\" \"1699\" \"1910\" \"1994\" fitness(trend_wn) ##      BIC  ## 664.5614 tidy(trend_wn) ## Registered S3 method overwritten by 'tsibble': ##   method               from  ##   as_tibble.grouped_df dplyr ## # A tibble: 5 × 9 ##   region    num_obs   min   max  mean    sd begin   end param_mu ##   <chr>       <int> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>    <dbl> ## 1 [1,34)         33  7.86 10.2   8.83 0.554     1    34     8.83 ## 2 [34,41)         7  7.29  8.52  7.91 0.454    34    41     7.91 ## 3 [41,252)      211  6.86 10.5   9.16 0.594    41   252     9.16 ## 4 [252,336)      84  8.52 10.6   9.50 0.482   252   336     9.50 ## 5 [336,367)      31  8.95 11.2  10.4  0.507   336   367    10.4 glance(trend_wn) ## # A tibble: 1 × 8 ##   pkg   version    algorithm seg_params model_name criteria fitness elapsed_time ##   <chr> <pckg_vrs> <chr>     <list>     <chr>      <chr>      <dbl> <drtn>       ## 1 GA    3.2.4      Genetic   <list [1]> meanshift… BIC         665. 17.711 secs trend_wn |>   as.model() |>   glance() ## # A tibble: 1 × 11 ##   pkg     version algorithm params num_cpts  rmse logLik   AIC   BIC  MBIC   MDL ##   <chr>   <pckg_> <chr>     <list>    <int> <dbl>  <dbl> <dbl> <dbl> <dbl> <dbl> ## 1 tidych… 1.0.2   meanshif… <dbl>         4 0.553  -303.  626.  665.  666.  675. plot(trend_wn, use_time_index = TRUE) ## Scale for x is already present. ## Adding another scale for x, which will replace the existing scale."},{"path":"https://beanumber.github.io/tidychangepoint/articles/climate_data.html","id":"comparison-to-reported-values","dir":"Articles","previous_headings":"Central England Temperature","what":"Comparison to reported values","title":"Climate data in tidychangepoint","text":"changepoint set reported Shi et al. (2022) {1700,1739,1988}\\{1700, 1739, 1988\\}. configuration trendshift model white noise errors, Table 2 Shi et al. (2022) reports model variance σ̂2\\hat{\\sigma}^2 0.291, log-likelihood -290.02, BIC 650.74, MDL 653.07. Fitting trendshift model white noise errors running glance() function reveals exact match reported figures. Modifying model incorporate AR(1) lagged errors also matches figures Table 2.","code":"target_cpts <- c(1700, 1739, 1988) ids <- time2tau(target_cpts, as_year(time(CET))) CET |>   fit_trendshift(tau = ids) |>   glance() ## # A tibble: 1 × 11 ##   pkg     version algorithm params num_cpts  rmse logLik   AIC   BIC  MBIC   MDL ##   <chr>   <pckg_> <chr>     <list>    <int> <dbl>  <dbl> <dbl> <dbl> <dbl> <dbl> ## 1 tidych… 1.0.2   trendshi… <dbl>         3 0.538  -292.  608.  655.  630.  658. CET |>   fit_trendshift_ar1(tau = ids) |>   glance() ## # A tibble: 1 × 11 ##   pkg     version algorithm params num_cpts  rmse logLik   AIC   BIC  MBIC   MDL ##   <chr>   <pckg_> <chr>     <list>    <int> <dbl>  <dbl> <dbl> <dbl> <dbl> <dbl> ## 1 tidych… 1.0.2   trendshi… <dbl>         3 0.537  -291.  608.  658.  628.  661."},{"path":"https://beanumber.github.io/tidychangepoint/articles/climate_data.html","id":"bogotá-particulate-matter","dir":"Articles","previous_headings":"","what":"Bogotá particulate matter","title":"Climate data in tidychangepoint","text":"bogota_pm data set contains daily measurement particulate matter Bogotá, Colombia three-year period 2018–2020.  , use genetic algorithm Taimal, Suárez-Sierra, Rivera (2023) identify changepoint sets. Note model fit NHPP model, along BMDL penalty function.  compare quality fit NHPP model using diagnose().","code":"plot(bogota_pm) bog_cpt <- bogota_pm |>   segment(     method = \"ga-coen\",     maxiter = 50,     run = 10   ) ## Seeding initial population with probability: 0.0145985401459854 glance(bog_cpt) ## # A tibble: 1 × 8 ##   pkg   version    algorithm seg_params model_name criteria fitness elapsed_time ##   <chr> <pckg_vrs> <chr>     <list>     <chr>      <chr>      <dbl> <drtn>       ## 1 GA    3.2.4      Genetic   <list [1]> nhpp       BMDL       1942. 25.937 secs plot(bog_cpt, use_time_index = TRUE) ## Scale for x is already present. ## Adding another scale for x, which will replace the existing scale. bog_cpt |>   as.model() |>   diagnose() ## Warning: Removed 1 row containing missing values or values outside the scale range ## (`geom_vline()`)."},{"path":"https://beanumber.github.io/tidychangepoint/articles/climate_data.html","id":"medellín-rainfall","dir":"Articles","previous_headings":"","what":"Medellín rainfall","title":"Climate data in tidychangepoint","text":"times series mde_rain_monthly contains monthly precipitation readings locations around city Medellín, Colombia.  , fit deterministic PELT algorithm (Killick Eckley 2014).","code":"plot(mde_rain_monthly) mde_cpt <- segment(mde_rain_monthly, method = \"pelt\") plot(mde_cpt, use_time_index = TRUE) ## Scale for x is already present. ## Adding another scale for x, which will replace the existing scale."},{"path":[]},{"path":"https://beanumber.github.io/tidychangepoint/articles/coen.html","id":"using-the-original-implementation-of-coens-algorithm","dir":"Articles","previous_headings":"","what":"Using the original implementation of Coen’s algorithm","title":"Using Coen's algorithm","text":"","code":"x <- segment(bogota_pm, method = \"coen\", num_generations = 5) #> Warning: `segment_coen()` was deprecated in tidychangepoint 0.0.1. #> ℹ Please use `segment_ga_coen()` instead. #> ℹ The deprecated feature was likely used in the tidychangepoint package. #>   Please report the issue to the authors. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was #> generated. #>   |                                                                    |                                                            |   0%  |                                                                    |===============                                             |  25%  |                                                                    |==============================                              |  50%  |                                                                    |=============================================               |  75%  |                                                                    |============================================================| 100% changepoints(x) #> [1]  306  491  612  708  739  773 1033 plot(x) #> Registered S3 method overwritten by 'tsibble': #>   method               from  #>   as_tibble.grouped_df dplyr"},{"path":"https://beanumber.github.io/tidychangepoint/articles/coen.html","id":"using-the-ga-implementation-of-coens-algorithm","dir":"Articles","previous_headings":"","what":"Using the GA implementation of Coen’s algorithm","title":"Using Coen's algorithm","text":"","code":"y <- segment(bogota_pm, method = \"ga-coen\", maxiter = 50, run = 10) #> Seeding initial population with probability: 0.0145985401459854 changepoints(y) #> named integer(0) plot(y) diagnose(y$model) #> Warning: Removed 1 row containing missing values or values outside the scale range #> (`geom_vline()`). tidy(y) #> # A tibble: 1 × 12 #>   region      num_obs   min   max  mean    sd begin   end param_alpha param_beta #>   <chr>         <int> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>       <dbl>      <dbl> #> 1 [1,1.1e+03)    1096   1.3  78.5  28.8  14.1     1  1097       0.879      0.758 #> # ℹ 2 more variables: logPost <dbl>, logLik <dbl> glance(y) #> # A tibble: 1 × 8 #>   pkg   version    algorithm seg_params model_name criteria fitness elapsed_time #>   <chr> <pckg_vrs> <chr>     <list>     <chr>      <chr>      <dbl> <drtn>       #> 1 GA    3.2.4      Genetic   <list [1]> nhpp       BMDL       1918. 31.765 secs"},{"path":"https://beanumber.github.io/tidychangepoint/articles/coen.html","id":"changing-the-threshold","dir":"Articles","previous_headings":"Using the GA implementation of Coen’s algorithm","what":"Changing the threshold","title":"Using Coen's algorithm","text":"default, threshold set mean observed values, can changed using model_fn_args argument segment(). Please note number iterations (maxiter) genetic algorithm set low ease compilation. NOTA BENE: obtain robust result, set maxiter something much higher. can also experiment popSize argument segment().","code":"z <- segment(   bogota_pm,    method = \"ga-coen\",    maxiter = 5,   model_fn_args = list(threshold = 50) ) #> Seeding initial population with probability: 0.0145985401459854 changepoints(z) #>  x161  x541  x782 x1034  #>   161   541   782  1034 plot(z) diagnose(z$model) #> Warning: Removed 1 row containing missing values or values outside the scale range #> (`geom_vline()`). tidy(z) #> # A tibble: 5 × 12 #>   region      num_obs   min   max  mean    sd begin   end param_alpha param_beta #>   <chr>         <int> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>       <dbl>      <dbl> #> 1 [1,161)         160   1.3  56.2  29.8  11.2     1   161       0.149     0.0970 #> 2 [161,541)       380   1.6  78.5  30.5  15.4   161   541       0.581     0.314  #> 3 [541,782)       241   1.7  63.2  30.2  13.8   541   782       0.467     0.0864 #> 4 [782,1.03e…     252   1.3  71.8  23.4  13.3   782  1034       0.452     0.0707 #> 5 [1.03e+03,…      63   2    58.2  32.6  12.3  1034  1097       0.536     0.0818 #> # ℹ 2 more variables: logPost <dbl>, logLik <dbl> glance(z) #> # A tibble: 1 × 8 #>   pkg   version    algorithm seg_params model_name criteria fitness elapsed_time #>   <chr> <pckg_vrs> <chr>     <list>     <chr>      <chr>      <dbl> <drtn>       #> 1 GA    3.2.4      Genetic   <list [1]> nhpp       BMDL        609. 4.724 secs"},{"path":"https://beanumber.github.io/tidychangepoint/articles/tidychangepoint.html","id":"tidy-methods-for-changepoint-analysis","dir":"Articles","previous_headings":"","what":"Tidy methods for changepoint analysis","title":"tidychangepoint","text":"tidychangepoint package allows use number algorithms detecting changepoint sets univariate time series common, tidyverse-compliant interface. also provides model-fitting procedures commonly-used parametric models, tools computing various penalty functions, graphical diagnostic displays. Changepoint sets computed using segment() function, takes numeric vector coercible ts object, string indicating algorithm wish use. segment() always returns tidycpt object. Various methods available tidycpt objects. example, .ts() returns original data ts object, changepoints() returns set changepoint indices.","code":"library(tidychangepoint) x <- segment(DataCPSim, method = \"pelt\") class(x) #> [1] \"tidycpt\" changepoints(x) #> [1] 547 822 972"},{"path":"https://beanumber.github.io/tidychangepoint/articles/tidychangepoint.html","id":"retrieving-information-using-the-broom-interface","dir":"Articles","previous_headings":"Tidy methods for changepoint analysis","what":"Retrieving information using the broom interface","title":"tidychangepoint","text":"tidychangepoint follows design interface broom package. Therefore, augment(), tidy() glance() methods exists tidycpt objects. augment() returns tsibble grouped according regions defined changepoint set. tidy() returns tbl provides summary statistics region. include parameters fit, prefixed output param_. glance() returns tbl provides summary statistics algorithm. includes fitness, value penalized objective function used.","code":"augment(x) #> Registered S3 method overwritten by 'tsibble': #>   method               from  #>   as_tibble.grouped_df dplyr #> # A tsibble: 1,096 x 5 [1] #> # Groups:    region [4] #>    index     y region  .fitted  .resid #>    <int> <dbl> <fct>     <dbl>   <dbl> #>  1     1  35.5 [1,547)    35.3   0.232 #>  2     2  29.0 [1,547)    35.3  -6.27  #>  3     3  35.6 [1,547)    35.3   0.357 #>  4     4  33.0 [1,547)    35.3  -2.29  #>  5     5  29.5 [1,547)    35.3  -5.74  #>  6     6  25.4 [1,547)    35.3  -9.87  #>  7     7  28.8 [1,547)    35.3  -6.45  #>  8     8  50.3 [1,547)    35.3  15.0   #>  9     9  24.9 [1,547)    35.3 -10.3   #> 10    10  58.9 [1,547)    35.3  23.6   #> # ℹ 1,086 more rows tidy(x) #> # A tibble: 4 × 10 #>   region  num_obs   min   max  mean    sd begin   end param_mu param_sigma_hatsq #>   <chr>     <int> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>    <dbl>             <dbl> #> 1 [1,547)     546  13.7  92.8  35.3  11.3     1   547     35.3              127. #> 2 [547,8…     275  20.5 163.   58.1  19.3   547   822     58.1              372. #> 3 [822,9…     150  39.2 215.   96.7  30.5   822   972     96.7              924. #> 4 [972,1…     125  67.2 299.  156.   49.6   972  1097    156.              2442. glance(x) #> # A tibble: 1 × 8 #>   pkg      version algorithm seg_params model_name criteria fitness elapsed_time #>   <chr>    <pckg_> <chr>     <list>     <chr>      <chr>      <dbl> <drtn>       #> 1 changep… 2.3     PELT      <list [1]> meanvar    MBIC       9403. 0.068 secs"},{"path":"https://beanumber.github.io/tidychangepoint/articles/tidychangepoint.html","id":"other-methods","dir":"Articles","previous_headings":"Tidy methods for changepoint analysis","what":"Other methods","title":"tidychangepoint","text":"plot() method leverages ggplot2 provide informative plot, regions defined changepoint set clearly demarcated, means within region also indicated.  generic functions defined tidycpt objects include fitness(), .model(), exceedances(). example, fitness() returns named vector value penalized objective function used.","code":"plot(x) fitness(x) #>     MBIC  #> 9403.391"},{"path":"https://beanumber.github.io/tidychangepoint/articles/tidychangepoint.html","id":"structure","dir":"Articles","previous_headings":"","what":"Structure","title":"tidychangepoint","text":"Every tidycpt objects contains two main children: segmenter: object results changepoint detection algorithm. can class. Methods objects class cpt, ga, wbs currently implemented, well seg_basket (default internal class). Given data set, model, penalized objective function, segmenter’s job search exponentially-large space possible changepoint sets one optimizes penalized objective function (space possible changepoint sets). segmenting algorithms (e.g., PELT) deterministic, others (e.g., genetic algorithms) randomized. model: model object inheriting mod_cpt, internal class representing model objects. Model objects created model-fitting functions, whose names start fit_. model tidycpt object model object returned fit_*() function corresponds one used segmenter. Given data set, model description, set changepoints, corresponding model-fitting function finds values model parameters optimize model fit data. segmenters models implement methods generic functions changepoints(), .ts(), nobs(), logLik(), model_name(), glance(). However, important note tidychangepoint best match model used segmenter corresponding model-fitting function, exact matches always exist. Thus, logLik() segmenter may always match logLik() model. Nevertheless, squaring values focus ongoing work.","code":""},{"path":"https://beanumber.github.io/tidychangepoint/articles/tidychangepoint.html","id":"segmenters","dir":"Articles","previous_headings":"Structure","what":"Segmenters","title":"tidychangepoint","text":"example , segmenter class cpt, segment() simply wraps cpt.meanvar() function changepoint package. addition generic functions listed , segmenters implement methods generic functions fitness(), model_args(), seg_params().","code":"x |>   as.segmenter() |>   str() #> Formal class 'cpt' [package \"changepoint\"] with 12 slots #>   ..@ data.set : Time-Series [1:1096] from 1 to 1096: 35.5 29 35.6 33 29.5 ... #>   ..@ cpttype  : chr \"mean and variance\" #>   ..@ method   : chr \"PELT\" #>   ..@ test.stat: chr \"Normal\" #>   ..@ pen.type : chr \"MBIC\" #>   ..@ pen.value: num 28 #>   ..@ minseglen: num 2 #>   ..@ cpts     : int [1:4] 547 822 972 1096 #>   ..@ ncpts.max: num Inf #>   ..@ param.est:List of 2 #>   .. ..$ mean    : num [1:4] 35.3 58.2 96.8 156.5 #>   .. ..$ variance: num [1:4] 127 371 921 2406 #>   ..@ date     : chr \"Thu Oct 16 19:35:00 2025\" #>   ..@ version  : chr \"2.3\""},{"path":"https://beanumber.github.io/tidychangepoint/articles/tidychangepoint.html","id":"models","dir":"Articles","previous_headings":"Structure","what":"Models","title":"tidychangepoint","text":"model object case created fit_meanvar(), class mod_cpt. addition generic functions listed , models implement methods generic functions fitted(), residuals(), coef(), augment(), tidy(), plot().","code":"x |>   as.model() |>   str() #> List of 6 #>  $ data         : Time-Series [1:1096] from 1 to 1096: 35.5 29 35.6 33 29.5 ... #>  $ tau          : int [1:3] 547 822 972 #>  $ region_params: tibble [4 × 3] (S3: tbl_df/tbl/data.frame) #>   ..$ region           : chr [1:4] \"[1,547)\" \"[547,822)\" \"[822,972)\" \"[972,1.1e+03)\" #>   ..$ param_mu         : num [1:4] 35.3 58.1 96.7 155.9 #>   ..$ param_sigma_hatsq: Named num [1:4] 127 372 924 2442 #>   .. ..- attr(*, \"names\")= chr [1:4] \"[1,547)\" \"[547,822)\" \"[822,972)\" \"[972,1.1e+03)\" #>  $ model_params : NULL #>  $ fitted_values: num [1:1096] 35.3 35.3 35.3 35.3 35.3 ... #>  $ model_name   : chr \"meanvar\" #>  - attr(*, \"class\")= chr \"mod_cpt\""},{"path":"https://beanumber.github.io/tidychangepoint/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Benjamin S. Baumer. Author, maintainer, copyright holder. Biviana Marcela Suárez Sierra. Author. Arrigo Coen. Author. Carlos . Taimal. Author. Xueheng Shi. Contributor.","code":""},{"path":"https://beanumber.github.io/tidychangepoint/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Baumer B, Suárez Sierra B, Coen , Taimal C (2025). tidychangepoint: Tidy Framework Changepoint Detection Analysis. R package version 1.0.2, https://beanumber.github.io/tidychangepoint/.","code":"@Manual{,   title = {tidychangepoint: A Tidy Framework for Changepoint Detection Analysis},   author = {Benjamin S. Baumer and Biviana Marcela {Suárez Sierra} and Arrigo Coen and Carlos A. Taimal},   year = {2025},   note = {R package version 1.0.2},   url = {https://beanumber.github.io/tidychangepoint/}, }"},{"path":[]},{"path":"https://beanumber.github.io/tidychangepoint/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"A Tidy Framework for Changepoint Detection Analysis","text":"install tidychangepoint CRAN: install development version tidychangepoint: load :","code":"install.packages(\"tidychangepoint\") remotes::install_github(\"beanumber/tidychangepoint\") library(tidychangepoint)"},{"path":"https://beanumber.github.io/tidychangepoint/index.html","id":"tidy-methods-for-changepoint-analysis","dir":"","previous_headings":"","what":"Tidy methods for changepoint analysis","title":"A Tidy Framework for Changepoint Detection Analysis","text":"tidychangepoint package allows use number algorithms detecting changepoint sets univariate time series common, tidyverse-compliant interface. Currently, algorithms changepoint, wbs, several genetic algorithms made accessible via GA supported. also provides model-fitting procedures commonly-used parametric models, tools computing various penalty functions, graphical diagnostic displays. Changepoint sets computed using segment() function, takes numeric vector coercible ts object, string indicating algorithm wish use. segment() always returns tidycpt object. Various methods available tidycpt objects. example, .ts() returns original data ts object, changepoints() returns set changepoint indices. original time series time labels, can also retrieve information. fitness() function returns value name objective function algorithm used find optimal changepoint set. tidy() method shows fitted parameters values region.","code":"x <- segment(CET, method = \"pelt\", model = fit_meanshift_norm, minseglen = 3) class(x) ## [1] \"tidycpt\" changepoints(x) ## [1] 330 changepoints(x, use_labels = TRUE) ## [1] \"1988-01-01\" fitness(x) ##    MBIC  ## 688.331 tidy(x) ## Registered S3 method overwritten by 'tsibble': ##   method               from  ##   as_tibble.grouped_df dplyr  ## # A tibble: 2 × 9 ##   region    num_obs   min   max  mean    sd begin   end param_mu ##   <chr>       <int> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>    <dbl> ## 1 [1,330)       329  6.86  10.6  9.17 0.615     1   330     9.17 ## 2 [330,367)      37  8.95  11.2 10.3  0.528   330   367    10.3"},{"path":"https://beanumber.github.io/tidychangepoint/index.html","id":"algorithmic-coverage","dir":"","previous_headings":"","what":"Algorithmic coverage","title":"A Tidy Framework for Changepoint Detection Analysis","text":"","code":"ls_methods() ## # A tibble: 14 × 5 ##    method      pkg             segmenter_class helper              wraps         ##    <chr>       <chr>           <chr>           <chr>               <chr>         ##  1 pelt        changepoint     cpt             segment_pelt()      changepoint:… ##  2 binseg      changepoint     cpt             <NA>                changepoint:… ##  3 segneigh    changepoint     cpt             <NA>                changepoint:… ##  4 single-best changepoint     cpt             <NA>                changepoint:… ##  5 wbs         wbs             wbs             <NA>                wbs::wbs()    ##  6 ga          GA              tidyga          segment_ga()        GA::ga()      ##  7 ga-shi      GA              tidyga          segment_ga_shi()    segment_ga()  ##  8 ga-coen     GA              tidyga          segment_ga_coen()   segment_ga()  ##  9 coen        tidychangepoint seg_basket      segment_coen()      <NA>          ## 10 random      GA              tidyga          segment_ga_random() segment_ga()  ## 11 manual      tidychangepoint seg_cpt         segment_manual()    <NA>          ## 12 null        tidychangepoint seg_cpt         segment_manual()    <NA>          ## 13 segmented   segmented       segmented       <NA>                segmented::s… ## 14 cptga       changepointGA   tidycptga       segment_cptga()     changepointG… ls_coverage() |>   dplyr::group_by(method) |>   dplyr::summarize(     models = paste(unique(model), collapse = \", \"),     penalties = paste(unique(penalty), collapse = \", \")   ) |>   dplyr::arrange(method) |>   knitr::kable()"},{"path":"https://beanumber.github.io/tidychangepoint/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"A Tidy Framework for Changepoint Detection Analysis","text":"Please read full paper details. cite package, use following information:","code":"citation(\"tidychangepoint\") ## Warning in citation(\"tidychangepoint\"): could not determine year for ## 'tidychangepoint' from package DESCRIPTION file  ## To cite package 'tidychangepoint' in publications use: ##  ##   Baumer B, Suárez Sierra B, Coen A, Taimal C (????). _tidychangepoint: ##   A Tidy Framework for Changepoint Detection Analysis_. R package ##   version 1.0.2, <https://beanumber.github.io/tidychangepoint/>. ##  ## A BibTeX entry for LaTeX users is ##  ##   @Manual{, ##     title = {tidychangepoint: A Tidy Framework for Changepoint Detection Analysis}, ##     author = {Benjamin S. Baumer and Biviana Marcela {Suárez Sierra} and Arrigo Coen and Carlos A. Taimal}, ##     note = {R package version 1.0.2}, ##     url = {https://beanumber.github.io/tidychangepoint/}, ##   }"},{"path":"https://beanumber.github.io/tidychangepoint/reference/BMDL.html","id":null,"dir":"Reference","previous_headings":"","what":"Bayesian Maximum Descriptive Length — BMDL","title":"Bayesian Maximum Descriptive Length — BMDL","text":"Generic function compute Bayesian Maximum Descriptive Length changepoint detection model.","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/BMDL.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bayesian Maximum Descriptive Length — BMDL","text":"","code":"BMDL(object, ...)  # Default S3 method BMDL(object, ...)  # S3 method for class 'nhpp' BMDL(object, ...)"},{"path":"https://beanumber.github.io/tidychangepoint/reference/BMDL.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bayesian Maximum Descriptive Length — BMDL","text":"object object log-likelihood value,    contribution log-likelihood value, can extracted. ... methods generic function require additional    arguments.","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/BMDL.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bayesian Maximum Descriptive Length — BMDL","text":"double vector length 1","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/BMDL.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Bayesian Maximum Descriptive Length — BMDL","text":"Currently, BMDL function defined NHPP model (see fit_nhpp()). Given changepoint set \\(\\tau\\), BMDL : $$    BMDL(\\tau, NHPP(y | \\hat{\\theta}_\\tau) =    P_{MDL}(\\tau) - 2 \\ln{ L_{NHPP}(y | \\hat{\\theta}_\\tau) }    - 2 \\ln{ g(\\hat{\\theta}_\\tau) }  $$ \\(P_{MDL}(\\tau)\\) MDL() penalty.","code":""},{"path":[]},{"path":"https://beanumber.github.io/tidychangepoint/reference/BMDL.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bayesian Maximum Descriptive Length — BMDL","text":"","code":"# Compute the BMDL BMDL(fit_nhpp(DataCPSim, tau = NULL)) #> [1] 1454.918 BMDL(fit_nhpp(DataCPSim, tau = c(365, 830))) #> [1] 1233.919"},{"path":"https://beanumber.github.io/tidychangepoint/reference/CET.html","id":null,"dir":"Reference","previous_headings":"","what":"Hadley Centre Central England Temperature — CET","title":"Hadley Centre Central England Temperature — CET","text":"Mean annual temperatures Central England","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/CET.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hadley Centre Central England Temperature — CET","text":"","code":"CET"},{"path":"https://beanumber.github.io/tidychangepoint/reference/CET.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Hadley Centre Central England Temperature — CET","text":"object class xts (inherits zoo) 366 rows 1 columns.","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/CET.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Hadley Centre Central England Temperature — CET","text":"https://www.metoffice.gov.uk/hadobs/hadcet/","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/CET.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Hadley Centre Central England Temperature — CET","text":"CET time series perhaps longest instrumental record surface temperatures world, commencing 1659 spanning 362 years 2020. CET series benchmark European climate studies, sensitive atmospheric variability North Atlantic (Parker et al. 1992). record previously analyzed long-term changes (Plaut et al. 1995; Harvey Mills 2003; Hillebrand Proietti 2017); however, knowledge, detailed changepoint analysis previously conducted. length CET record affords us opportunity explore variety temperature features.","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/CET.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Hadley Centre Central England Temperature — CET","text":"Shi, et al. (2022, doi:10.1175/JCLI-D-21-0489.1 ), Parker, et al. (1992, doi:10.1002/joc.3370120402 )","code":""},{"path":[]},{"path":"https://beanumber.github.io/tidychangepoint/reference/DataCPSim.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulated time series data — DataCPSim","title":"Simulated time series data — DataCPSim","text":"Randomly-generated time series data, using stats::rlnorm() function. rlnorm_ts_1, one changepoint located 826. rlnorm_ts_2, two changepoints, located 366 731. rlnorm_ts_3, three changepoints, located 548, 823, 973.","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/DataCPSim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulated time series data — DataCPSim","text":"","code":"DataCPSim  rlnorm_ts_1  rlnorm_ts_2  rlnorm_ts_3"},{"path":"https://beanumber.github.io/tidychangepoint/reference/DataCPSim.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Simulated time series data — DataCPSim","text":"object class numeric length 1096. object class ts length 1096. object class ts length 1096. object class ts length 1096.","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/DataCPSim.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulated time series data — DataCPSim","text":"DataCPSim: Simulated time series length bogota_pm.","code":""},{"path":[]},{"path":"https://beanumber.github.io/tidychangepoint/reference/DataCPSim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulated time series data — DataCPSim","text":"","code":"plot(rlnorm_ts_1)  plot(rlnorm_ts_2)  plot(rlnorm_ts_3)  changepoints(rlnorm_ts_1) #> [1] 826"},{"path":"https://beanumber.github.io/tidychangepoint/reference/HQC.html","id":null,"dir":"Reference","previous_headings":"","what":"Hannan–Quinn information criterion — HQC","title":"Hannan–Quinn information criterion — HQC","text":"Hannan–Quinn information criterion","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/HQC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hannan–Quinn information criterion — HQC","text":"","code":"HQC(object, ...)  # Default S3 method HQC(object, ...)  # S3 method for class 'logLik' HQC(object, ...)"},{"path":"https://beanumber.github.io/tidychangepoint/reference/HQC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hannan–Quinn information criterion — HQC","text":"object object log-likelihood value,    contribution log-likelihood value, can extracted. ... methods generic function require additional    arguments.","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/HQC.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Hannan–Quinn information criterion — HQC","text":"Computes Hannan-Quinn information criterion model \\(M\\) $$   HQC(\\tau, M(y|\\hat{\\theta}_{\\tau})) = 2k \\cdot \\ln{\\ln{n}} - 2 \\cdot L_M(y|\\hat{\\theta}_\\tau) \\,, $$ \\(k\\) number parameters \\(n\\) number observations.","code":""},{"path":[]},{"path":"https://beanumber.github.io/tidychangepoint/reference/HQC.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hannan–Quinn information criterion — HQC","text":"","code":"# Compute the HQC HQC(fit_meanvar(CET, tau = NULL)) #> [1] 780.7158  HQC(fit_meanshift_norm_ar1(CET, tau = c(42, 330))) #> [1] 635.8524 HQC(fit_trendshift(CET, tau = c(42, 81, 330))) #> [1] 605.6614"},{"path":"https://beanumber.github.io/tidychangepoint/reference/MBIC.html","id":null,"dir":"Reference","previous_headings":"","what":"Modified Bayesian Information Criterion — MBIC","title":"Modified Bayesian Information Criterion — MBIC","text":"Generic function compute Modified Bayesian Information Criterion changepoint detection model.","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/MBIC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modified Bayesian Information Criterion — MBIC","text":"","code":"MBIC(object, ...)  # Default S3 method MBIC(object, ...)  # S3 method for class 'logLik' MBIC(object, ...)"},{"path":"https://beanumber.github.io/tidychangepoint/reference/MBIC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Modified Bayesian Information Criterion — MBIC","text":"object object log-likelihood value,    contribution log-likelihood value, can extracted. ... methods generic function require additional    arguments.","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/MBIC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Modified Bayesian Information Criterion — MBIC","text":"double vector length 1","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/MBIC.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Modified Bayesian Information Criterion — MBIC","text":"Zhang Seigmmund (2007) MBIC: doi:10.1111/j.1541-0420.2006.00662.x","code":""},{"path":[]},{"path":"https://beanumber.github.io/tidychangepoint/reference/MDL.html","id":null,"dir":"Reference","previous_headings":"","what":"Maximum Descriptive Length — MDL","title":"Maximum Descriptive Length — MDL","text":"Generic function compute Maximum Descriptive Length changepoint detection model.","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/MDL.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Maximum Descriptive Length — MDL","text":"","code":"MDL(object, ...)  # Default S3 method MDL(object, ...)  # S3 method for class 'logLik' MDL(object, ...)"},{"path":"https://beanumber.github.io/tidychangepoint/reference/MDL.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Maximum Descriptive Length — MDL","text":"object object log-likelihood value,    contribution log-likelihood value, can extracted. ... methods generic function require additional    arguments.","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/MDL.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Maximum Descriptive Length — MDL","text":"double vector length 1","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/MDL.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Maximum Descriptive Length — MDL","text":"$$    P_{MDL}(\\tau) = \\frac{(\\theta_\\tau)}{2} \\cdot      \\sum_{j=0}^m \\log{\\left(\\tau_j - \\tau_{j-1} \\right)} + 2 \\ln{m} + \\sum_{j=2}^m \\ln{\\tau_j} +      \\left( 2 + b(\\theta_\\tau) \\right) \\ln{n}  $$ \\((\\theta)\\) number parameters \\(\\theta\\) fit region, \\(b(\\theta)\\) number parameters fit model whole. quantities base::attributes() object returned logLik().","code":""},{"path":[]},{"path":"https://beanumber.github.io/tidychangepoint/reference/MDL.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Maximum Descriptive Length — MDL","text":"","code":"MDL(fit_meanshift_norm_ar1(CET, tau = c(42, 330))) #> [1] 673.007 MDL(fit_trendshift(CET, tau = c(42, 81, 330))) #> [1] 657.6599"},{"path":"https://beanumber.github.io/tidychangepoint/reference/SIC.html","id":null,"dir":"Reference","previous_headings":"","what":"Schwarz information criterion — SIC","title":"Schwarz information criterion — SIC","text":"Schwarz information criterion","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/SIC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Schwarz information criterion — SIC","text":"","code":"SIC(object, ...)"},{"path":"https://beanumber.github.io/tidychangepoint/reference/SIC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Schwarz information criterion — SIC","text":"object fitted model object exists     logLik method extract corresponding log-likelihood,     object inheriting class logLik. ... optionally fitted model objects.","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/SIC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Schwarz information criterion — SIC","text":"value stats::BIC()","code":""},{"path":[]},{"path":"https://beanumber.github.io/tidychangepoint/reference/SIC.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Schwarz information criterion — SIC","text":"","code":"# The SIC is just the BIC SIC(fit_meanvar(CET, tau = NULL)) #> [1] 788.9703 BIC(fit_meanvar(CET, tau = NULL)) #> [1] 788.9703"},{"path":"https://beanumber.github.io/tidychangepoint/reference/as.model.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert, retrieve, or verify a model object — as.model","title":"Convert, retrieve, or verify a model object — as.model","text":"Convert, retrieve, verify model object","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/as.model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert, retrieve, or verify a model object — as.model","text":"","code":"as.model(object, ...)  # Default S3 method as.model(object, ...)  # S3 method for class 'tidycpt' as.model(object, ...)  is_model(x, ...)"},{"path":"https://beanumber.github.io/tidychangepoint/reference/as.model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert, retrieve, or verify a model object — as.model","text":"object tidycpt object, typically returned segment() ... currently ignored x object, typically returned fit_*()","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/as.model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert, retrieve, or verify a model object — as.model","text":".model() returns mod_cpt model object is_model() logical vector length 1","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/as.model.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert, retrieve, or verify a model object — as.model","text":"tidycpt objects model component. functions documented convenience utility functions working model components. .model() especially useful pipelines avoid use $ [ notation subsetting. applied tidycpt object, .model() simply returns model component object. However, applied segmenter object, .model() attempts converts object mod_cpt model object. is_model() checks see model object implements S3 methods necessary considered model.","code":""},{"path":[]},{"path":"https://beanumber.github.io/tidychangepoint/reference/as.model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert, retrieve, or verify a model object — as.model","text":"","code":"# Segment a time series using PELT x <- segment(CET, method = \"pelt\")  # Retrieve the model component x |>    as.model() #> ℹ Model: A meanvar  model with 6 region(s). #> → Each region has 2 parameter(s). #> → The model has 0 global parameter(s).  # Explicitly convert the segmenter to a model x |>   as.segmenter() |>   as.model() #> ℹ Model: A meanvar  model with 6 region(s). #> → Each region has 2 parameter(s). #> → The model has 0 global parameter(s).  # Is that model valid?  x |>   as.model() |>   is_model() #> [1] TRUE     # Fit a model directly, without using [segment()] x <- fit_nhpp(CET, tau = 330) is_model(x) #> [1] TRUE"},{"path":"https://beanumber.github.io/tidychangepoint/reference/as.segmenter.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert, retrieve, or verify a segmenter object — as.segmenter","title":"Convert, retrieve, or verify a segmenter object — as.segmenter","text":"Convert, retrieve, verify segmenter object","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/as.segmenter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert, retrieve, or verify a segmenter object — as.segmenter","text":"","code":"as.segmenter(object, ...)  as.seg_cpt(object, ...)  # S3 method for class 'seg_basket' as.seg_cpt(object, ...)  # S3 method for class 'seg_cpt' as.seg_cpt(object, ...)  # S3 method for class 'tidycpt' as.segmenter(object, ...)  # S3 method for class 'ga' as.seg_cpt(object, ...)  # S3 method for class 'cpt' as.seg_cpt(object, ...)  # S3 method for class 'cptga' as.seg_cpt(object, ...)  # S3 method for class 'segmented' as.seg_cpt(object, ...)  # S3 method for class 'wbs' as.seg_cpt(object, ...)  is_segmenter(object, ...)"},{"path":"https://beanumber.github.io/tidychangepoint/reference/as.segmenter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert, retrieve, or verify a segmenter object — as.segmenter","text":"object tidycpt segmenter object ... Arguments passed methods","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/as.segmenter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert, retrieve, or verify a segmenter object — as.segmenter","text":".segmenter() returns segmenter object tidycpt object. Note class, depending class returned segmenting function. .seg_cpt() returns seg_cpt object is_segmenter() logical vector length 1","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/as.segmenter.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert, retrieve, or verify a segmenter object — as.segmenter","text":"tidycpt objects segmenter component (typically created class segment()). functions documented convenience utility functions working segmenter components. .segmenter() especially useful pipelines avoid use $ [ notation subsetting. .segmenter() simply returns segmenter tidycpt object. .seg_cpt() takes wild-caught segmenter object arbitrary class converts seg_cpt object. is_segmenter() checks see segmenter object implements S3 methods necessary considered segmenter.","code":""},{"path":[]},{"path":"https://beanumber.github.io/tidychangepoint/reference/as.segmenter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert, retrieve, or verify a segmenter object — as.segmenter","text":"","code":"# Segment a time series using PELT x <- segment(CET, method = \"pelt\")  # Return the segmenter component x |>   as.segmenter() #> Class 'cpt' : Changepoint Object #>        ~~   : S4 class containing 12 slots with names #>               cpttype date version data.set method test.stat pen.type pen.value minseglen cpts ncpts.max param.est  #>  #> Created on  : Thu Oct 16 19:31:50 2025  #>  #> summary(.)  : #> ---------- #> Created Using changepoint version 2.3  #> Changepoint type      : Change in mean and variance  #> Method of analysis    : PELT  #> Test Statistic  : Normal  #> Type of penalty       : MBIC with value, 23.61053  #> Minimum Segment Length : 2  #> Maximum no. of cpts   : Inf  #> Changepoint Locations : 55 57 267 344 347     # Note the class of this object could be anything x |>   as.segmenter() |>   class() #> [1] \"cpt\" #> attr(,\"package\") #> [1] \"changepoint\"    # Convert the segmenter into the standardized seg_cpt class x |>   as.segmenter() |>   as.seg_cpt() #> List of 9 #>  $ data        : Time-Series [1:366] from 1 to 366: 8.87 9.1 9.78 9.52 8.63 9.34 8.29 9.86 8.52 9.51 ... #>  $ pkg         : chr \"changepoint\" #>  $ base_class  : chr \"cpt\" #>   ..- attr(*, \"package\")= chr \"changepoint\" #>  $ algorithm   : chr \"PELT\" #>  $ changepoints: int [1:5] 55 57 267 344 347 #>  $ fitness     : Named num -Inf #>   ..- attr(*, \"names\")= chr \"MBIC\" #>  $ seg_params  :List of 1 #>   ..$ :List of 3 #>   .. ..$ test_stat     : chr \"Normal\" #>   .. ..$ num_cpts_max  : num Inf #>   .. ..$ min_seg_length: num 2 #>  $ model_name  : chr \"meanvar\" #>  $ penalty     : chr \"MBIC\" #>  - attr(*, \"class\")= chr \"seg_cpt\"  # Is the segmenter valid? x |>   as.segmenter() |>   is_segmenter() #> [1] TRUE"},{"path":"https://beanumber.github.io/tidychangepoint/reference/as_year.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a date into a year — as_year","title":"Convert a date into a year — as_year","text":"Convert date year","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/as_year.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a date into a year — as_year","text":"","code":"as_year(x)"},{"path":"https://beanumber.github.io/tidychangepoint/reference/as_year.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a date into a year — as_year","text":"x object coercible base::Date. See base::.Date().","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/as_year.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a date into a year — as_year","text":"character vector representing years input","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/as_year.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a date into a year — as_year","text":"","code":"# Retrieve only the year as_year(\"1988-01-01\") #> [1] \"1988\""},{"path":"https://beanumber.github.io/tidychangepoint/reference/binary2tau.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert changepoint sets to binary strings — binary2tau","title":"Convert changepoint sets to binary strings — binary2tau","text":"Convert changepoint sets binary strings","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/binary2tau.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert changepoint sets to binary strings — binary2tau","text":"","code":"binary2tau(x)  tau2binary(tau, n)"},{"path":"https://beanumber.github.io/tidychangepoint/reference/binary2tau.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert changepoint sets to binary strings — binary2tau","text":"x binary string encodes changepoint set. See GA::gabin_Population(). tau numeric vector changepoint indices n length original time series","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/binary2tau.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert changepoint sets to binary strings — binary2tau","text":"binary2tau(): integer vector tau2binary(): integer vector length n","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/binary2tau.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert changepoint sets to binary strings — binary2tau","text":"order use GA::ga() genetic algorithm, need encoude changepoint set binary string. binary2tau() takes binary string representation changepoint set converts set changepoint indices. tau2binary() takes set changepoint indices number observations time series converts binary string representation changepoint set.","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/binary2tau.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert changepoint sets to binary strings — binary2tau","text":"","code":"# Recover changepoint set indices from binary strings binary2tau(c(0, 0, 1, 0, 1)) #> [1] 3 5 binary2tau(round(runif(10))) #> [1]  2  4  5  7  8 10  # Recover binary strings from changepoint set indices tau2binary(c(7, 17), n = 24) #>  [1] 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 tau2binary(binary2tau(c(0, 0, 1, 1, 0, 1)), n = 6) #> [1] 0 0 1 1 0 1"},{"path":"https://beanumber.github.io/tidychangepoint/reference/bogota_pm.html","id":null,"dir":"Reference","previous_headings":"","what":"Particulate matter in Bogotá, Colombia — bogota_pm","title":"Particulate matter in Bogotá, Colombia — bogota_pm","text":"Particulate matter less 2.5 microns diameter Bogotá, Colombia.","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/bogota_pm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Particulate matter in Bogotá, Colombia — bogota_pm","text":"","code":"bogota_pm"},{"path":"https://beanumber.github.io/tidychangepoint/reference/bogota_pm.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Particulate matter in Bogotá, Colombia — bogota_pm","text":"object class xts (inherits zoo) 1096 rows 1 columns.","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/bogota_pm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Particulate matter in Bogotá, Colombia — bogota_pm","text":"Daily readings 2018-2020 included.","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/bogota_pm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Particulate matter in Bogotá, Colombia — bogota_pm","text":"","code":"class(bogota_pm) #> [1] \"xts\" \"zoo\""},{"path":"https://beanumber.github.io/tidychangepoint/reference/build_gabin_population.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize populations in genetic algorithms — build_gabin_population","title":"Initialize populations in genetic algorithms — build_gabin_population","text":"Build initial population set genetic algorithms","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/build_gabin_population.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize populations in genetic algorithms — build_gabin_population","text":"","code":"build_gabin_population(x, ...)  log_gabin_population(x, ...)"},{"path":"https://beanumber.github.io/tidychangepoint/reference/build_gabin_population.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize populations in genetic algorithms — build_gabin_population","text":"x numeric vector coercible stats::ts object ... arguments passed methods","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/build_gabin_population.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize populations in genetic algorithms — build_gabin_population","text":"function can passed population argument GA::ga() (segment_ga())","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/build_gabin_population.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Initialize populations in genetic algorithms — build_gabin_population","text":"Genetic algorithms require method randomly generating initial populations (.e., first generation). default method used GA::ga() changepoint detection usually GA::gabin_Population(), selects candidate changepoints uniformly random probability 0.5. leads initial population excessively large candidate changepoint sets (order \\(n/2\\)), makes genetic algorithm slow. build_gabin_population() takes ts object runs several fast changepoint detection algorithms , sets initial probability 3 times average value size changepoint sets returned algorithms. conservative guess likely size optimal changepoint set. log_gabin_population() takes ts object sets initial probability natural logarithm length time series.","code":""},{"path":[]},{"path":"https://beanumber.github.io/tidychangepoint/reference/build_gabin_population.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialize populations in genetic algorithms — build_gabin_population","text":"","code":"# Build a function to generate the population f <- build_gabin_population(CET)  # Segment the time series using the population generation function segment(CET, method = \"ga\", population = f, maxiter = 5) #> Seeding initial population with probability: 0.0273224043715847 #> ℹ A tidycpt object. Segmenter ↓ #> An object of class \"ga\" #>  #> Call: #> GA::ga(type = \"binary\", fitness = obj_fun, nBits = n, population = ..1,     maxiter = 5) #>  #> Available slots: #>  [1] \"data\"          \"model_fn_args\" \"call\"          \"type\"          #>  [5] \"lower\"         \"upper\"         \"nBits\"         \"names\"         #>  [9] \"popSize\"       \"iter\"          \"run\"           \"maxiter\"       #> [13] \"suggestions\"   \"population\"    \"elitism\"       \"pcrossover\"    #> [17] \"pmutation\"     \"optim\"         \"fitness\"       \"summary\"       #> [21] \"bestSol\"       \"fitnessValue\"  \"solution\"      #> ℹ Model: A meanshift_norm  model with 5 region(s). #> → Each region has 1 parameter(s). #> → The model has 1 global parameter(s). f <- log_gabin_population(CET) segment(CET, method = \"ga\", population = f, maxiter = 10) #> Seeding initial population with probability: 0.0161274134792387 #> ℹ A tidycpt object. Segmenter ↓ #> An object of class \"ga\" #>  #> Call: #> GA::ga(type = \"binary\", fitness = obj_fun, nBits = n, population = ..1,     maxiter = 10) #>  #> Available slots: #>  [1] \"data\"          \"model_fn_args\" \"call\"          \"type\"          #>  [5] \"lower\"         \"upper\"         \"nBits\"         \"names\"         #>  [9] \"popSize\"       \"iter\"          \"run\"           \"maxiter\"       #> [13] \"suggestions\"   \"population\"    \"elitism\"       \"pcrossover\"    #> [17] \"pmutation\"     \"optim\"         \"fitness\"       \"summary\"       #> [21] \"bestSol\"       \"fitnessValue\"  \"solution\"      #> ℹ Model: A meanshift_norm  model with 5 region(s). #> → Each region has 1 parameter(s). #> → The model has 1 global parameter(s)."},{"path":"https://beanumber.github.io/tidychangepoint/reference/changepoints.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract changepoints — changepoints","title":"Extract changepoints — changepoints","text":"Retrieve indices changepoints identified algorithm model.","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/changepoints.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract changepoints — changepoints","text":"","code":"changepoints(x, ...)  # Default S3 method changepoints(x, ...)  # S3 method for class 'mod_cpt' changepoints(x, ...)  # S3 method for class 'seg_basket' changepoints(x, ...)  # S3 method for class 'seg_cpt' changepoints(x, ...)  # S3 method for class 'tidycpt' changepoints(x, use_labels = FALSE, ...)  # S3 method for class 'ga' changepoints(x, ...)  # S3 method for class 'cpt' changepoints(x, ...)  # S3 method for class 'cptga' changepoints(x, ...)  # S3 method for class 'segmented' changepoints(x, ...)  # S3 method for class 'wbs' changepoints(x, ...)"},{"path":"https://beanumber.github.io/tidychangepoint/reference/changepoints.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract changepoints — changepoints","text":"x tidycpt, segmenter, mod_cpt object ... arguments passed methods use_labels return time labels changepoints instead indices.","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/changepoints.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract changepoints — changepoints","text":"numeric vector changepoint indices, , use_labels TRUE, character time labels.","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/changepoints.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract changepoints — changepoints","text":"tidycpt objects, well segmenter model components, implement changepoints() methods. Note function confused wbs::changepoints(), returns different information. default method, changepoints() attempt return cpt_true attribute, set test_set().","code":""},{"path":[]},{"path":"https://beanumber.github.io/tidychangepoint/reference/changepoints.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract changepoints — changepoints","text":"","code":"cpts <- segment(DataCPSim, method = \"ga\", maxiter = 5) changepoints(cpts$segmenter) #>    x3    x6   x12   x18   x19   x22   x23   x24   x25   x26   x27   x28   x30  #>     3     6    12    18    19    22    23    24    25    26    27    28    30  #>   x31   x37   x38   x39   x41   x46   x47   x48   x50   x53   x56   x57   x58  #>    31    37    38    39    41    46    47    48    50    53    56    57    58  #>   x66   x71   x72   x75   x76   x77   x81   x83   x84   x86   x90   x91   x92  #>    66    71    72    75    76    77    81    83    84    86    90    91    92  #>   x93   x97  x101  x103  x105  x107  x108  x111  x112  x114  x117  x121  x123  #>    93    97   101   103   105   107   108   111   112   114   117   121   123  #>  x124  x132  x133  x135  x137  x140  x141  x144  x145  x153  x157  x160  x162  #>   124   132   133   135   137   140   141   144   145   153   157   160   162  #>  x163  x164  x165  x166  x169  x170  x171  x173  x177  x181  x182  x184  x186  #>   163   164   165   166   169   170   171   173   177   181   182   184   186  #>  x187  x189  x190  x194  x195  x196  x198  x199  x201  x204  x206  x209  x212  #>   187   189   190   194   195   196   198   199   201   204   206   209   212  #>  x213  x215  x218  x224  x229  x230  x235  x239  x241  x242  x246  x252  x253  #>   213   215   218   224   229   230   235   239   241   242   246   252   253  #>  x254  x258  x259  x261  x262  x264  x265  x267  x268  x269  x270  x271  x274  #>   254   258   259   261   262   264   265   267   268   269   270   271   274  #>  x277  x278  x279  x280  x281  x282  x284  x286  x287  x288  x289  x290  x292  #>   277   278   279   280   281   282   284   286   287   288   289   290   292  #>  x293  x294  x299  x301  x304  x311  x313  x314  x315  x317  x318  x320  x325  #>   293   294   299   301   304   311   313   314   315   317   318   320   325  #>  x326  x327  x328  x329  x330  x332  x334  x335  x337  x338  x346  x347  x349  #>   326   327   328   329   330   332   334   335   337   338   346   347   349  #>  x350  x353  x355  x356  x361  x363  x365  x368  x369  x370  x371  x375  x376  #>   350   353   355   356   361   363   365   368   369   370   371   375   376  #>  x381  x382  x384  x385  x387  x388  x389  x390  x393  x394  x396  x397  x398  #>   381   382   384   385   387   388   389   390   393   394   396   397   398  #>  x400  x401  x404  x405  x407  x408  x409  x410  x413  x415  x418  x419  x422  #>   400   401   404   405   407   408   409   410   413   415   418   419   422  #>  x424  x425  x426  x430  x431  x432  x433  x434  x435  x436  x440  x441  x443  #>   424   425   426   430   431   432   433   434   435   436   440   441   443  #>  x444  x445  x446  x447  x449  x450  x451  x452  x453  x454  x457  x458  x460  #>   444   445   446   447   449   450   451   452   453   454   457   458   460  #>  x462  x467  x468  x472  x474  x475  x480  x482  x486  x487  x488  x489  x490  #>   462   467   468   472   474   475   480   482   486   487   488   489   490  #>  x491  x492  x493  x495  x496  x499  x501  x503  x506  x507  x508  x510  x511  #>   491   492   493   495   496   499   501   503   506   507   508   510   511  #>  x513  x514  x520  x525  x526  x529  x531  x532  x534  x535  x537  x539  x540  #>   513   514   520   525   526   529   531   532   534   535   537   539   540  #>  x541  x542  x543  x549  x551  x553  x555  x557  x559  x560  x561  x562  x570  #>   541   542   543   549   551   553   555   557   559   560   561   562   570  #>  x571  x574  x576  x577  x578  x579  x580  x581  x582  x586  x587  x588  x589  #>   571   574   576   577   578   579   580   581   582   586   587   588   589  #>  x591  x592  x593  x594  x595  x598  x604  x608  x610  x611  x616  x617  x621  #>   591   592   593   594   595   598   604   608   610   611   616   617   621  #>  x622  x623  x624  x626  x627  x630  x633  x634  x636  x639  x640  x641  x643  #>   622   623   624   626   627   630   633   634   636   639   640   641   643  #>  x646  x649  x652  x655  x658  x659  x660  x662  x665  x666  x667  x669  x671  #>   646   649   652   655   658   659   660   662   665   666   667   669   671  #>  x672  x673  x674  x675  x676  x678  x680  x682  x686  x687  x688  x690  x691  #>   672   673   674   675   676   678   680   682   686   687   688   690   691  #>  x692  x693  x695  x696  x698  x700  x703  x706  x708  x709  x715  x716  x723  #>   692   693   695   696   698   700   703   706   708   709   715   716   723  #>  x724  x726  x727  x728  x729  x730  x731  x732  x733  x735  x737  x739  x740  #>   724   726   727   728   729   730   731   732   733   735   737   739   740  #>  x741  x742  x744  x746  x747  x748  x749  x753  x754  x755  x756  x757  x758  #>   741   742   744   746   747   748   749   753   754   755   756   757   758  #>  x762  x767  x768  x773  x778  x780  x782  x785  x786  x794  x797  x798  x804  #>   762   767   768   773   778   780   782   785   786   794   797   798   804  #>  x805  x808  x813  x815  x818  x821  x823  x825  x826  x827  x828  x829  x832  #>   805   808   813   815   818   821   823   825   826   827   828   829   832  #>  x833  x834  x835  x836  x837  x838  x839  x840  x842  x843  x846  x847  x849  #>   833   834   835   836   837   838   839   840   842   843   846   847   849  #>  x852  x853  x854  x857  x858  x862  x863  x865  x868  x871  x874  x875  x880  #>   852   853   854   857   858   862   863   865   868   871   874   875   880  #>  x881  x884  x885  x889  x891  x898  x899  x900  x901  x906  x911  x916  x918  #>   881   884   885   889   891   898   899   900   901   906   911   916   918  #>  x919  x920  x921  x923  x924  x929  x931  x933  x934  x936  x938  x941  x942  #>   919   920   921   923   924   929   931   933   934   936   938   941   942  #>  x945  x946  x947  x948  x950  x954  x957  x958  x959  x961  x962  x964  x966  #>   945   946   947   948   950   954   957   958   959   961   962   964   966  #>  x967  x968  x969  x970  x972  x973  x974  x979  x980  x981  x983  x984  x985  #>   967   968   969   970   972   973   974   979   980   981   983   984   985  #>  x989  x990  x992  x994  x995  x996  x997  x999 x1000 x1003 x1004 x1007 x1008  #>   989   990   992   994   995   996   997   999  1000  1003  1004  1007  1008  #> x1010 x1012 x1013 x1017 x1018 x1019 x1021 x1022 x1026 x1029 x1030 x1034 x1036  #>  1010  1012  1013  1017  1018  1019  1021  1022  1026  1029  1030  1034  1036  #> x1037 x1039 x1040 x1041 x1042 x1043 x1044 x1049 x1056 x1057 x1060 x1061 x1062  #>  1037  1039  1040  1041  1042  1043  1044  1049  1056  1057  1060  1061  1062  #> x1063 x1064 x1069 x1071 x1076 x1084 x1086 x1087 x1088 x1089 x1092 x1094  #>  1063  1064  1069  1071  1076  1084  1086  1087  1088  1089  1092  1094   # \\donttest{ # Segment a times series using a genetic algorithm cpts <- segment(DataCPSim, method = \"cptga\") changepoints(cpts$segmenter) #> [1] 554 821 973 # } cpts <- segment(DataCPSim, method = \"segmented\") changepoints(cpts$segmenter) #> [1] 776  cpts <- segment(DataCPSim, method = \"wbs\") changepoints(cpts$segmenter) #>  [1]  547  809  810  822  823  939  952  953  972  976  980  982  997  999 1031 #> [16] 1032 1040 1041 1046 1063 1064 1065 1066 1086"},{"path":"https://beanumber.github.io/tidychangepoint/reference/compare_models.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare various models or algorithms for a given changepoint set — compare_models","title":"Compare various models or algorithms for a given changepoint set — compare_models","text":"Compare various models algorithms given changepoint set","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/compare_models.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare various models or algorithms for a given changepoint set — compare_models","text":"","code":"compare_models(x, ...)  compare_algorithms(x, ...)"},{"path":"https://beanumber.github.io/tidychangepoint/reference/compare_models.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare various models or algorithms for a given changepoint set — compare_models","text":"x tidycpt object ... currently ignored","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/compare_models.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare various models or algorithms for a given changepoint set — compare_models","text":"tibble::tbl_df","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/compare_models.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compare various models or algorithms for a given changepoint set — compare_models","text":"tidycpt object set changepoints returned algorithm segmented time series. changepoint set obtained using specific model. Treating changepoint set fixed, compare_models() function fits several common changepoint models time series changepoint set, returns results glance(). Comparing fits various models lead improved understanding. Alternatively, compare_algorithms() runs several fast changepoint detection algorithms original time series, consolidates results.","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/compare_models.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare various models or algorithms for a given changepoint set — compare_models","text":"","code":"# Segment a times series using PELT x <- segment(CET, method = \"pelt\")  # Compare models compare_models(x) #> # A tibble: 8 × 12 #>   pkg     version algorithm params num_cpts  rmse logLik   AIC   BIC  MBIC   MDL #>   <chr>   <pckg_> <chr>     <list>    <int> <dbl>  <dbl> <dbl> <dbl> <dbl> <dbl> #> 1 tidych… 1.0.2   nhpp      <dbl>         5 0.577  -290.  616.  686.  651.  680. #> 2 tidych… 1.0.2   splinesh… <dbl>         5 0.553  -303.  654.  747.  677.  724. #> 3 tidych… 1.0.2   trendshi… <dbl>         5 0.564  -309.  655.  729.  689.  724. #> 4 tidych… 1.0.2   meanshif… <dbl>         5 0.568  -311.  649.  699.  694.  711. #> 5 tidych… 1.0.2   trendshi… <dbl>         5 0.572  -315.  666.  736.  701.  730. #> 6 tidych… 1.0.2   meanvar   <NULL>        5 0.577  -318.  671.  737.  708.  731. #> 7 tidych… 1.0.2   meanshif… <dbl>         5 0.577  -318.  661.  707.  708.  719. #> 8 tidych… 1.0.2   meanvar   <NULL>        5 0.577  -318.  671.  737.  708.  731. #> # ℹ 1 more variable: BMDL <dbl>  # Compare algorithms compare_algorithms(x) #> Seeding initial population with probability: 0.0161274134792387 #> # A tibble: 6 × 8 #>   pkg      version algorithm seg_params model_name criteria fitness elapsed_time #>   <chr>    <pckg_> <chr>     <list>     <chr>      <chr>      <dbl> <drtn>       #> 1 tidycha… 1.0.2   manual    <list [0]> meanshift… BIC         789. 0.003 secs   #> 2 changep… 2.3     BinSeg    <list [1]> meanvar    MBIC        653. 0.005 secs   #> 3 changep… 2.3     PELT      <list [1]> meanvar    MBIC       -Inf  0.009 secs   #> 4 changep… 2.3     PELT      <list [1]> meanvar    MBIC       -Inf  0.009 secs   #> 5 wbs      1.4.1   Wild Bin… <list [1]> meanshift… MBIC       -130. 0.023 secs   #> 6 GA       3.2.4   Genetic   <list [1]> meanshift… BIC         698. 0.105 secs"},{"path":"https://beanumber.github.io/tidychangepoint/reference/cut_by_tau.html","id":null,"dir":"Reference","previous_headings":"","what":"Use a changepoint set to break a time series into regions — cut_by_tau","title":"Use a changepoint set to break a time series into regions — cut_by_tau","text":"Use changepoint set break time series regions","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/cut_by_tau.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use a changepoint set to break a time series into regions — cut_by_tau","text":"","code":"cut_by_tau(x, tau)  split_by_tau(x, tau)"},{"path":"https://beanumber.github.io/tidychangepoint/reference/cut_by_tau.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use a changepoint set to break a time series into regions — cut_by_tau","text":"x numeric vector tau numeric vector changepoint indices","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/cut_by_tau.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use a changepoint set to break a time series into regions — cut_by_tau","text":"cut_by_tau() base::factor() half-open intervals split_by_tau() named base::list() numeric vectors","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/cut_by_tau.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Use a changepoint set to break a time series into regions — cut_by_tau","text":"changepoint set tau length \\(k\\) breaks time series length \\(n\\) \\(k+1\\) non-empty regions. non-empty regions can defined half-open intervals, starting 1 ending \\(n+1\\). cut_by_tau() splits set indices base::factor() half-open intervals split_by_tau() splits time series named base::list() numeric vectors","code":""},{"path":[]},{"path":"https://beanumber.github.io/tidychangepoint/reference/cut_by_tau.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use a changepoint set to break a time series into regions — cut_by_tau","text":"","code":"n <- length(CET)  # Return a factor of intervals cut_by_tau(1:n, tau = pad_tau(c(42, 81, 330), n)) #>   [1] [1,42)    [1,42)    [1,42)    [1,42)    [1,42)    [1,42)    [1,42)    #>   [8] [1,42)    [1,42)    [1,42)    [1,42)    [1,42)    [1,42)    [1,42)    #>  [15] [1,42)    [1,42)    [1,42)    [1,42)    [1,42)    [1,42)    [1,42)    #>  [22] [1,42)    [1,42)    [1,42)    [1,42)    [1,42)    [1,42)    [1,42)    #>  [29] [1,42)    [1,42)    [1,42)    [1,42)    [1,42)    [1,42)    [1,42)    #>  [36] [1,42)    [1,42)    [1,42)    [1,42)    [1,42)    [1,42)    [42,81)   #>  [43] [42,81)   [42,81)   [42,81)   [42,81)   [42,81)   [42,81)   [42,81)   #>  [50] [42,81)   [42,81)   [42,81)   [42,81)   [42,81)   [42,81)   [42,81)   #>  [57] [42,81)   [42,81)   [42,81)   [42,81)   [42,81)   [42,81)   [42,81)   #>  [64] [42,81)   [42,81)   [42,81)   [42,81)   [42,81)   [42,81)   [42,81)   #>  [71] [42,81)   [42,81)   [42,81)   [42,81)   [42,81)   [42,81)   [42,81)   #>  [78] [42,81)   [42,81)   [42,81)   [81,330)  [81,330)  [81,330)  [81,330)  #>  [85] [81,330)  [81,330)  [81,330)  [81,330)  [81,330)  [81,330)  [81,330)  #>  [92] [81,330)  [81,330)  [81,330)  [81,330)  [81,330)  [81,330)  [81,330)  #>  [99] [81,330)  [81,330)  [81,330)  [81,330)  [81,330)  [81,330)  [81,330)  #> [106] [81,330)  [81,330)  [81,330)  [81,330)  [81,330)  [81,330)  [81,330)  #> [113] [81,330)  [81,330)  [81,330)  [81,330)  [81,330)  [81,330)  [81,330)  #> [120] [81,330)  [81,330)  [81,330)  [81,330)  [81,330)  [81,330)  [81,330)  #> [127] [81,330)  [81,330)  [81,330)  [81,330)  [81,330)  [81,330)  [81,330)  #> [134] [81,330)  [81,330)  [81,330)  [81,330)  [81,330)  [81,330)  [81,330)  #> [141] [81,330)  [81,330)  [81,330)  [81,330)  [81,330)  [81,330)  [81,330)  #> [148] [81,330)  [81,330)  [81,330)  [81,330)  [81,330)  [81,330)  [81,330)  #> [155] [81,330)  [81,330)  [81,330)  [81,330)  [81,330)  [81,330)  [81,330)  #> [162] [81,330)  [81,330)  [81,330)  [81,330)  [81,330)  [81,330)  [81,330)  #> [169] [81,330)  [81,330)  [81,330)  [81,330)  [81,330)  [81,330)  [81,330)  #> [176] [81,330)  [81,330)  [81,330)  [81,330)  [81,330)  [81,330)  [81,330)  #> [183] [81,330)  [81,330)  [81,330)  [81,330)  [81,330)  [81,330)  [81,330)  #> [190] [81,330)  [81,330)  [81,330)  [81,330)  [81,330)  [81,330)  [81,330)  #> [197] [81,330)  [81,330)  [81,330)  [81,330)  [81,330)  [81,330)  [81,330)  #> [204] [81,330)  [81,330)  [81,330)  [81,330)  [81,330)  [81,330)  [81,330)  #> [211] [81,330)  [81,330)  [81,330)  [81,330)  [81,330)  [81,330)  [81,330)  #> [218] [81,330)  [81,330)  [81,330)  [81,330)  [81,330)  [81,330)  [81,330)  #> [225] [81,330)  [81,330)  [81,330)  [81,330)  [81,330)  [81,330)  [81,330)  #> [232] [81,330)  [81,330)  [81,330)  [81,330)  [81,330)  [81,330)  [81,330)  #> [239] [81,330)  [81,330)  [81,330)  [81,330)  [81,330)  [81,330)  [81,330)  #> [246] [81,330)  [81,330)  [81,330)  [81,330)  [81,330)  [81,330)  [81,330)  #> [253] [81,330)  [81,330)  [81,330)  [81,330)  [81,330)  [81,330)  [81,330)  #> [260] [81,330)  [81,330)  [81,330)  [81,330)  [81,330)  [81,330)  [81,330)  #> [267] [81,330)  [81,330)  [81,330)  [81,330)  [81,330)  [81,330)  [81,330)  #> [274] [81,330)  [81,330)  [81,330)  [81,330)  [81,330)  [81,330)  [81,330)  #> [281] [81,330)  [81,330)  [81,330)  [81,330)  [81,330)  [81,330)  [81,330)  #> [288] [81,330)  [81,330)  [81,330)  [81,330)  [81,330)  [81,330)  [81,330)  #> [295] [81,330)  [81,330)  [81,330)  [81,330)  [81,330)  [81,330)  [81,330)  #> [302] [81,330)  [81,330)  [81,330)  [81,330)  [81,330)  [81,330)  [81,330)  #> [309] [81,330)  [81,330)  [81,330)  [81,330)  [81,330)  [81,330)  [81,330)  #> [316] [81,330)  [81,330)  [81,330)  [81,330)  [81,330)  [81,330)  [81,330)  #> [323] [81,330)  [81,330)  [81,330)  [81,330)  [81,330)  [81,330)  [81,330)  #> [330] [330,367) [330,367) [330,367) [330,367) [330,367) [330,367) [330,367) #> [337] [330,367) [330,367) [330,367) [330,367) [330,367) [330,367) [330,367) #> [344] [330,367) [330,367) [330,367) [330,367) [330,367) [330,367) [330,367) #> [351] [330,367) [330,367) [330,367) [330,367) [330,367) [330,367) [330,367) #> [358] [330,367) [330,367) [330,367) [330,367) [330,367) [330,367) [330,367) #> [365] [330,367) [330,367) #> Levels: [1,42) [42,81) [81,330) [330,367)  # Return a list of observations split_by_tau(DataCPSim, c(365, 826)) #> $`[1,365)` #>   [1] 35.50961 29.00292 35.63508 32.98452 29.53557 25.40781 28.82497 50.31157 #>   [9] 24.93185 58.88063 30.35777 33.66315 32.58653 42.78788 45.23963 23.66417 #>  [17] 20.00954 31.64746 34.65507 68.49028 43.53948 25.29938 57.19244 39.51995 #>  [25] 23.79025 27.81451 42.00712 36.09812 32.74664 34.73679 60.20919 55.52211 #>  [33] 33.92043 32.48948 22.66494 24.16119 27.05582 16.09789 31.69439 27.22202 #>  [41] 20.64027 33.97673 46.71000 25.28389 24.88207 41.75347 36.50448 35.98297 #>  [49] 31.39612 44.14153 67.82557 26.81619 27.55292 30.77449 51.17371 51.34317 #>  [57] 23.10056 22.92962 29.39409 73.67531 23.46017 35.36286 29.45083 54.18062 #>  [65] 25.04895 27.47914 51.41767 32.30387 43.17916 30.11288 22.45535 33.70278 #>  [73] 34.16720 44.64931 22.60994 50.26498 50.28394 33.24944 38.73890 36.75336 #>  [81] 52.38881 36.62906 16.68155 35.12389 35.89239 61.81050 47.85419 30.26446 #>  [89] 36.93150 54.81053 30.32479 37.46579 49.93442 46.01734 24.86685 35.88435 #>  [97] 42.25720 37.78741 46.26335 38.52976 47.99867 44.28395 51.05976 50.99393 #> [105] 36.01026 37.44409 16.77029 31.05583 22.40344 27.22149 28.31583 58.06805 #> [113] 38.30690 47.26490 31.55811 47.63268 23.38334 33.30157 46.75618 30.46511 #> [121] 23.17060 31.52724 38.55479 35.54940 49.63486 38.85458 35.80205 24.50227 #> [129] 20.49025 31.59546 33.84992 30.02572 23.84156 27.92167 28.04857 55.54324 #> [137] 23.82133 46.27102 35.95369 47.65766 31.37265 37.43892 26.73598 39.78209 #> [145] 37.23990 38.69749 25.74961 15.00954 41.03282 35.55822 28.20253 34.25572 #> [153] 36.72560 25.87219 34.25647 41.05718 45.99951 35.09617 30.10936 56.29692 #> [161] 21.62607 32.16878 48.08144 27.56512 24.86829 23.20973 23.35380 24.87480 #> [169] 41.98302 43.00026 42.37708 57.59545 28.58172 35.77870 28.82814 35.31054 #> [177] 45.07452 19.92057 49.94871 42.05699 45.69919 40.55247 28.77050 34.25098 #> [185] 39.57524 27.14581 44.69057 36.14965 49.50564 49.79043 17.99559 39.65697 #> [193] 44.97010 18.31935 31.24522 31.07475 21.61906 40.06484 34.99030 21.94425 #> [201] 37.44403 40.21178 38.23743 31.80890 34.61897 47.81524 34.58307 30.49509 #> [209] 45.29616 49.07757 24.17640 35.64875 17.63070 21.61867 32.29813 26.41488 #> [217] 28.31542 25.02318 20.23520 28.13247 63.69313 42.52417 29.03129 54.03181 #> [225] 25.60167 66.22389 26.02854 43.94607 39.26708 21.90635 33.10292 31.36953 #> [233] 68.74632 49.57971 36.77692 62.23430 33.17239 34.70213 29.33086 40.40664 #> [241] 20.51693 56.48982 47.57652 18.78920 39.83695 23.57444 32.90584 23.97282 #> [249] 29.16350 33.94278 33.32760 40.39087 37.08789 34.55488 28.07540 34.55889 #> [257] 32.50873 30.26050 31.61021 29.22609 21.66017 39.99861 31.54268 54.66244 #> [265] 28.83481 50.43102 41.57023 36.52691 41.74322 29.88869 65.63664 28.92781 #> [273] 31.62743 60.02248 23.41874 30.41566 49.28914 30.75073 41.08489 35.95343 #> [281] 26.30653 30.42233 35.58619 27.11696 41.07739 32.16801 54.22658 30.58481 #> [289] 32.75808 40.14170 38.59850 34.62828 26.92407 32.65613 21.12857 21.76199 #> [297] 31.72514 32.81883 39.57492 29.56246 26.52171 33.16808 30.46846 26.71148 #> [305] 20.12177 28.85316 25.85809 73.07025 50.11722 55.60337 42.62562 53.62811 #> [313] 40.37492 36.09093 54.15097 52.48111 28.21508 44.33563 15.14660 31.77283 #> [321] 28.02836 42.85488 30.07936 32.42728 33.91356 17.04858 29.01530 31.04799 #> [329] 24.28621 35.50456 45.96182 21.99371 38.45540 25.78633 45.07985 27.04933 #> [337] 50.03548 29.92024 26.27057 24.47919 59.13347 35.87683 42.14550 29.36456 #> [345] 44.58931 30.97851 21.83860 46.47922 39.71751 20.74531 21.96494 27.95186 #> [353] 40.64999 65.79466 34.95445 33.87721 27.41981 19.67562 39.39982 45.69528 #> [361] 22.18879 37.54553 23.15847 28.45508 #>  #> $`[365,826)` #>   [1]  25.23477  33.00227  27.16574  34.19212  38.82416  17.26278  38.40626 #>   [8]  57.01508  40.28032  27.15082  32.21021  41.59108  44.75365  31.57659 #>  [15]  44.49800  41.11233  35.23455  24.47634  45.13415  37.24519  42.85021 #>  [22]  32.84645  37.01077  38.96790  40.08106  43.99265  32.24746  27.24075 #>  [29]  31.66613  34.98403  27.29397  34.99001  31.25752  30.07230  27.18477 #>  [36]  37.36462  34.40921  27.16085  37.36703  47.98335  43.48091  23.31231 #>  [43]  20.68531  40.72063  13.66989  27.99689  25.61063  27.89089  17.93238 #>  [50]  23.25505  69.87353  20.53952  38.76444  45.53784  43.99368  25.86236 #>  [57]  23.02465  26.68788  51.99475  31.49945  39.98303  25.96329  18.68290 #>  [64]  45.39740  41.85522  40.88774  33.13019  36.51401  43.93668  28.72223 #>  [71]  17.36850  29.80030  29.36764  33.21636  30.98314  44.00905  49.96474 #>  [78]  32.63317  34.95938  42.09920  25.98961  26.13540  40.91752  27.13926 #>  [85]  23.93415  44.34438  24.80069  39.56627  34.17161  29.33848  51.51685 #>  [92]  38.10154  17.89906  29.84155  20.73680  17.94649  20.14526  30.60828 #>  [99]  37.05229  26.99159  48.47064  29.63704  30.29811  29.44919  50.20743 #> [106]  25.22852  19.31610  49.49408  31.13921  45.04409  26.36500  21.37141 #> [113]  33.60464  39.82629  23.44417  50.85233  35.55273  31.42400  52.78349 #> [120]  46.42078  32.84158  41.58214  37.57874  92.79539  21.87917  35.86701 #> [127]  44.63170  23.67373  49.57926  37.82632  28.51937  54.19448  25.42921 #> [134]  31.42047  45.75800  26.14005  32.43037  30.31998  60.34780  35.38384 #> [141]  17.65934  49.95322  48.97623  24.37608  62.05997  17.90258  35.04199 #> [148]  25.02686  37.13100  27.42116  46.56513  14.44667  18.13457  30.41839 #> [155]  40.06058  33.26711  58.99535  23.18483  36.67044  24.95331  27.19064 #> [162]  26.76947  37.48431  37.13503  22.80870  32.98376  16.45626  25.22453 #> [169]  35.59700  24.01433  58.24541  34.09432  31.09085  29.28524  20.65437 #> [176]  24.52000  61.00638  33.59970  19.62836  30.89483  27.49646  47.74031 #> [183]  38.48854  79.28284  49.83587  41.20827  60.84168  58.74430  73.74234 #> [190]  62.99021  44.73661  66.14946  78.63431  58.85001  56.29965  49.76806 #> [197]  66.31184  77.24626  30.20323  34.36305  40.14230 115.76308  53.35118 #> [204]  56.61291  54.02821  30.86656  64.91494  51.47610  58.02405  46.19877 #> [211]  75.46288  62.38693  62.12430  29.65914  48.83256  48.45711  87.84555 #> [218]  48.89591  79.45862  45.43495  61.17216  44.15376  40.81283  28.66775 #> [225] 100.81542  80.80345  59.82787  60.46746  61.44131  33.23726  52.19624 #> [232]  83.51128  53.55938  63.91426  43.91224  55.36213  54.68760  56.36276 #> [239]  50.26803  63.36135  71.84053  44.01963  54.90876  48.05082  73.33604 #> [246]  40.86609  53.14413  59.74683  74.13609  72.72819  73.80368  46.35780 #> [253]  39.46049  69.37131  69.23278  39.48316  65.63175  50.51306  79.59284 #> [260]  43.27989  29.25963  53.94132  47.30325  89.88726  64.49022  53.12747 #> [267]  51.61317  47.72412 102.46424  79.80996  51.62739  45.94677  44.20380 #> [274]  62.47154  56.71323  45.20940  33.56516  93.76083  56.27748  43.03061 #> [281]  86.12136  66.81985 103.73717  45.81972  66.39085  43.21773  56.16747 #> [288]  59.28413  50.73493  65.26301 107.46498  68.39817  77.53655  63.00234 #> [295] 100.37694  50.08347  51.31859  47.84582  73.28803  56.60291  49.47953 #> [302]  74.14721  51.88331  72.97605  37.36928  50.55296  94.49818  85.63369 #> [309]  47.21940  51.29463  30.87699  40.99069  65.22233  84.18339  36.97547 #> [316]  67.67693 130.27515  56.50564  52.08214  36.62894  50.17403  43.98132 #> [323]  63.78818  69.71901  58.66280  34.25625  40.01212  38.51369  31.93027 #> [330]  70.08009  60.78508  51.19670  65.45439  70.13630  38.38639  46.42615 #> [337]  59.55314  49.09690  60.75484  66.66783  70.41840  77.79466  57.57120 #> [344]  66.27876  40.41878  51.19402  90.55426  28.21335  67.71025  52.72485 #> [351]  37.34428  72.43783  92.29608  55.59297  69.66448  58.30077  50.26778 #> [358]  74.61613  50.92561  51.97960  99.50324  47.12665  87.80435 119.15289 #> [365]  96.67512  27.20912  42.35955  51.36019  66.15466  50.99965  31.33727 #> [372]  29.62981  55.37496  72.04834  44.82771  46.57539  64.62869  38.82131 #> [379]  53.86127  30.62108  27.37893  85.39840  55.85290  64.89730  94.68730 #> [386]  35.15146  37.51919  45.72001  89.69830  46.13428  66.35095  37.41977 #> [393]  43.10677  40.13555  43.13188  24.73451  76.52571  36.36566  71.17790 #> [400]  56.44084  63.19831  38.86127  56.54947  83.05808  41.66112  60.14119 #> [407]  73.36839  36.83335  46.99687  68.72470  48.02621  37.04922  67.67630 #> [414]  46.78206  43.38829  79.76107  43.42811  34.89142  46.70848  85.92108 #> [421]  65.54841  39.49996  41.09837  47.97916  62.31907  75.42977  83.27070 #> [428]  73.13176  58.56810  75.03824  37.08341  57.11212  62.88590  80.01578 #> [435]  31.43220  50.27634  20.52318  57.18749  65.93147  42.64495  60.78448 #> [442]  42.12619  44.69412  58.64844  68.76875 163.36185  59.30573  44.16434 #> [449]  74.02857  42.16594  47.80402  46.06946  68.13544  58.27459  44.44837 #> [456]  49.71347  41.92370  65.10552 190.42879 100.55114  84.73240 #>  #> $`[826,1.1e+03)` #>   [1]  95.19440  62.62765  81.34105  62.84927 119.41128  97.69586 103.24047 #>   [8] 132.04779  63.94897  61.11686  68.83021  80.70128 118.36174  69.88491 #>  [15]  75.67939  97.87433  84.47204 167.57416 119.33953 112.87803  94.60966 #>  [22]  54.52644 134.89541  80.76840 100.86500 125.36064  80.85360  81.27602 #>  [29] 102.14881  62.87013  89.81105  90.54166  77.87923 154.26053 104.44530 #>  [36]  89.99370 137.11783 108.63313  81.65888  91.76187 153.53548  93.17887 #>  [43] 131.28943  58.95745  63.59264  86.73104 159.01308  56.48464  53.76414 #>  [50]  79.36095 104.17268  82.69108  75.47191  80.10494 123.34176 117.11018 #>  [57]  82.67987  87.24288  77.92377 105.19438  75.47461  73.26672 103.96131 #>  [64]  88.69445  67.40834 115.24510 107.64339  93.11673 129.87959 126.03289 #>  [71] 118.21727 101.24318  85.84310  83.24171  94.37437  95.52714  58.18705 #>  [78]  70.93290 135.64519 122.17646  47.94730  81.90610  71.29312  59.56557 #>  [85]  90.96883 105.27981  68.10784  62.24482 118.12494  89.29744 104.93346 #>  [92]  54.31292 118.22755  85.99992  68.28882 116.87775  59.89081  88.51994 #>  [99] 124.96078  48.99528  83.42296  39.21350 104.91602  96.76956 112.59752 #> [106]  71.12703  88.73937  68.98548  70.70640  93.68761 131.72255  82.59086 #> [113]  81.56980  80.12171 160.72231 130.68852  61.65840 175.64769 103.14938 #> [120] 133.32521 160.15746  97.61800 119.62046 125.04584 120.67301 110.96952 #> [127]  62.16252 215.10540  81.98616 110.52191  53.11782  83.00635  59.01162 #> [134] 167.43096 146.43115 136.73301  93.53995  92.63548  98.56852  59.88143 #> [141] 101.45146 102.84065 115.38549 110.87331  96.65850  70.26512  73.19904 #> [148] 204.44288 120.52524 148.47584 176.52242  72.50633  98.01507  85.07589 #> [155] 122.09749 173.47087 272.06243 114.84247 194.43547 182.95500  99.70758 #> [162] 155.32184 234.90205 149.08372 129.43951  92.17400 150.30666 127.34289 #> [169]  95.56536 183.85856 173.20963 119.36203 298.97556 239.90785 149.72990 #> [176] 145.83624 199.97769 221.71715 124.50443 127.57657 126.63670 224.84161 #> [183] 193.52027  67.17684 193.24399 163.77183 115.04808 139.80491 194.08049 #> [190] 142.56183 150.05278 112.32713 229.27074 123.95988 146.80726 185.69923 #> [197] 111.44768 148.97687 122.53709 127.37003  92.55487 106.25934 151.61132 #> [204] 166.55049 166.27216  89.84812 285.64838 210.83361 119.86280 120.26534 #> [211] 166.67314 128.77576 128.26908 203.90985 124.66021 285.09853 111.19870 #> [218] 185.07644  88.79945  97.17543 121.60783 183.18550 113.42228 234.66441 #> [225] 148.81920 127.67544 144.30028 183.15017 180.80073 212.84778  81.80066 #> [232] 156.28369 217.85070 136.70053 196.65904 155.49179 120.33784 123.21350 #> [239] 293.16047 141.29326 286.30265 137.11341 191.99534 155.88733 232.83108 #> [246] 141.37831 114.62536 154.08698 129.56200 197.71852 143.31929 155.63173 #> [253] 166.92790 151.48311 133.67364 183.79864 134.72402 108.41123 113.01052 #> [260] 145.28928  85.79995 220.96699 127.18015 215.14311 190.93505 156.44133 #> [267] 164.06449 164.81190  85.39927 179.14410 135.09159 #>"},{"path":"https://beanumber.github.io/tidychangepoint/reference/deg_free.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve the degrees of freedom from a logLik object — deg_free","title":"Retrieve the degrees of freedom from a logLik object — deg_free","text":"Retrieve degrees freedom logLik object","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/deg_free.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve the degrees of freedom from a logLik object — deg_free","text":"","code":"deg_free(x)"},{"path":"https://beanumber.github.io/tidychangepoint/reference/deg_free.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve the degrees of freedom from a logLik object — deg_free","text":"x object implements method stats::logLik().","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/deg_free.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve the degrees of freedom from a logLik object — deg_free","text":"df attribute stats::logLik() given object.","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/deg_free.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve the degrees of freedom from a logLik object — deg_free","text":"","code":"# Retrieve the degrees of freedom model a changepoint model DataCPSim |>   segment() |>   as.model() |>   deg_free() #> [1] 2"},{"path":"https://beanumber.github.io/tidychangepoint/reference/diagnose.html","id":null,"dir":"Reference","previous_headings":"","what":"Diagnose the fit of a segmented time series — diagnose","title":"Diagnose the fit of a segmented time series — diagnose","text":"Depending input, function returns diagnostic plot.","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/diagnose.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Diagnose the fit of a segmented time series — diagnose","text":"","code":"diagnose(x, ...)  # S3 method for class 'mod_cpt' diagnose(x, ...)  # S3 method for class 'seg_basket' diagnose(x, ...)  # S3 method for class 'tidycpt' diagnose(x, ...)  # S3 method for class 'nhpp' diagnose(x, ...)"},{"path":"https://beanumber.github.io/tidychangepoint/reference/diagnose.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Diagnose the fit of a segmented time series — diagnose","text":"x tidycpt object, model segmenter ... currently ignored","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/diagnose.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Diagnose the fit of a segmented time series — diagnose","text":"ggplot2::ggplot() object","code":""},{"path":[]},{"path":"https://beanumber.github.io/tidychangepoint/reference/diagnose.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Diagnose the fit of a segmented time series — diagnose","text":"","code":"# For meanshift models, show the distribution of the residuals by region fit_meanshift_norm(CET, tau = 330) |>   diagnose() #> Registered S3 method overwritten by 'tsibble': #>   method               from  #>   as_tibble.grouped_df dplyr  # \\donttest{ # For Coen's algorithm, show the histogram of changepoint selections x <- segment(DataCPSim, method = \"coen\", num_generations = 3) #> Warning: `segment_coen()` was deprecated in tidychangepoint 0.0.1. #> ℹ Please use `segment_ga_coen()` instead. #> ℹ The deprecated feature was likely used in the tidychangepoint package. #>   Please report the issue to the authors. #>    |                                                                     |                                                            |   0%   |                                                                     |==============================                              |  50%   |                                                                     |============================================================| 100% x |>   as.segmenter() |>   diagnose() #> `stat_bin()` using `bins = 30`. Pick better value `binwidth`. #> Warning: Removed 2 rows containing missing values or values outside the scale range #> (`geom_bar()`).  # }  # Show various iterations of diagnostic plots diagnose(segment(DataCPSim))  diagnose(segment(DataCPSim, method = \"single-best\"))  diagnose(segment(DataCPSim, method = \"pelt\"))   # Show diagnostic plots for test sets diagnose(segment(test_set()))  diagnose(segment(test_set(n = 2, sd = 4), method = \"pelt\"))   # For NHPP models, show the growth in the number of exceedances diagnose(fit_nhpp(DataCPSim, tau = 826)) #> Warning: Removed 1 row containing missing values or values outside the scale range #> (`geom_vline()`).  diagnose(fit_nhpp(DataCPSim, tau = 826, threshold = 200)) #> Warning: Removed 1 row containing missing values or values outside the scale range #> (`geom_vline()`)."},{"path":"https://beanumber.github.io/tidychangepoint/reference/evaluate_cpts.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate candidate changepoints sets — evaluate_cpts","title":"Evaluate candidate changepoints sets — evaluate_cpts","text":"Evaluate candidate changepoints sets","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/evaluate_cpts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate candidate changepoints sets — evaluate_cpts","text":"","code":"evaluate_cpts(x, ...)  # S3 method for class 'seg_basket' evaluate_cpts(x, ...)  # S3 method for class 'list' evaluate_cpts(x, .data, model_fn, ...)  # S3 method for class 'tbl_df' evaluate_cpts(x, .data, model_fn, ...)"},{"path":"https://beanumber.github.io/tidychangepoint/reference/evaluate_cpts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate candidate changepoints sets — evaluate_cpts","text":"x object evaluate ... arguments passed methods .data time series model_fn Name function fit model. See, examples, fit_meanshift_norm().","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/evaluate_cpts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate candidate changepoints sets — evaluate_cpts","text":"tibble::tbl_df","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/evolve_gbmdl.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a list of candidate changepoints using a genetic algorithm — evolve_gbmdl","title":"Generate a list of candidate changepoints using a genetic algorithm — evolve_gbmdl","text":"Generate list candidate changepoints using genetic algorithm","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/evolve_gbmdl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a list of candidate changepoints using a genetic algorithm — evolve_gbmdl","text":"","code":"evolve_gbmdl(x, mat_cp, these_bmdls)  junta_1_puntos_cambio(padres, mat_cp)  junta_k_puntos_cambio(mat_padres, mat_cp)  mata_1_tau_volado(cp, prob_volado = 0.5)  mata_k_tau_volado(mat_cp)  muta_1_cp_BMDL(   cp,   x,   probs_nuevos_muta0N = c(0.8, 0.1, 0.1),   dist_extremos = 10,   min_num_cpts = 1,   mutation_possibilities = c(-1, 0, 1),   mutation_probs = c(0.3, 0.4, 0.3),   max_num_cp = 20 )  muta_k_cp_BMDL(mat_cp, x)  sim_1_cp_BMDL(x, max_num_cp = 20, prob_inicial = 0.06)  sim_k_cp_BMDL(x, generation_size = 50, max_num_cp = 20)  probs_vec_MDL(vec_MDL, probs_rank0_MDL1 = 0)  selec_k_pares_de_padres(vec_probs)  chromo2tau(chromo)  mat_cp_2_list(mat_cp)"},{"path":"https://beanumber.github.io/tidychangepoint/reference/evolve_gbmdl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a list of candidate changepoints using a genetic algorithm — evolve_gbmdl","text":"x time series object mat_cp matrix potential changepoints these_bmdls vector BMDL() scores padres vector de longitud dos con índice de papa e índice de mama mat_padres matriz de kx2 la cual contiene en sus renglones las parejas de padres cp vector cromosoma que se va poner prueba prob_volado probabilidad de quitar un tiempo de cambio existente utilizado por mata_k_tau_volado para quitar elementos de más. Se recomienda dejar el valor de 0.5 ya que así al juntar los pc del padre y madre se eliminará la mitad de estos probs_nuevos_muta0N probabilidades de mutar 0,1,2,...,l hasta cierto numero l; eg si vale c(.5,.2,.2,.1) se tiene una probabilidad 0.5 de mutar 0 (de mutar), probabilidad 0.2 de mutar 1,, probabilidad 0.2 de mutar 2, y, probabilidad 0.1 de mutar 3. dist_extremos distancia entre el primer los puntos de cambio v_0 y v_1 al igual que entre v_m y v_{m+1}; distancia minima que debe de haber de un punto de cambio y los valores 1 y T, donde T es la longitud total de la serie min_num_cpts es la cota inferior del número de puntos de cambio que puede tener un cromosoma mutation_possibilities vector con mutaciones posibles; eg si mutaciones=c(-1,0,1) entonces un punto de cambio puede ser movido una unidad la izquierda, puede quedarse igual, o moverse una unidad la derecha mutation_probs probabilidades de mutación. Las longitudes de este vector y mutaciones tienen que ser iguales; eg si mutaciones=c(-1,0,1) y probs_muta = c(.2, .6, .2) entonces se tiene una probabilidad .2 de que el punto de cambio se desplace la izquierda, probabilidad .6 de quedar igual, y probabilidad . 2 de ser movido la derecha max_num_cp el máximo número de rebases. Este parámetro se ocupa en particular para que todos los cromosomas quepan en una matriz. prob_inicial probabilidad de que en la primera generación un punto cualquiera sea punto de cambio. Se recomienda =.5 ya que con esto se distribuyen relativamente uniformes los puntos de cambio generation_size tamaño de las generaciones vec_MDL vector con valores MDL OBSERVACIÓN: Esto regresa numeros negativos, los cuales mientras más negativo mejor, ya que dará que es un mejor vector de tiempos de cambio. Es decir, un MDL de -6000 es mejor que -4000 probs_rank0_MDL1 para medir obtener la probabilidad de los padres se pueden tomar o las probabilidades con respecto los rangos (como en el artículo) o se pueden tomar las probabilidades con respecto el MDL. La diferencia radica en que si se toma con respecto al MDL se tendrá que un cromosoma con un gran MDL este tendrá una gran ventaja de ocurrir, en cambio cuando solo se tiene rank esta ventaja gran ventaja se reduce vec_probs vector de probabilidades de selección de cada uno de los cromosomas chromo Chromosome, row matrix mat_cp","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/evolve_gbmdl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a list of candidate changepoints using a genetic algorithm — evolve_gbmdl","text":"regresa una matriz de las mismas dimensiones que mat_cp, pero con los nuevos cromosomas el mismo cromosoma sin algunos de sus puntos de cambio regresa una matriz la cual se le quitaron sus cromosomas algunos puntos de cambio regresa un vector mutado regreas una mat_cp mutada regresa una matriz de k por max_num_cp+3, la cual en cada renglón tiene una simulación de un vector de tiempos de cambio regresa un vector de probabilidades","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/evolve_gbmdl.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate a list of candidate changepoints using a genetic algorithm — evolve_gbmdl","text":"regresa un vector de tamaño max_num_cp+3 donde la primera entrada es m, la segunda \\(v_0=1, ...., v_{m+1}=N,0,...,0\\) por ejemplo: c(4,1,3,8,11,15,20,0,0,0,0) para m=4, \\(max\\_num\\_cp=8\\), \\(N=20\\). Se tienen m puntos de cambio, los cuales \\(\\tau_0=1\\) y \\(\\tau_{m+1}= N+1\\), pero en nuestro caso tenemos que los vectores cp tienen \\(c(m,\\tau_0=1,\\tau_1,...,\\tau_{m-1},\\tau_m= N,0,0,0)\\) por lo cual se nosotros: empieza con el número de puntos de cambio; la segunda entrada es un uno; la tercera entrada es el primer punto de cambio; las siguientes son otros puntos de cambio; la siguiente entrada después de punto de cambio tiene el valor  N; y los siguientes son númores cero hasta llenarlo para que sea de tamaño max_num_cp","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/evolve_gbmdl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a list of candidate changepoints using a genetic algorithm — evolve_gbmdl","text":"","code":"mat_cp <- sim_k_cp_BMDL(DataCPSim) bmdls <- mat_cp |>    mat_cp_2_list() |>    evaluate_cpts(.data = as.ts(DataCPSim), model_fn = fit_nhpp) |>    dplyr::pull(BMDL) evolve_gbmdl(exceedances(DataCPSim), mat_cp, bmdls) #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] #>  [1,]   11    1  613  668  790  865  887  940  969   995   998  1037  1086 #>  [2,]    8    1  634  719  733  875  880  911  954   982  1096     0     0 #>  [3,]   10    1  727  741  838  841  998 1025 1034  1062  1070  1082  1096 #>  [4,]    8    1  613  657  878  920  940  961 1060  1086  1096     0     0 #>  [5,]   12    1  621  623  677  753  826  839  919   966   970  1026  1036 #>  [6,]    9    1  615  761  810  828  853  888  899  1003  1016  1096     0 #>  [7,]   10    1  583  717  867  939  950  960  963  1003  1063  1074  1096 #>  [8,]   10    1  488  562  589  717  890  951  964   967  1038  1065  1096 #>  [9,]    7    1  704  753  840  875  883 1001 1060  1096     0     0     0 #> [10,]    6    1  628  771  791  839  901 1005 1096     0     0     0     0 #> [11,]   13    1  633  646  668  746  780  790  853   854   897   970   999 #> [12,]    8    1  561  794  868  912  966  978 1066  1084  1096     0     0 #> [13,]    7    1  727  749  892  940 1006 1026 1072  1096     0     0     0 #> [14,]    6    1  633  768  864  904 1068 1086 1096     0     0     0     0 #> [15,]    8    1  488  605  613  727  910  979  981  1050  1096     0     0 #> [16,]    5    1  905  949  978 1001 1069 1096    0     0     0     0     0 #> [17,]    8    1  604  784  798  867  893  911  964   998  1096     0     0 #> [18,]    9    1  488  633  678  704  865  911  968   977  1002  1096     0 #> [19,]    9    1  642  645  681  817  833  845  932  1051  1086  1096     0 #> [20,]   11    1  556  609  698  748  810  883  959   977   995  1000  1068 #> [21,]    6    1  765  822  853  894  905 1086 1096     0     0     0     0 #> [22,]    7    1  834  844  964  966 1047 1063 1086  1096     0     0     0 #> [23,]    7    1  621  656  727  973 1065 1073 1086  1096     0     0     0 #> [24,]    6    1  846  912  972  995 1037 1086 1096     0     0     0     0 #> [25,]    5    1  628  822  895  964 1086 1096    0     0     0     0     0 #> [26,]    9    1  708  771  892  915  941  980  989  1027  1078  1096     0 #> [27,]    7    1  706  725  826  853  959 1020 1076  1096     0     0     0 #> [28,]    7    1  488  711  834  837  907  930 1086  1096     0     0     0 #> [29,]   11    1  415  548  706  729  749  763  988  1004  1006  1027  1038 #> [30,]   10    1  613  634  657  688  896  903  947  1003  1068  1086  1096 #> [31,]   11    1  663  668  725  741  833  838  839   890   908  1027  1086 #> [32,]   12    1  615  634  771  809  893  905  939   953   986   999  1019 #> [33,]    4    1  753  846 1027 1038 1096    0    0     0     0     0     0 #> [34,]    8    1  621  824  825  826  880  964  967  1025  1096     0     0 #> [35,]    9    1  719  733  790  823  853  878  923   980  1086  1096     0 #> [36,]    9    1  415  548  619  628  935  963 1012  1035  1085  1096     0 #> [37,]    8    1  605  609  655  738  859  937 1064  1074  1096     0     0 #> [38,]    7    1  621  678  706  839  845  910 1038  1096     0     0     0 #> [39,]    9    1  613  681  809  828  882  918  938   957   978  1096     0 #> [40,]    8    1  548  618  688  824  838  944 1010  1035  1096     0     0 #> [41,]    9    1  415  729  790  828  840  879 1016  1033  1051  1096     0 #> [42,]    4    1  841  846  921 1019 1096    0    0     0     0     0     0 #> [43,]    8    1  711  790  859  866  889  899  968  1029  1096     0     0 #> [44,]   11    1  415  561  771  774  858  878  888   892  1037  1077  1086 #> [45,]   12    1  415  823  825  839  846  868  951   963  1026  1032  1064 #> [46,]    8    1  711  832  880  972  978  982 1021  1040  1096     0     0 #> [47,]    5    1  619  623  960 1002 1035 1096    0     0     0     0     0 #> [48,]   10    1  415  645  763  879  964  968  977  1038  1074  1086  1096 #> [49,]   12    1  415  609  618  642  657  840  865   896   903   908   934 #> [50,]    9    1  645  852  868  964 1002 1039 1064  1070  1073  1096     0 #>       [,14] [,15] [,16] [,17] [,18] [,19] [,20] #>  [1,]  1096     0     0     0     0     0     0 #>  [2,]     0     0     0     0     0     0     0 #>  [3,]     0     0     0     0     0     0     0 #>  [4,]     0     0     0     0     0     0     0 #>  [5,]  1039  1096     0     0     0     0     0 #>  [6,]     0     0     0     0     0     0     0 #>  [7,]     0     0     0     0     0     0     0 #>  [8,]     0     0     0     0     0     0     0 #>  [9,]     0     0     0     0     0     0     0 #> [10,]     0     0     0     0     0     0     0 #> [11,]  1033  1086  1096     0     0     0     0 #> [12,]     0     0     0     0     0     0     0 #> [13,]     0     0     0     0     0     0     0 #> [14,]     0     0     0     0     0     0     0 #> [15,]     0     0     0     0     0     0     0 #> [16,]     0     0     0     0     0     0     0 #> [17,]     0     0     0     0     0     0     0 #> [18,]     0     0     0     0     0     0     0 #> [19,]     0     0     0     0     0     0     0 #> [20,]  1096     0     0     0     0     0     0 #> [21,]     0     0     0     0     0     0     0 #> [22,]     0     0     0     0     0     0     0 #> [23,]     0     0     0     0     0     0     0 #> [24,]     0     0     0     0     0     0     0 #> [25,]     0     0     0     0     0     0     0 #> [26,]     0     0     0     0     0     0     0 #> [27,]     0     0     0     0     0     0     0 #> [28,]     0     0     0     0     0     0     0 #> [29,]  1096     0     0     0     0     0     0 #> [30,]     0     0     0     0     0     0     0 #> [31,]  1096     0     0     0     0     0     0 #> [32,]  1057  1096     0     0     0     0     0 #> [33,]     0     0     0     0     0     0     0 #> [34,]     0     0     0     0     0     0     0 #> [35,]     0     0     0     0     0     0     0 #> [36,]     0     0     0     0     0     0     0 #> [37,]     0     0     0     0     0     0     0 #> [38,]     0     0     0     0     0     0     0 #> [39,]     0     0     0     0     0     0     0 #> [40,]     0     0     0     0     0     0     0 #> [41,]     0     0     0     0     0     0     0 #> [42,]     0     0     0     0     0     0     0 #> [43,]     0     0     0     0     0     0     0 #> [44,]  1096     0     0     0     0     0     0 #> [45,]  1066  1096     0     0     0     0     0 #> [46,]     0     0     0     0     0     0     0 #> [47,]     0     0     0     0     0     0     0 #> [48,]     0     0     0     0     0     0     0 #> [49,]  1065  1096     0     0     0     0     0 #> [50,]     0     0     0     0     0     0     0 sim_1_cp_BMDL(exceedances(DataCPSim)) #>  [1]   17    1  308  634  672  755  785  833  841  852  854  861  862  868  904 #> [16]  914  959 1004 1029 1096 sim_1_cp_BMDL(exceedances(rlnorm_ts_1)) #>  [1]   17    1   52  198  363  493  832  838  877  879  897  945  946  948  988 #> [16] 1006 1012 1051 1071 1096 sim_1_cp_BMDL(exceedances(rlnorm_ts_2)) #>  [1]   17    1  370  379  454  498  521  720  751  806  843  875  944  961  999 #> [16] 1004 1011 1072 1087 1096 sim_1_cp_BMDL(exceedances(rlnorm_ts_3)) #>  [1]   17    1  419  526  635  676  755  880  947  950  956  960  965  998 1002 #> [16] 1005 1048 1073 1089 1096 sim_1_cp_BMDL(exceedances(bogota_pm)) #>  [1]   17    1   72  111  115  278  292  360  414  427  462  535  538  583  678 #> [16]  760  901 1030 1076 1096  sim_k_cp_BMDL(DataCPSim) #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] #>  [1,]   17    1  271  561  583  590  647  706  727   728   893   914   953 #>  [2,]   17    1   60  221  226  561  615  864  867   878   934   936   974 #>  [3,]   17    1  618  621  628  647  708  790  881   886   898   907   957 #>  [4,]   16    1  415  628  649  738  741  856  903   910   915   947   951 #>  [5,]   15    1  271  618  647  755  810  837  871   876   886   973  1011 #>  [6,]   17    1  271  663  748  749  790  809  817   838   840   849   889 #>  [7,]   17    1  663  668  678  853  875  936  947   963   979   985  1000 #>  [8,]   17    1  583  618  642  666  680  687  729   763   822   837   872 #>  [9,]   16    1  226  548  590  680  774  854  900   911   953   955  1029 #> [10,]   17    1  810  834  863  885  897  924  959   979   992  1010  1021 #> [11,]   17    1  415  581  678  733  833  853  885   904   914   932  1010 #> [12,]   17    1  618  746  836  860  878  883  887   895   897   903   915 #> [13,]   17    1  621  705  727  746  810  848  857   933   951   981   984 #> [14,]   17    1  557  672  765  791  865  911  930   941   947   984   999 #> [15,]   16    1  621  677  727  790  813  840  854   887   932   934   964 #> [16,]   17    1  557  581  605  655  777  851  864   867   875   876   914 #> [17,]   17    1   60  677  680  694  729  790  825   891   893   895   943 #> [18,]   17    1  581  697  705  738  741  763  833   839   895   943   947 #> [19,]   17    1  271  596  697  763  803  864  867   868   884   896   915 #> [20,]   17    1   51  221  354  613  717  746  780   828   834   899   923 #> [21,]   17    1  556  687  713  755  765  828  830   867   884   898   900 #> [22,]   17    1  562  657  687  713  722  729  777   864   882   931   935 #> [23,]   17    1  655  733  771  792  832  839  864   895   905   936   939 #> [24,]   17    1  656  668  681  838  887  889  894   967   972   991   995 #> [25,]   17    1   51  761  845  882  890  923  924   936   937   945   973 #> [26,]   17    1  581  706  791  792  842  857  894   900   924   943   964 #> [27,]   17    1  354  609  704  785  848  852  856   898   959   971  1013 #> [28,]   17    1  654  681  711  717  728  729  828   852   867   936   953 #> [29,]   17    1   20  415  581  646  671  698  733   792   837   856   886 #> [30,]   17    1  647  749  840  880  905  935  938   943   955   973   996 #> [31,]   13    1  604  609  645  719  780  839  865   953   993  1020  1046 #> [32,]   17    1  271  681  791  832  836  837  851   883   891   898   941 #> [33,]   17    1  557  645  705  713  741  748  784   792   853   883   912 #> [34,]   14    1  553  575  605  655  717  777  853   888   891   971   996 #> [35,]   17    1  677  748  749  771  843  859  866   891   911   926   969 #> [36,]   17    1  656  704  861  870  883  890  945   978   991   997  1004 #> [37,]   17    1  688  706  834  852  859  871  876   901   916   936   968 #> [38,]   17    1   60  271  596  672  711  836  838   842   868   896   915 #> [39,]   17    1  308  680  687  694  713  838  861   879   898   934   944 #> [40,]   13    1  609  633  646  657  672  862  884   951   954  1003  1029 #> [41,]   17    1  488  596  598  657  671  681  863   901   903   904   939 #> [42,]   16    1  271  645  646  780  823  895  920   954   957   959   976 #> [43,]   17    1  308  615  647  680  688  717  722   755   765   798   838 #> [44,]   17    1  634  680  694  841  842  863  883   928   930   961   964 #> [45,]   17    1  226  575  655  771  810  823  828   836   841   843   848 #> [46,]   17    1   60  614  680  753  780  837  891   894   904   928   961 #> [47,]   11    1  226  354  798  853  858  894  929   933   955  1006  1093 #> [48,]   17    1  615  646  659  694  711  738  824   912   918   935   940 #> [49,]   16    1  583  605  621  717  813  930  970   979  1008  1015  1016 #> [50,]   17    1   60  634  672  704  717  763  813   851   883   907   989 #>       [,14] [,15] [,16] [,17] [,18] [,19] [,20] #>  [1,]  1023  1030  1040  1044  1085  1091  1096 #>  [2,]   979  1010  1015  1024  1060  1079  1096 #>  [3,]  1003  1012  1026  1054  1064  1079  1096 #>  [4,]  1019  1035  1059  1066  1086  1096     0 #>  [5,]  1020  1040  1051  1066  1096     0     0 #>  [6,]   893   946   986   988  1073  1083  1096 #>  [7,]  1005  1022  1062  1065  1081  1088  1096 #>  [8,]   889   898   914   955   986  1012  1096 #>  [9,]  1035  1063  1077  1091  1095  1096     0 #> [10,]  1023  1056  1064  1075  1086  1093  1096 #> [11,]  1023  1030  1036  1037  1050  1082  1096 #> [12,]   932   939   959  1036  1046  1052  1096 #> [13,]  1009  1013  1040  1059  1069  1078  1096 #> [14,]  1004  1009  1047  1055  1058  1083  1096 #> [15,]   966  1007  1054  1056  1093  1096     0 #> [16,]   918   940   953   978  1020  1095  1096 #> [17,]  1005  1006  1024  1026  1090  1094  1096 #> [18,]   954  1012  1029  1054  1068  1082  1096 #> [19,]   921  1012  1039  1050  1070  1094  1096 #> [20,]   932   970   986  1035  1074  1087  1096 #> [21,]  1010  1043  1049  1058  1064  1086  1096 #> [22,]   936  1033  1036  1048  1049  1057  1096 #> [23,]   944   974   980   992  1020  1049  1096 #> [24,]  1009  1025  1030  1042  1051  1081  1096 #> [25,]  1012  1020  1043  1048  1075  1080  1096 #> [26,]  1003  1017  1030  1044  1054  1058  1096 #> [27,]  1017  1025  1033  1041  1066  1085  1096 #> [28,]   961  1008  1013  1021  1033  1070  1096 #> [29,]   893   915  1007  1049  1064  1072  1096 #> [30,]  1027  1030  1031  1040  1043  1090  1096 #> [31,]  1058  1068  1096     0     0     0     0 #> [32,]   957  1002  1016  1024  1044  1060  1096 #> [33,]   950   985  1035  1050  1086  1090  1096 #> [34,]  1018  1039  1062  1096     0     0     0 #> [35,]   986  1033  1039  1074  1079  1087  1096 #> [36,]  1012  1057  1069  1076  1083  1084  1096 #> [37,]   969   997  1001  1022  1050  1069  1096 #> [38,]   935   978   993  1013  1053  1079  1096 #> [39,]   951   961   973   978  1027  1029  1096 #> [40,]  1090  1094  1096     0     0     0     0 #> [41,]  1004  1020  1047  1048  1068  1078  1096 #> [42,]   987  1032  1058  1072  1076  1096     0 #> [43,]   867   945   985  1016  1082  1094  1096 #> [44,]  1024  1025  1038  1068  1070  1091  1096 #> [45,]   892   894   953   968  1000  1019  1096 #> [46,]   967   971   998  1019  1022  1089  1096 #> [47,]  1096     0     0     0     0     0     0 #> [48,]   951   973   978   988  1001  1030  1096 #> [49,]  1042  1068  1069  1073  1090  1096     0 #> [50,]   998  1036  1048  1060  1081  1090  1096  chromo <- c(4, 1, 557, 877 , 905, 986, 1096, 0, 0, 0) chromo2tau(chromo) #> [1] 557 877 905 986"},{"path":"https://beanumber.github.io/tidychangepoint/reference/exceedances.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute exceedances of a threshold for a time series — exceedances","title":"Compute exceedances of a threshold for a time series — exceedances","text":"Compute exceedances threshold time series","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/exceedances.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute exceedances of a threshold for a time series — exceedances","text":"","code":"exceedances(x, ...)  # Default S3 method exceedances(x, ...)  # S3 method for class 'nhpp' exceedances(x, ...)  # S3 method for class 'ts' exceedances(x, ...)  # S3 method for class 'double' exceedances(x, threshold = mean(x, na.rm = TRUE), ...)"},{"path":"https://beanumber.github.io/tidychangepoint/reference/exceedances.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute exceedances of a threshold for a time series — exceedances","text":"x numeric vector coercible stats::ts object ... arguments passed methods threshold value exceed. Default mean()","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/exceedances.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute exceedances of a threshold for a time series — exceedances","text":"ordered integer vector giving indices values x exceed threshold.","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/exceedances.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute exceedances of a threshold for a time series — exceedances","text":"","code":"# Retrieve exceedances of the series mean fit_nhpp(DataCPSim, tau = 826) |>    exceedances() #>   [1]   20   51   60  221  226  233  271  308  354  415  488  548  553  556  557 #>  [16]  561  562  566  571  575  581  583  589  590  596  598  604  605  609  613 #>  [31]  614  615  618  619  621  623  628  629  633  634  642  645  646  647  649 #>  [46]  654  655  656  657  659  663  666  668  671  672  677  678  680  681  687 #>  [61]  688  694  697  698  704  705  706  708  711  713  716  717  719  722  725 #>  [76]  727  728  729  733  738  741  746  748  749  753  755  761  763  765  768 #>  [91]  771  774  777  780  784  785  790  791  792  794  798  803  809  810  813 #> [106]  817  822  823  824  825  826  828  830  831  832  833  834  836  837  838 #> [121]  839  840  841  842  843  844  845  846  848  849  850  851  852  853  854 #> [136]  856  857  858  859  860  861  862  863  864  865  866  867  868  870  871 #> [151]  872  875  876  877  878  879  880  881  882  883  884  885  886  887  888 #> [166]  889  890  891  892  893  894  895  896  897  898  899  900  901  903  904 #> [181]  905  907  908  910  911  912  914  915  916  918  919  920  921  923  924 #> [196]  926  928  929  930  931  932  933  934  935  936  937  938  939  940  941 #> [211]  943  944  945  946  947  948  949  950  951  953  954  955  957  959  960 #> [226]  961  962  963  964  966  967  968  969  970  971  972  973  974  975  976 #> [241]  977  978  979  980  981  982  983  984  985  986  987  988  989  990  991 #> [256]  992  993  994  995  996  997  998  999 1000 1001 1002 1003 1004 1005 1006 #> [271] 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 #> [286] 1022 1023 1024 1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 #> [301] 1037 1038 1039 1040 1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 #> [316] 1052 1053 1054 1055 1056 1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 #> [331] 1067 1068 1069 1070 1071 1072 1073 1074 1075 1076 1077 1078 1079 1080 1081 #> [346] 1082 1083 1084 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096  # Retrieve exceedances of a supplied threshold fit_nhpp(DataCPSim, tau = 826, threshold = 200) |>    exceedances() #>  [1]  953  973  982  988  998  999 1003 1007 1018 1032 1033 1039 1041 1049 1055 #> [16] 1058 1064 1066 1070 1087 1089"},{"path":"https://beanumber.github.io/tidychangepoint/reference/file_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Obtain a descriptive filename for a tidycpt object — file_name","title":"Obtain a descriptive filename for a tidycpt object — file_name","text":"Obtain descriptive filename tidycpt object","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/file_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Obtain a descriptive filename for a tidycpt object — file_name","text":"","code":"file_name(x, data_name_slug = \"data\")"},{"path":"https://beanumber.github.io/tidychangepoint/reference/file_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Obtain a descriptive filename for a tidycpt object — file_name","text":"x tidycpt object data_name_slug character string identify data set used file name","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/file_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Obtain a descriptive filename for a tidycpt object — file_name","text":"character string giving unique file name.","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/file_name.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Obtain a descriptive filename for a tidycpt object — file_name","text":"file_name() generates random, unique string indicating algorithm fitness() tidycpt object.","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/file_name.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Obtain a descriptive filename for a tidycpt object — file_name","text":"","code":"# Generate a unique name for the file DataCPSim |>   segment(method = \"pelt\") |>   file_name() #> [1] \"data_PELT_9403_b42849422cbfd7c23a6ffe77d48389f8.rda\""},{"path":"https://beanumber.github.io/tidychangepoint/reference/fit_arima.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit an ARIMA model — fit_arima","title":"Fit an ARIMA model — fit_arima","text":"Fit ARIMA model","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/fit_arima.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit an ARIMA model — fit_arima","text":"","code":"fit_arima(x, tau, ...)"},{"path":"https://beanumber.github.io/tidychangepoint/reference/fit_arima.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit an ARIMA model — fit_arima","text":"x time series tau set indices representing changepoint set ... currently ignored","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/fit_arima.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit an ARIMA model — fit_arima","text":"mod_cpt object.","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/fit_arima.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fit an ARIMA model — fit_arima","text":"Fits ARIMA model using stats::arima().","code":""},{"path":[]},{"path":"https://beanumber.github.io/tidychangepoint/reference/fit_arima.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit an ARIMA model — fit_arima","text":"","code":"# Fit a mean-variance model fit_arima(CET, tau = c(42, 330)) #> ℹ Model: A arima  model with 3 region(s). #> → Each region has 2 parameter(s). #> → The model has 0 global parameter(s)."},{"path":"https://beanumber.github.io/tidychangepoint/reference/fit_lmshift.html","id":null,"dir":"Reference","previous_headings":"","what":"Regression-based model fitting — fit_lmshift","title":"Regression-based model fitting — fit_lmshift","text":"Regression-based model fitting","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/fit_lmshift.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Regression-based model fitting — fit_lmshift","text":"","code":"fit_lmshift(x, tau, deg_poly = 0, ...)  fit_lmshift_ar1(x, tau, ...)  fit_trendshift(x, tau, ...)  fit_trendshift_ar1(x, tau, ...)"},{"path":"https://beanumber.github.io/tidychangepoint/reference/fit_lmshift.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Regression-based model fitting — fit_lmshift","text":"x time series tau set indices representing changepoint set deg_poly integer indicating degree polynomial spline fit. Passed stats::poly(). ... arguments passed stats::lm()","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/fit_lmshift.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Regression-based model fitting — fit_lmshift","text":"mod_cpt object","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/fit_lmshift.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Regression-based model fitting — fit_lmshift","text":"model-fitting functions use stats::lm() fit corresponding regression model time series, using changepoints specified tau argument. changepoint treated categorical fixed-effect, deg_poly argument controls degree polynomial interacts fixed-effects. example, setting deg_poly equal 0 return model calling fit_meanshift_norm(), latter faster larger changepoint sets fit regression models. Setting deg_poly equal 1 fits trendshift model. fit_lmshift_ar1(): apply auto-regressive lag 1 errors fit_trendshift(): fit line region fit_trendshift_ar1(): fit line region autoregress lag 1 errors","code":""},{"path":[]},{"path":"https://beanumber.github.io/tidychangepoint/reference/fit_lmshift.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Regression-based model fitting — fit_lmshift","text":"","code":"# Manually specify a changepoint set tau <- c(365, 826)  # Fit the model mod <- fit_lmshift(DataCPSim, tau)  # Retrieve model parameters logLik(mod) #> 'log Lik.' -5250.548 (df=6) deg_free(mod) #> [1] 6  # Manually specify a changepoint set cpts <- c(1700, 1739, 1988) ids <- time2tau(cpts, as_year(time(CET)))  # Fit the model mod <- fit_lmshift(CET, tau = ids)  # View model parameters glance(mod) #> # A tibble: 1 × 11 #>   pkg     version algorithm params num_cpts  rmse logLik   AIC   BIC  MBIC   MDL #>   <chr>   <pckg_> <chr>     <list>    <int> <dbl>  <dbl> <dbl> <dbl> <dbl> <dbl> #> 1 tidych… 1.0.2   meanshift <dbl>         3 0.576  -317.  651.  682.  681.  692. glance(fit_lmshift(CET, tau = ids, deg_poly = 1)) #> # A tibble: 1 × 11 #>   pkg     version algorithm params num_cpts  rmse logLik   AIC   BIC  MBIC   MDL #>   <chr>   <pckg_> <chr>     <list>    <int> <dbl>  <dbl> <dbl> <dbl> <dbl> <dbl> #> 1 tidych… 1.0.2   trendshi… <dbl>         3 0.538  -292.  608.  655.  630.  658. glance(fit_lmshift_ar1(CET, tau = ids)) #> # A tibble: 1 × 11 #>   pkg     version algorithm params num_cpts  rmse logLik   AIC   BIC  MBIC   MDL #>   <chr>   <pckg_> <chr>     <list>    <int> <dbl>  <dbl> <dbl> <dbl> <dbl> <dbl> #> 1 tidych… 1.0.2   meanshif… <dbl>         3 0.567  -311.  640.  675.  668.  684. glance(fit_lmshift_ar1(CET, tau = ids, deg_poly = 1)) #> # A tibble: 1 × 11 #>   pkg     version algorithm params num_cpts  rmse logLik   AIC   BIC  MBIC   MDL #>   <chr>   <pckg_> <chr>     <list>    <int> <dbl>  <dbl> <dbl> <dbl> <dbl> <dbl> #> 1 tidych… 1.0.2   trendshi… <dbl>         3 0.537  -291.  608.  658.  628.  661. glance(fit_lmshift_ar1(CET, tau = ids, deg_poly = 2)) #> # A tibble: 1 × 11 #>   pkg     version algorithm params num_cpts  rmse logLik   AIC   BIC  MBIC   MDL #>   <chr>   <pckg_> <chr>     <list>    <int> <dbl>  <dbl> <dbl> <dbl> <dbl> <dbl> #> 1 tidych… 1.0.2   splinesh… <dbl>         3 0.535  -290.  613.  680.  625.  675.  # Empty changepoint sets are allowed fit_lmshift(CET, tau = NULL) #> ℹ Model: A null  model with 1 region(s). #> → Each region has 1 parameter(s). #> → The model has 1 global parameter(s).  # Duplicate changepoints are removed fit_lmshift(CET, tau = c(42, 42)) #> ℹ Model: A meanshift  model with 2 region(s). #> → Each region has 1 parameter(s). #> → The model has 1 global parameter(s)."},{"path":"https://beanumber.github.io/tidychangepoint/reference/fit_meanshift.html","id":null,"dir":"Reference","previous_headings":"","what":"Fast implementation of meanshift model — fit_meanshift","title":"Fast implementation of meanshift model — fit_meanshift","text":"Fast implementation meanshift model","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/fit_meanshift.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fast implementation of meanshift model — fit_meanshift","text":"","code":"fit_meanshift(x, tau, distribution = \"norm\", ...)  fit_meanshift_norm(x, tau, ...)  fit_meanshift_lnorm(x, tau, ...)  fit_meanshift_norm_ar1(x, tau, ...)"},{"path":"https://beanumber.github.io/tidychangepoint/reference/fit_meanshift.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fast implementation of meanshift model — fit_meanshift","text":"x time series tau set indices representing changepoint set distribution character indicating distribution data. match R distribution function naming conventions (e.g., \"norm\" Normal distribution, etc.) ... arguments passed stats::lm()","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/fit_meanshift.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fast implementation of meanshift model — fit_meanshift","text":"mod_cpt object.","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/fit_meanshift.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fast implementation of meanshift model — fit_meanshift","text":"fit_meanshift_norm() returns model fit_lmshift() deg_poly argument set 0. However, faster large changepoint sets. fit_meanshift_lnorm() fit meanshift model assumption log-normally distributed data. fit_meanshift_norm_ar1() applies autoregressive errors.","code":""},{"path":[]},{"path":"https://beanumber.github.io/tidychangepoint/reference/fit_meanshift.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Fast implementation of meanshift model — fit_meanshift","text":"Xueheng Shi, Ben Baumer","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/fit_meanshift.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fast implementation of meanshift model — fit_meanshift","text":"","code":"# Manually specify a changepoint set tau <- c(365, 826)  # Fit the model mod <- fit_meanshift_norm_ar1(DataCPSim, tau)  # View model parameters logLik(mod) #> 'log Lik.' -5195.452 (df=7) deg_free(mod) #> [1] 7  # Manually specify a changepoint set cpts <- c(1700, 1739, 1988) ids <- time2tau(cpts, as_year(time(CET)))  # Fit the model mod <- fit_meanshift_norm(CET, tau = ids)  # Review model parameters glance(mod) #> # A tibble: 1 × 11 #>   pkg     version algorithm params num_cpts  rmse logLik   AIC   BIC  MBIC   MDL #>   <chr>   <pckg_> <chr>     <list>    <int> <dbl>  <dbl> <dbl> <dbl> <dbl> <dbl> #> 1 tidych… 1.0.2   meanshif… <dbl>         3 0.576  -317.  651.  682.  681.  692.  # Fit an autoregressive model mod <- fit_meanshift_norm_ar1(CET, tau = ids)  # Review model parameters glance(mod) #> # A tibble: 1 × 11 #>   pkg     version algorithm params num_cpts  rmse logLik   AIC   BIC  MBIC   MDL #>   <chr>   <pckg_> <chr>     <list>    <int> <dbl>  <dbl> <dbl> <dbl> <dbl> <dbl> #> 1 tidych… 1.0.2   meanshif… <dbl>         3 0.567  -311.  640.  675.  668.  684."},{"path":"https://beanumber.github.io/tidychangepoint/reference/fit_meanvar.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit a model for mean and variance — fit_meanvar","title":"Fit a model for mean and variance — fit_meanvar","text":"Fit model mean variance","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/fit_meanvar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit a model for mean and variance — fit_meanvar","text":"","code":"fit_meanvar(x, tau, ...)"},{"path":"https://beanumber.github.io/tidychangepoint/reference/fit_meanvar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit a model for mean and variance — fit_meanvar","text":"x time series tau set indices representing changepoint set ... currently ignored","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/fit_meanvar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit a model for mean and variance — fit_meanvar","text":"mod_cpt object.","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/fit_meanvar.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fit a model for mean and variance — fit_meanvar","text":"mean-variance model, means variances allowed vary across regions. Thus, model fits separate \\(\\mu_j\\) \\(\\sigma_j\\) region \\(j\\).","code":""},{"path":[]},{"path":"https://beanumber.github.io/tidychangepoint/reference/fit_meanvar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit a model for mean and variance — fit_meanvar","text":"","code":"# Fit a mean-variance model fit_meanvar(CET, tau = c(42, 330)) #> ℹ Model: A meanvar  model with 3 region(s). #> → Each region has 2 parameter(s). #> → The model has 0 global parameter(s)."},{"path":"https://beanumber.github.io/tidychangepoint/reference/fit_nhpp.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit a non-homogeneous Poisson process model to the exceedances of a time series. — fit_nhpp","title":"Fit a non-homogeneous Poisson process model to the exceedances of a time series. — fit_nhpp","text":"Fit non-homogeneous Poisson process model exceedances time series.","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/fit_nhpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit a non-homogeneous Poisson process model to the exceedances of a time series. — fit_nhpp","text":"","code":"fit_nhpp(x, tau, ...)"},{"path":"https://beanumber.github.io/tidychangepoint/reference/fit_nhpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit a non-homogeneous Poisson process model to the exceedances of a time series. — fit_nhpp","text":"x time series tau vector changepoints ... currently ignored","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/fit_nhpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit a non-homogeneous Poisson process model to the exceedances of a time series. — fit_nhpp","text":"nhpp object, inherits mod_cpt.","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/fit_nhpp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fit a non-homogeneous Poisson process model to the exceedances of a time series. — fit_nhpp","text":"time series can modeled non-homogeneous Poisson process locations exceedances threshold series. function uses BMDL criteria determine best fit parameters region defined changepoint set tau.","code":""},{"path":[]},{"path":"https://beanumber.github.io/tidychangepoint/reference/fit_nhpp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit a non-homogeneous Poisson process model to the exceedances of a time series. — fit_nhpp","text":"","code":"# Fit an NHPP model using the mean as a threshold fit_nhpp(DataCPSim, tau = 826) #> ℹ Model: A nhpp  model with 2 region(s). #> → Each region has 2 parameter(s). #> → The model has 1 global parameter(s).  # Fit an NHPP model using other thresholds fit_nhpp(DataCPSim, tau = 826, threshold = 20) #> ℹ Model: A nhpp  model with 2 region(s). #> → Each region has 2 parameter(s). #> → The model has 1 global parameter(s). fit_nhpp(DataCPSim, tau = 826, threshold = 200) #> ℹ Model: A nhpp  model with 2 region(s). #> → Each region has 2 parameter(s). #> → The model has 1 global parameter(s).  # Fit an NHPP model using changepoints determined by PELT fit_nhpp(DataCPSim, tau = changepoints(segment(DataCPSim, method = \"pelt\"))) #> ℹ Model: A nhpp  model with 4 region(s). #> → Each region has 2 parameter(s). #> → The model has 1 global parameter(s)."},{"path":"https://beanumber.github.io/tidychangepoint/reference/fit_nhpp_region.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit an NHPP model to one specific region — fit_nhpp_region","title":"Fit an NHPP model to one specific region — fit_nhpp_region","text":"Fit NHPP model one specific region","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/fit_nhpp_region.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit an NHPP model to one specific region — fit_nhpp_region","text":"","code":"fit_nhpp_region(exc, tau_left, tau_right, params = parameters_weibull(), ...)"},{"path":"https://beanumber.github.io/tidychangepoint/reference/fit_nhpp_region.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit an NHPP model to one specific region — fit_nhpp_region","text":"exc Output exceedances() tau_left left-changepoint tau_right right-changepoint params Output parameters_weibull() ... arguments passed stats::optim()","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/fit_nhpp_region.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit an NHPP model to one specific region — fit_nhpp_region","text":"Modified output stats::optim().","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/fit_nhpp_region.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fit an NHPP model to one specific region — fit_nhpp_region","text":"internal function called users. Use fit_nhpp().","code":""},{"path":[]},{"path":"https://beanumber.github.io/tidychangepoint/reference/fitness.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve the optimal fitness (or objective function) value used by an algorithm — fitness","title":"Retrieve the optimal fitness (or objective function) value used by an algorithm — fitness","text":"Retrieve optimal fitness (objective function) value used algorithm","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/fitness.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve the optimal fitness (or objective function) value used by an algorithm — fitness","text":"","code":"fitness(object, ...)  # S3 method for class 'seg_basket' fitness(object, ...)  # S3 method for class 'seg_cpt' fitness(object, ...)  # S3 method for class 'tidycpt' fitness(object, ...)  # S3 method for class 'ga' fitness(object, ...)  # S3 method for class 'cpt' fitness(object, ...)  # S3 method for class 'cptga' fitness(object, ...)  # S3 method for class 'segmented' fitness(object, ...)  # S3 method for class 'wbs' fitness(object, ...)"},{"path":"https://beanumber.github.io/tidychangepoint/reference/fitness.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve the optimal fitness (or objective function) value used by an algorithm — fitness","text":"object segmenter object. ... currently ignored","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/fitness.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve the optimal fitness (or objective function) value used by an algorithm — fitness","text":"named double vector fitness value.","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/fitness.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve the optimal fitness (or objective function) value used by an algorithm — fitness","text":"Segmenting algorithms use fitness metric, typically use penalized objective function, determine changepoint sets less optimal. function returns value metric changepoint set implied object provided.","code":""},{"path":[]},{"path":"https://beanumber.github.io/tidychangepoint/reference/fitness.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve the optimal fitness (or objective function) value used by an algorithm — fitness","text":"","code":"# Segment a times series using a genetic algorithm x <- segment(DataCPSim, method = \"ga\", maxiter = 10)  # Retrieve its fitness value fitness(x) #>      BIC  #> 16494.18   # \\donttest{ # Segment a times series using a genetic algorithm x <- segment(DataCPSim, method = \"cptga\")  # Retrieve its fitness value fitness(x) #>      BIC  #> 6989.921  # } # Segment a time series using Segmented x <- segment(DataCPSim, method = \"segmented\")  # Retrieve its fitness fitness(x) #>      MDL  #> 10190.17   # Segment a time series using Wild Binary Segmentation x <- segment(DataCPSim, method = \"wbs\")  # Retrieve its fitness fitness(x) #>     MBIC  #> 4189.719"},{"path":"https://beanumber.github.io/tidychangepoint/reference/fun_cpt.html","id":null,"dir":"Reference","previous_headings":"","what":"Class for model-fitting functions — new_fun_cpt","title":"Class for model-fitting functions — new_fun_cpt","text":"Class model-fitting functions","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/fun_cpt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Class for model-fitting functions — new_fun_cpt","text":"","code":"new_fun_cpt(x, ...)  validate_fun_cpt(x)  fun_cpt(x, ...)"},{"path":"https://beanumber.github.io/tidychangepoint/reference/fun_cpt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class for model-fitting functions — new_fun_cpt","text":"x character giving name model-fitting function ... currently ignored","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/fun_cpt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Class for model-fitting functions — new_fun_cpt","text":"fun_cpt object.","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/fun_cpt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Class for model-fitting functions — new_fun_cpt","text":"model-fitting functions must registered call fun_cpt(). model-fitting functions must take least three arguments: x: time series, tau: set changepoint indices ...: arguments passed methods See fit_meanshift_norm(),","code":""},{"path":[]},{"path":"https://beanumber.github.io/tidychangepoint/reference/fun_cpt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class for model-fitting functions — new_fun_cpt","text":"","code":"# Register a model-fitting function f <- fun_cpt(\"fit_meanvar\")  # Verify that it now has class `fun_cpt` str(f) #> function (x, tau, ...)   #>  - attr(*, \"model_name\")= chr \"meanvar\" #>  - attr(*, \"class\")= chr \"fun_cpt\"  # Use it f(CET, 42) #> ℹ Model: A meanvar  model with 2 region(s). #> → Each region has 2 parameter(s). #> → The model has 0 global parameter(s)."},{"path":"https://beanumber.github.io/tidychangepoint/reference/italy_grads.html","id":null,"dir":"Reference","previous_headings":"","what":"Italian University graduates by disciplinary groups from 1926-2013 — italy_grads","title":"Italian University graduates by disciplinary groups from 1926-2013 — italy_grads","text":"Italian University graduates disciplinary groups years 1926-2013.","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/italy_grads.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Italian University graduates by disciplinary groups from 1926-2013 — italy_grads","text":"","code":"italy_grads"},{"path":"https://beanumber.github.io/tidychangepoint/reference/italy_grads.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Italian University graduates by disciplinary groups from 1926-2013 — italy_grads","text":"object class tbl_ts (inherits tbl_df, tbl, data.frame) 88 rows 17 columns.","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/italy_grads.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Italian University graduates by disciplinary groups from 1926-2013 — italy_grads","text":"https://seriestoriche.istat./ Source: Istat- Ministero dell'istruzione pubblica, years 1926-1942 Istat- Rilevazione sulle Università, years 1943-1997 Miur- Rilevazione sulle Università, years 1998-2013","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/iweibull.html","id":null,"dir":"Reference","previous_headings":"","what":"Weibull distribution functions — iweibull","title":"Weibull distribution functions — iweibull","text":"Weibull distribution functions","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/iweibull.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Weibull distribution functions — iweibull","text":"","code":"iweibull(x, shape, scale = 1)  mweibull(x, shape, scale = 1)  parameters_weibull(...)"},{"path":"https://beanumber.github.io/tidychangepoint/reference/iweibull.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Weibull distribution functions — iweibull","text":"x numeric vector shape Shape parameter Weibull distribution. See stats::dweibull(). scale Scale parameter Weibull distribution. See stats::dweibull(). ... currently ignored","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/iweibull.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Weibull distribution functions — iweibull","text":"numeric vector","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/iweibull.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Weibull distribution functions — iweibull","text":"Intensity function Weibull distribution. $$    iweibull(x) = \\left( \\frac{shape}{scale} \\right) \\cdot                  \\left( \\frac{x}{scale} \\right)^{shape - 1}  $$ Mean intensity function Weibull distribution. $$    mweibull(x) = \\left( \\frac{x}{scale} \\right)^{shape}  $$ parameters_weibull() returns list() two components: shape scale, list() distribution parameters. parameters used define prior distributions hyperparameters.","code":""},{"path":[]},{"path":"https://beanumber.github.io/tidychangepoint/reference/iweibull.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Weibull distribution functions — iweibull","text":"","code":"# Compute the intensities and plot them iweibull(1, shape = 1, scale = 1) #> [1] 1 plot(x = 1:10, y = iweibull(1:10, shape = 2, scale = 2))   # Compute various values of the distribution mweibull(1, shape = 1, scale = 1) #> [1] 1 plot(x = 1:10, y = mweibull(1:10, shape = 1, scale = 1))  plot(x = 1:10, y = mweibull(1:10, shape = 1, scale = 2))  plot(x = 1:10, y = mweibull(1:10, shape = 0.5, scale = 2))  plot(x = 1:10, y = mweibull(1:10, shape = 0.5, scale = 100))  plot(x = 1:10, y = mweibull(1:10, shape = 2, scale = 2))  plot(x = 1:10, y = mweibull(1:10, shape = 2, scale = 100))   # Generate prior distribution hyperparameters parameters_weibull() #> $shape #> $shape$dist #> [1] \"gamma\" #>  #> $shape$shape #> [1] 1 #>  #> $shape$rate #> [1] 2 #>  #> $shape$initial_value #> [1] 0.1 #>  #> $shape$lower_bound #> [1] 1e-04 #>  #> $shape$upper_bound #> [1] 10 #>  #>  #> $scale #> $scale$dist #> [1] \"gamma\" #>  #> $scale$shape #> [1] 3 #>  #> $scale$rate #> [1] 1.2 #>  #> $scale$initial_value #> [1] 0.5 #>  #> $scale$lower_bound #> [1] 1e-08 #>  #> $scale$upper_bound #> [1] 1e+05 #>  #>"},{"path":"https://beanumber.github.io/tidychangepoint/reference/log_likelihood_region_weibull.html","id":null,"dir":"Reference","previous_headings":"","what":"Log-Likelihood functions for regions (Weibull) — log_likelihood_region_weibull","title":"Log-Likelihood functions for regions (Weibull) — log_likelihood_region_weibull","text":"Log-Likelihood functions regions (Weibull)","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/log_likelihood_region_weibull.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Log-Likelihood functions for regions (Weibull) — log_likelihood_region_weibull","text":"","code":"log_likelihood_region_weibull(t, tau_left, tau_right, theta)  log_prior_region_weibull(theta, params = parameters_weibull())  D_log_prior_region_weibull(theta, params = parameters_weibull())  D_log_likelihood_region_weibull(t, tau_left, tau_right, theta)"},{"path":"https://beanumber.github.io/tidychangepoint/reference/log_likelihood_region_weibull.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Log-Likelihood functions for regions (Weibull) — log_likelihood_region_weibull","text":"t vector exceedances() tau_left Left endpoint region tau_right Right endpoint region theta numeric vector parameters NHPP model params Possibly modified output parameters_weibull()","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/log_likelihood_region_weibull.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Log-Likelihood functions for regions (Weibull) — log_likelihood_region_weibull","text":"numeric vector","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/ls_pkgs.html","id":null,"dir":"Reference","previous_headings":"","what":"Algorithmic coverage through tidychangepoint — ls_models","title":"Algorithmic coverage through tidychangepoint — ls_models","text":"Algorithmic coverage tidychangepoint","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/ls_pkgs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Algorithmic coverage through tidychangepoint — ls_models","text":"","code":"ls_models()  ls_pkgs()  ls_methods()  ls_penalties()  ls_cpt_penalties()  ls_coverage()"},{"path":"https://beanumber.github.io/tidychangepoint/reference/ls_pkgs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Algorithmic coverage through tidychangepoint — ls_models","text":"tibble::tibble character","code":""},{"path":[]},{"path":"https://beanumber.github.io/tidychangepoint/reference/ls_pkgs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Algorithmic coverage through tidychangepoint — ls_models","text":"","code":"# List all model-fitting functions ls_models() #>  [1] \"fit_arima\"              \"fit_lmshift\"            \"fit_lmshift_ar1\"        #>  [4] \"fit_meanshift_lnorm\"    \"fit_meanshift_norm\"     \"fit_meanshift_norm_ar1\" #>  [7] \"fit_meanvar\"            \"fit_nhpp\"               \"fit_trendshift\"         #> [10] \"fit_trendshift_ar1\"      # List packages supported by tidychangepoint ls_pkgs() #> # A tibble: 4 × 2 #>   pkg             version #>   <chr>           <chr>   #> 1 tidychangepoint 1.0.2   #> 2 changepoint     2.3     #> 3 wbs             1.4.1   #> 4 GA              3.2.4    # List methods supported by segment() ls_methods() #> # A tibble: 14 × 5 #>    method      pkg             segmenter_class helper              wraps         #>    <chr>       <chr>           <chr>           <chr>               <chr>         #>  1 pelt        changepoint     cpt             segment_pelt()      changepoint:… #>  2 binseg      changepoint     cpt             NA                  changepoint:… #>  3 segneigh    changepoint     cpt             NA                  changepoint:… #>  4 single-best changepoint     cpt             NA                  changepoint:… #>  5 wbs         wbs             wbs             NA                  wbs::wbs()    #>  6 ga          GA              tidyga          segment_ga()        GA::ga()      #>  7 ga-shi      GA              tidyga          segment_ga_shi()    segment_ga()  #>  8 ga-coen     GA              tidyga          segment_ga_coen()   segment_ga()  #>  9 coen        tidychangepoint seg_basket      segment_coen()      NA            #> 10 random      GA              tidyga          segment_ga_random() segment_ga()  #> 11 manual      tidychangepoint seg_cpt         segment_manual()    NA            #> 12 null        tidychangepoint seg_cpt         segment_manual()    NA            #> 13 segmented   segmented       segmented       NA                  segmented::s… #> 14 cptga       changepointGA   tidycptga       segment_cptga()     changepointG…  # List penalty functions provided by tidychangepoint ls_penalties() #> [1] \"SIC\"  \"AIC\"  \"BIC\"  \"HQC\"  \"MBIC\" \"MDL\"  \"BMDL\"  # List penalty functions supported by changepoint ls_cpt_penalties() #> [1] \"None\"       \"SIC\"        \"BIC\"        \"MBIC\"       \"AIC\"        #> [6] \"HQC\"        \"Asymptotic\" \"Manual\"     \"CROPS\"       # List combinations of method, model, and penalty supported by tidychangepoint ls_coverage() #>          method                  model    penalty #> 1          pelt     fit_meanshift_norm       None #> 2          pelt            fit_meanvar       None #> 3          pelt     fit_meanshift_norm        SIC #> 4          pelt            fit_meanvar        SIC #> 5          pelt     fit_meanshift_norm        BIC #> 6          pelt            fit_meanvar        BIC #> 7          pelt     fit_meanshift_norm       MBIC #> 8          pelt            fit_meanvar       MBIC #> 9          pelt     fit_meanshift_norm        AIC #> 10         pelt            fit_meanvar        AIC #> 11         pelt     fit_meanshift_norm        HQC #> 12         pelt            fit_meanvar        HQC #> 13         pelt     fit_meanshift_norm Asymptotic #> 14         pelt            fit_meanvar Asymptotic #> 15         pelt     fit_meanshift_norm     Manual #> 16         pelt            fit_meanvar     Manual #> 17         pelt     fit_meanshift_norm      CROPS #> 18         pelt            fit_meanvar      CROPS #> 19       binseg            fit_meanvar       None #> 20     segneigh            fit_meanvar       None #> 21  single-best            fit_meanvar       None #> 22       binseg            fit_meanvar        SIC #> 23     segneigh            fit_meanvar        SIC #> 24  single-best            fit_meanvar        SIC #> 25       binseg            fit_meanvar        BIC #> 26     segneigh            fit_meanvar        BIC #> 27  single-best            fit_meanvar        BIC #> 28       binseg            fit_meanvar       MBIC #> 29     segneigh            fit_meanvar       MBIC #> 30  single-best            fit_meanvar       MBIC #> 31       binseg            fit_meanvar        AIC #> 32     segneigh            fit_meanvar        AIC #> 33  single-best            fit_meanvar        AIC #> 34       binseg            fit_meanvar        HQC #> 35     segneigh            fit_meanvar        HQC #> 36  single-best            fit_meanvar        HQC #> 37       binseg            fit_meanvar Asymptotic #> 38     segneigh            fit_meanvar Asymptotic #> 39  single-best            fit_meanvar Asymptotic #> 40       binseg            fit_meanvar     Manual #> 41     segneigh            fit_meanvar     Manual #> 42  single-best            fit_meanvar     Manual #> 43       binseg            fit_meanvar      CROPS #> 44     segneigh            fit_meanvar      CROPS #> 45  single-best            fit_meanvar      CROPS #> 46           ga              fit_arima        SIC #> 47       random              fit_arima        SIC #> 48           ga            fit_lmshift        SIC #> 49       random            fit_lmshift        SIC #> 50           ga        fit_lmshift_ar1        SIC #> 51       random        fit_lmshift_ar1        SIC #> 52           ga    fit_meanshift_lnorm        SIC #> 53       random    fit_meanshift_lnorm        SIC #> 54           ga     fit_meanshift_norm        SIC #> 55       random     fit_meanshift_norm        SIC #> 56           ga fit_meanshift_norm_ar1        SIC #> 57       random fit_meanshift_norm_ar1        SIC #> 58           ga            fit_meanvar        SIC #> 59       random            fit_meanvar        SIC #> 60           ga               fit_nhpp        SIC #> 61       random               fit_nhpp        SIC #> 62           ga         fit_trendshift        SIC #> 63       random         fit_trendshift        SIC #> 64           ga     fit_trendshift_ar1        SIC #> 65       random     fit_trendshift_ar1        SIC #> 66           ga              fit_arima        AIC #> 67       random              fit_arima        AIC #> 68           ga            fit_lmshift        AIC #> 69       random            fit_lmshift        AIC #> 70           ga        fit_lmshift_ar1        AIC #> 71       random        fit_lmshift_ar1        AIC #> 72           ga    fit_meanshift_lnorm        AIC #> 73       random    fit_meanshift_lnorm        AIC #> 74           ga     fit_meanshift_norm        AIC #> 75       random     fit_meanshift_norm        AIC #> 76           ga fit_meanshift_norm_ar1        AIC #> 77       random fit_meanshift_norm_ar1        AIC #> 78           ga            fit_meanvar        AIC #> 79       random            fit_meanvar        AIC #> 80           ga               fit_nhpp        AIC #> 81       random               fit_nhpp        AIC #> 82           ga         fit_trendshift        AIC #> 83       random         fit_trendshift        AIC #> 84           ga     fit_trendshift_ar1        AIC #> 85       random     fit_trendshift_ar1        AIC #> 86           ga              fit_arima        BIC #> 87       random              fit_arima        BIC #> 88           ga            fit_lmshift        BIC #> 89       random            fit_lmshift        BIC #> 90           ga        fit_lmshift_ar1        BIC #> 91       random        fit_lmshift_ar1        BIC #> 92           ga    fit_meanshift_lnorm        BIC #> 93       random    fit_meanshift_lnorm        BIC #> 94           ga     fit_meanshift_norm        BIC #> 95       random     fit_meanshift_norm        BIC #> 96           ga fit_meanshift_norm_ar1        BIC #> 97       random fit_meanshift_norm_ar1        BIC #> 98           ga            fit_meanvar        BIC #> 99       random            fit_meanvar        BIC #> 100          ga               fit_nhpp        BIC #> 101      random               fit_nhpp        BIC #> 102          ga         fit_trendshift        BIC #> 103      random         fit_trendshift        BIC #> 104          ga     fit_trendshift_ar1        BIC #> 105      random     fit_trendshift_ar1        BIC #> 106          ga              fit_arima        HQC #> 107      random              fit_arima        HQC #> 108          ga            fit_lmshift        HQC #> 109      random            fit_lmshift        HQC #> 110          ga        fit_lmshift_ar1        HQC #> 111      random        fit_lmshift_ar1        HQC #> 112          ga    fit_meanshift_lnorm        HQC #> 113      random    fit_meanshift_lnorm        HQC #> 114          ga     fit_meanshift_norm        HQC #> 115      random     fit_meanshift_norm        HQC #> 116          ga fit_meanshift_norm_ar1        HQC #> 117      random fit_meanshift_norm_ar1        HQC #> 118          ga            fit_meanvar        HQC #> 119      random            fit_meanvar        HQC #> 120          ga               fit_nhpp        HQC #> 121      random               fit_nhpp        HQC #> 122          ga         fit_trendshift        HQC #> 123      random         fit_trendshift        HQC #> 124          ga     fit_trendshift_ar1        HQC #> 125      random     fit_trendshift_ar1        HQC #> 126          ga              fit_arima       MBIC #> 127      random              fit_arima       MBIC #> 128          ga            fit_lmshift       MBIC #> 129      random            fit_lmshift       MBIC #> 130          ga        fit_lmshift_ar1       MBIC #> 131      random        fit_lmshift_ar1       MBIC #> 132          ga    fit_meanshift_lnorm       MBIC #> 133      random    fit_meanshift_lnorm       MBIC #> 134          ga     fit_meanshift_norm       MBIC #> 135      random     fit_meanshift_norm       MBIC #> 136          ga fit_meanshift_norm_ar1       MBIC #> 137      random fit_meanshift_norm_ar1       MBIC #> 138          ga            fit_meanvar       MBIC #> 139      random            fit_meanvar       MBIC #> 140          ga               fit_nhpp       MBIC #> 141      random               fit_nhpp       MBIC #> 142          ga         fit_trendshift       MBIC #> 143      random         fit_trendshift       MBIC #> 144          ga     fit_trendshift_ar1       MBIC #> 145      random     fit_trendshift_ar1       MBIC #> 146          ga              fit_arima        MDL #> 147      random              fit_arima        MDL #> 148          ga            fit_lmshift        MDL #> 149      random            fit_lmshift        MDL #> 150          ga        fit_lmshift_ar1        MDL #> 151      random        fit_lmshift_ar1        MDL #> 152          ga    fit_meanshift_lnorm        MDL #> 153      random    fit_meanshift_lnorm        MDL #> 154          ga     fit_meanshift_norm        MDL #> 155      random     fit_meanshift_norm        MDL #> 156          ga fit_meanshift_norm_ar1        MDL #> 157      random fit_meanshift_norm_ar1        MDL #> 158          ga            fit_meanvar        MDL #> 159      random            fit_meanvar        MDL #> 160          ga               fit_nhpp        MDL #> 161      random               fit_nhpp        MDL #> 162          ga         fit_trendshift        MDL #> 163      random         fit_trendshift        MDL #> 164          ga     fit_trendshift_ar1        MDL #> 165      random     fit_trendshift_ar1        MDL #> 166         wbs                   <NA>       <NA> #> 167       cptga                   <NA>       <NA> #> 168   segmented                   <NA>       <NA> #> 169      ga-shi fit_meanshift_norm_ar1        BIC #> 170     ga-coen               fit_nhpp       BMDL #> 171        coen               fit_nhpp       BMDL #> 172      manual     fit_meanshift_norm        BIC #> 173        null     fit_meanshift_norm        BIC"},{"path":"https://beanumber.github.io/tidychangepoint/reference/mcdf.html","id":null,"dir":"Reference","previous_headings":"","what":"Cumulative distribution of the exceedances of a time series — mcdf","title":"Cumulative distribution of the exceedances of a time series — mcdf","text":"Cumulative distribution exceedances time series","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/mcdf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cumulative distribution of the exceedances of a time series — mcdf","text":"","code":"mcdf(x, dist = \"weibull\")"},{"path":"https://beanumber.github.io/tidychangepoint/reference/mcdf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cumulative distribution of the exceedances of a time series — mcdf","text":"x NHPP model returned fit_nhpp() dist Name distribution. Currently weibull implemented.","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/mcdf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cumulative distribution of the exceedances of a time series — mcdf","text":"numeric vector length equal exceedances x","code":""},{"path":[]},{"path":"https://beanumber.github.io/tidychangepoint/reference/mcdf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cumulative distribution of the exceedances of a time series — mcdf","text":"","code":"# Fit an NHPP model using the mean as a threshold nhpp <- fit_nhpp(DataCPSim, tau = 826)  # Compute the cumulative exceedances of the mean mcdf(nhpp) #>   [1]   3.738619   9.053361  10.555888  36.180831  36.953736  38.034224 #>   [7]  43.869833  49.508440  56.467001  65.618787  76.474264  85.328884 #>  [13]  86.064271  86.505326  86.652316  87.240128  87.387044  87.974567 #>  [19]  88.708649  89.295659  90.175751  90.469004  91.348429  91.494952 #>  [25]  92.373800  92.666641  93.544840  93.691160  94.276305  94.861238 #>  [31]  95.007438  95.153625  95.592107  95.738242  96.030473  96.322651 #>  [37]  97.052871  97.198876  97.782770  97.928712  99.095789  99.533235 #>  [43]  99.679025  99.824803 100.116322 100.844902 100.990581 101.136248 #>  [49] 101.281903 101.573175 102.155574 102.592245 102.883299 103.319790 #>  [55] 103.465263 104.192449 104.337851 104.628618 104.773985 105.645935 #>  [61] 105.791219 106.662679 107.098253 107.243421 108.114190 108.259278 #>  [67] 108.404355 108.694475 109.129570 109.419577 109.854503 109.999456 #>  [73] 110.289329 110.724054 111.158680 111.448376 111.593207 111.738027 #>  [79] 112.317199 113.040918 113.475019 114.198306 114.487546 114.632150 #>  [85] 115.210459 115.499549 116.366569 116.655491 116.944372 117.377615 #>  [91] 117.810765 118.243821 118.676785 119.109657 119.686676 119.830905 #>  [97] 120.551900 120.696069 120.840228 121.128515 121.704969 122.425313 #> [103] 123.289399 123.433378 123.865259 124.440963 125.160375 125.304228 #> [109] 125.448072 125.591906 125.735730 127.643153 129.549553 130.502371 #> [115] 131.454934 132.407243 133.359299 135.262650 136.213946 137.164991 #> [121] 138.115783 139.066324 140.016613 140.966652 141.916441 142.865979 #> [127] 143.815268 144.764307 146.661639 147.609933 148.557978 149.505776 #> [133] 150.453327 151.400631 152.347688 154.241065 155.187386 156.133461 #> [139] 157.079291 158.024877 158.970219 159.915317 160.860172 161.804784 #> [145] 162.749153 163.693280 164.637165 165.580809 167.467372 168.410292 #> [151] 169.352973 172.179575 173.121297 174.062781 175.004027 175.945035 #> [157] 176.885805 177.826338 178.766633 179.706693 180.646516 181.586103 #> [163] 182.525454 183.464570 184.403451 185.342098 186.280510 187.218688 #> [169] 188.156632 189.094343 190.031821 190.969066 191.906079 192.842859 #> [175] 193.779408 194.715726 195.651812 196.587667 198.458687 199.393851 #> [181] 200.328786 202.197969 203.132217 205.000029 205.933593 206.866929 #> [187] 208.732921 209.665577 210.598007 212.462189 213.393942 214.325470 #> [193] 215.256773 217.118706 218.049337 219.909928 221.769628 222.699144 #> [199] 223.628438 224.557510 225.486361 226.414990 227.343399 228.271586 #> [205] 229.199554 230.127302 231.054829 231.982138 232.909227 233.836097 #> [211] 235.689182 236.615397 237.541395 238.467175 239.392737 240.318083 #> [217] 241.243213 242.168125 243.092822 244.941569 245.865619 246.789454 #> [223] 248.636480 250.482650 251.405415 252.327966 253.250304 254.172429 #> [229] 255.094341 256.937530 257.858807 258.779872 259.700726 260.621369 #> [235] 261.541802 262.462024 263.382036 264.301838 265.221430 266.140813 #> [241] 267.059988 267.978953 268.897709 269.816258 270.734598 271.652731 #> [247] 272.570656 273.488374 274.405885 275.323189 276.240286 277.157178 #> [253] 278.073863 278.990343 279.906617 280.822686 281.738550 282.654209 #> [259] 283.569664 284.484915 285.399962 286.314805 287.229444 288.143880 #> [265] 289.058114 289.972144 290.885973 291.799599 292.713023 293.626245 #> [271] 294.539266 295.452085 296.364704 297.277122 298.189339 299.101356 #> [277] 300.013173 300.924790 301.836208 302.747426 303.658446 304.569266 #> [283] 305.479888 306.390312 307.300537 308.210565 309.120395 310.030027 #> [289] 310.939463 311.848701 312.757743 313.666589 314.575238 315.483691 #> [295] 316.391948 317.300010 318.207877 319.115548 320.023025 320.930307 #> [301] 321.837394 322.744288 323.650988 324.557493 325.463806 326.369925 #> [307] 327.275851 328.181585 329.087126 329.992474 330.897631 331.802595 #> [313] 332.707368 333.611950 334.516340 335.420539 336.324548 337.228366 #> [319] 338.131993 339.035431 339.938678 340.841736 341.744605 342.647284 #> [325] 343.549774 344.452076 345.354189 346.256113 347.157850 348.059398 #> [331] 348.960759 349.861932 350.762918 351.663717 352.564329 353.464755 #> [337] 354.364994 355.265046 356.164913 357.064594 357.964090 358.863400 #> [343] 359.762524 360.661464 361.560220 362.458790 363.357176 364.255379 #> [349] 365.153397 366.051232 366.948883 367.846350 368.743635 369.640737 #> [355] 370.537656 371.434393 372.330947 373.227320 374.123510 375.019519  # Fit an NHPP model using another threshold nhpp <- fit_nhpp(DataCPSim, tau = 826, threshold = 200)  # Compute the cumulative exceedances of the threshold mcdf(nhpp) #>  [1] 12.13302 13.69434 14.39212 14.85568 15.62543 15.70221 16.00897 16.31517 #>  [9] 17.15437 18.21645 18.29206 18.74501 18.89572 19.49727 19.94704 20.17149 #> [17] 20.61952 20.76860 21.06638 22.32630 22.47393"},{"path":"https://beanumber.github.io/tidychangepoint/reference/mde_rain.html","id":null,"dir":"Reference","previous_headings":"","what":"Rainfall in Medellín, Colombia — mde_rain","title":"Rainfall in Medellín, Colombia — mde_rain","text":"Rainfall Medellín, Colombia","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/mde_rain.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rainfall in Medellín, Colombia — mde_rain","text":"","code":"mde_rain  mde_rain_monthly"},{"path":"https://beanumber.github.io/tidychangepoint/reference/mde_rain.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Rainfall in Medellín, Colombia — mde_rain","text":"object class spec_tbl_df (inherits tbl_df, tbl, data.frame) 185705 rows 8 columns. object class xts (inherits zoo) 444 rows 1 columns.","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/mde_rain.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Rainfall in Medellín, Colombia — mde_rain","text":"Daily rainfall measurements 13 different weather stations positioned around Medellín, Colombia. Variables: station_id: lat, long: latitude longitude weather station date, year, month, day: date variables rainfall: daily rainfall (cubic centimeters) measured weather station mean_rainfall: average rainfall across weather stations","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/mde_rain.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Rainfall in Medellín, Colombia — mde_rain","text":"OpenStreetMap","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/mlb_diffs.html","id":null,"dir":"Reference","previous_headings":"","what":"Differences between leagues in Major League Baseball — mlb_diffs","title":"Differences between leagues in Major League Baseball — mlb_diffs","text":"difference various statistics American League National League 1925 2023. Statistics include: PA: total number plate appearances hr_rate_diff: difference home runs per plate appearance bavg_dff: difference batting average obp_diff: difference -base percentage slg_diff: difference slugging percentage","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/mlb_diffs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differences between leagues in Major League Baseball — mlb_diffs","text":"","code":"mlb_diffs"},{"path":"https://beanumber.github.io/tidychangepoint/reference/mlb_diffs.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Differences between leagues in Major League Baseball — mlb_diffs","text":"object class tbl_ts (inherits tbl_df, tbl, data.frame) 99 rows 6 columns.","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/mlb_diffs.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Differences between leagues in Major League Baseball — mlb_diffs","text":"Lahman package","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/mod_cpt.html","id":null,"dir":"Reference","previous_headings":"","what":"Base class for changepoint models — new_mod_cpt","title":"Base class for changepoint models — new_mod_cpt","text":"Create changepoint detection model objects","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/mod_cpt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Base class for changepoint models — new_mod_cpt","text":"","code":"new_mod_cpt(   x = numeric(),   tau = integer(),   region_params = tibble::tibble(),   model_params = double(),   fitted_values = double(),   model_name = character(),   ... )  validate_mod_cpt(x)  mod_cpt(x, ...)"},{"path":"https://beanumber.github.io/tidychangepoint/reference/mod_cpt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Base class for changepoint models — new_mod_cpt","text":"x numeric vector coercible ts object tau indices changepoint set region_params tibble::tibble() one row region defined changepoint set tau. variable represents parameter estimated region. model_params numeric vector parameters estimated model across entire data set (just region). fitted_values Fitted values returned model original data set. model_name character vector giving model's name. ... currently ignored","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/mod_cpt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Base class for changepoint models — new_mod_cpt","text":"mod_cpt object","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/mod_cpt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Base class for changepoint models — new_mod_cpt","text":"Changepoint detection models know created, data set, optimal changepoint set found, parameters fit model. Methods various generic reporting functions provided. changepoint detection models inherit mod_cpt: base class changepoint detection models. models created one fit_*() functions, .model().","code":""},{"path":[]},{"path":"https://beanumber.github.io/tidychangepoint/reference/mod_cpt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Base class for changepoint models — new_mod_cpt","text":"","code":"cpt <- mod_cpt(CET) str(cpt) #> List of 6 #>  $ data         : Time-Series [1:366] from 1 to 366: 8.87 9.1 9.78 9.52 8.63 9.34 8.29 9.86 8.52 9.51 ... #>  $ tau          : int(0)  #>  $ region_params: tibble [0 × 0] (S3: tbl_df/tbl/data.frame) #>  Named list() #>  $ model_params : num(0)  #>  $ fitted_values: num(0)  #>  $ model_name   : chr(0)  #>  - attr(*, \"class\")= chr \"mod_cpt\" as.ts(cpt) #> Time Series: #> Start = 1  #> End = 366  #> Frequency = 1  #>   [1]  8.87  9.10  9.78  9.52  8.63  9.34  8.29  9.86  8.52  9.51  9.02  8.96 #>  [13]  9.08  8.82  8.38  8.12  7.88  8.84  8.78  8.45  8.76  8.89  8.75  9.05 #>  [25]  8.49  7.95  9.16 10.15  8.99  7.86  8.56  8.94  8.17  7.73  8.47  7.67 #>  [37]  7.29  8.52  8.05  7.67  8.83  8.62  8.75  9.31  9.09  9.07  8.75  9.82 #>  [49]  9.41  9.68  8.74  9.49  9.42  9.14  8.64  9.44  9.44  8.38  9.04  9.29 #>  [61]  9.49  9.10  8.91  9.37  9.80  9.28  8.69  9.36  9.97  9.54  9.29 10.07 #>  [73]  9.90  9.69 10.50  9.82  9.57 10.33  9.95  9.84  9.21  6.86  9.32  8.38 #>  [85]  9.83  8.80  8.85  8.66  9.84  8.79  9.49  9.71  8.47  9.21  9.12  8.87 #>  [97]  8.58  8.78  8.97  8.98 10.03  9.85 10.02  9.61  8.95  8.73  8.55  8.66 #> [109]  8.70  8.95  8.81  8.53  8.58  9.17  9.29  9.08 10.10  9.01  9.11  9.20 #> [121] 10.39  9.10 10.20  8.01  9.30  7.82  8.56  8.25  9.29  9.19  8.90  9.44 #> [133]  9.27  9.17  9.11  9.86  8.69  8.99  9.01  9.60  7.88  9.28  9.63  8.98 #> [145]  9.09  9.59  9.00  9.84  8.69  8.87  8.97  8.78  9.70  8.21  8.73  7.78 #> [157]  9.08  7.89  8.89  9.89  9.27  8.57  9.56 10.07  8.41  9.32  9.77 10.09 #> [169]  9.52 10.32  8.18  8.73 10.13  9.50  9.52 10.51  9.57  8.88  8.86  8.10 #> [181]  8.71  8.52  8.75  9.26  9.11  8.61  8.30 10.16  9.27  9.43  9.33  9.10 #> [193]  9.18  9.82  8.42  9.34  8.09  9.08 10.11  9.16  9.64  7.89  9.15  9.21 #> [205]  9.69  8.86  9.72  9.68  9.03 10.40  9.61  9.02  9.07  9.76  9.03  9.33 #> [217]  9.48  9.53  9.19  9.26  7.44  9.09  8.58  9.48  9.04  9.85  8.58  8.74 #> [229]  8.30  8.24  9.02  8.77  8.51  8.18 10.01  9.32  8.70  9.34  9.44 10.10 #> [241]  9.71  9.60  9.15  8.88  9.33  9.02  9.16  9.47  8.88  9.28  8.59  9.19 #> [253] 10.09  9.37  9.83  9.90  8.96  9.21  8.55  9.53  8.53  9.58 10.51  8.70 #> [265]  9.11  9.29  9.20  9.74  9.24  9.59  9.06  9.47  9.02  9.41  9.86 10.03 #> [277]  9.74  9.35  9.59 10.21  9.70  9.06  9.12  9.11 10.05  9.59 10.29  9.46 #> [289]  9.65 10.03 10.64  9.43  9.30  9.12  9.87  9.26  9.33  8.87 10.06  9.45 #> [301] 10.52  9.75  9.95  8.61  8.52  9.48  8.99  9.47  9.64  9.33  9.32  9.60 #> [313]  9.72  9.22  9.57  9.55  9.94 10.00  9.40  9.35  8.74  9.35  9.19  9.78 #> [325] 10.06  9.72  8.86  8.75  9.03  9.74 10.46 10.59  9.50  9.81  9.48 10.23 #> [337] 10.49  9.20 10.51 10.30 10.61 10.25  9.96 10.59 10.52 10.52 10.52 10.95 #> [349] 10.59 10.06 10.23  8.95 10.80  9.81  9.69 11.04 10.40 10.41 10.67 10.77 #> [361] 10.42 10.84 10.35 11.18 11.13 10.96 changepoints(cpt) #> integer(0)"},{"path":"https://beanumber.github.io/tidychangepoint/reference/model_args.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve the arguments that a model-fitting function used — model_args","title":"Retrieve the arguments that a model-fitting function used — model_args","text":"Retrieve arguments model-fitting function used","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/model_args.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve the arguments that a model-fitting function used — model_args","text":"","code":"model_args(object, ...)  # Default S3 method model_args(object, ...)  # S3 method for class 'seg_cpt' model_args(object, ...)  # S3 method for class 'ga' model_args(object, ...)  # S3 method for class 'cpt' model_args(object, ...)  # S3 method for class 'cptga' model_args(object, ...)  # S3 method for class 'segmented' model_args(object, ...)  # S3 method for class 'wbs' model_args(object, ...)"},{"path":"https://beanumber.github.io/tidychangepoint/reference/model_args.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve the arguments that a model-fitting function used — model_args","text":"object segmenter object. ... currently ignored","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/model_args.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve the arguments that a model-fitting function used — model_args","text":"named list arguments, NULL","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/model_args.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve the arguments that a model-fitting function used — model_args","text":"Every model fit model-fitting function, functions sometimes take arguments. model_args() recovers arguments passed model fitting function called. especially important using genetic algorithm.","code":""},{"path":[]},{"path":"https://beanumber.github.io/tidychangepoint/reference/model_args.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve the arguments that a model-fitting function used — model_args","text":"","code":"# Segment a time series using Coen's algorithm x <- segment(CET, method = \"ga-coen\", maxiter = 3) #> Seeding initial population with probability: 0.0327868852459016  # Recover the arguments passed to the model-fitting function x |>   as.segmenter() |>   model_args() #> $model_fn #> [1] \"nhpp\" #>  #> $penalty_fn #> [1] \"BMDL\" #>"},{"path":"https://beanumber.github.io/tidychangepoint/reference/model_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve the name of the model that a segmenter or model used — model_name","title":"Retrieve the name of the model that a segmenter or model used — model_name","text":"Retrieve name model segmenter model used","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/model_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve the name of the model that a segmenter or model used — model_name","text":"","code":"model_name(object, ...)  # Default S3 method model_name(object, ...)  # S3 method for class 'character' model_name(object, ...)  # S3 method for class 'mod_cpt' model_name(object, ...)  # S3 method for class 'seg_basket' model_name(object, ...)  # S3 method for class 'seg_cpt' model_name(object, ...)  # S3 method for class 'tidycpt' model_name(object, ...)  # S3 method for class 'ga' model_name(object, ...)  # S3 method for class 'cpt' model_name(object, ...)  # S3 method for class 'cptga' model_name(object, ...)  # S3 method for class 'segmented' model_name(object, ...)  # S3 method for class 'wbs' model_name(object, ...)"},{"path":"https://beanumber.github.io/tidychangepoint/reference/model_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve the name of the model that a segmenter or model used — model_name","text":"object segmenter object. ... currently ignored","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/model_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve the name of the model that a segmenter or model used — model_name","text":"character vector length 1.","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/model_name.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve the name of the model that a segmenter or model used — model_name","text":"Every segmenter works fitting model data. model_name() returns name model can passed whomademe() retrieve model fitting function. functions must begin prefix fit_. Note model fitting functions exist tidychangepoint necessarily actual functions used segmenter. Models also implement model_name().","code":""},{"path":[]},{"path":"https://beanumber.github.io/tidychangepoint/reference/model_name.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve the name of the model that a segmenter or model used — model_name","text":"","code":"# Segment a time series using PELT x <- segment(CET, method = \"pelt\")  # Retrieve the name of the model from the segmenter x |>   as.segmenter() |>   model_name() #> [1] \"meanvar\"  # What function created the model?  x |>   model_name() |>   whomademe() #> function (x, tau, ...)  #> { #>     if (!is_valid_tau(tau, length(x))) { #>         stop(\"Invalid changepoint set\") #>     } #>     else { #>         tau <- unique(tau) #>     } #>     regions <- split_by_tau(as.ts(x), tau) #>     region_mods <- purrr::map(regions, ~fit_meanshift_norm(.x,  #>         tau = NULL)) #>     fitted_values <- purrr::list_c(purrr::map(region_mods, ~c(fitted(.x)))) #>     region_params <- dplyr::mutate(purrr::list_rbind(purrr::map(region_mods,  #>         purrr::pluck(\"region_params\"))), region = names(regions)) #>     region_params$param_sigma_hatsq <- purrr::map_dbl(region_mods,  #>         model_variance) #>     mod_cpt(x <- as.ts(x), tau = tau, region_params = region_params,  #>         model_params = c(), fitted_values = fitted_values, model_name = \"meanvar\") #> } #> <bytecode: 0x56384d892bb0> #> <environment: namespace:tidychangepoint> #> attr(,\"model_name\") #> [1] \"meanvar\" #> attr(,\"class\") #> [1] \"fun_cpt\" model_name(x$segmenter) #> [1] \"meanvar\"  # Retrieve the name of the model from the model x |>   as.model() |>   model_name() #> [1] \"meanvar\""},{"path":"https://beanumber.github.io/tidychangepoint/reference/model_variance.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute model variance — model_variance","title":"Compute model variance — model_variance","text":"Compute model variance","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/model_variance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute model variance — model_variance","text":"","code":"model_variance(object, ...)"},{"path":"https://beanumber.github.io/tidychangepoint/reference/model_variance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute model variance — model_variance","text":"object model object implementing residuals() nobs() ... currently ignored","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/model_variance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute model variance — model_variance","text":"double vector length 1","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/model_variance.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute model variance — model_variance","text":"Using generic functions residuals() nobs(), function computes variance residuals. Note unlike stats::var(), use \\(n-1\\) denominator.","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/pad_tau.html","id":null,"dir":"Reference","previous_headings":"","what":"Pad and unpad changepoint sets with boundary points — pad_tau","title":"Pad and unpad changepoint sets with boundary points — pad_tau","text":"Pad unpad changepoint sets boundary points","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/pad_tau.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pad and unpad changepoint sets with boundary points — pad_tau","text":"","code":"pad_tau(tau, n)  unpad_tau(padded_tau)  is_valid_tau(tau, n)  regions_tau(tau, n)  validate_tau(tau, n)"},{"path":"https://beanumber.github.io/tidychangepoint/reference/pad_tau.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pad and unpad changepoint sets with boundary points — pad_tau","text":"tau numeric vector changepoint indices n length original time series padded_tau Output pad_tau()","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/pad_tau.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pad and unpad changepoint sets with boundary points — pad_tau","text":"pad_tau(): integer vector starts 0 ends \\(n\\). unpad_tau(): integer vector stripped first last entries. is_valid_tau(): logical entries 2 \\(n-1\\). regions_tau(): base::factor() validate_tau(): integer vector base::unique() entries 2 \\(n-1\\), inclusive.","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/pad_tau.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Pad and unpad changepoint sets with boundary points — pad_tau","text":"time series contains \\(n\\) observations, label 1 \\(n\\). Neither 1st point \\(n\\)th point can changepoint, since regions create one side empty. However, dividing time series non-empty segments, start 1, add \\(n+1\\), divide half-open interval \\([1, n+1)\\) half-open subintervals define regions. pad_tau() ensures 1 \\(n+1\\) included. unpad_tau() removes 1 \\(n+1\\), exist. is_valid_tau() checks see supplied set changepoints valid validate_tau() removes duplicates boundary values.","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/pad_tau.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pad and unpad changepoint sets with boundary points — pad_tau","text":"","code":"# Anything less than 2 is not allowed is_valid_tau(0, length(DataCPSim)) #> [1] FALSE is_valid_tau(1, length(DataCPSim)) #> [1] FALSE  # Duplicates are allowed is_valid_tau(c(42, 42), length(DataCPSim)) #> [1] TRUE is_valid_tau(826, length(DataCPSim)) #> [1] TRUE  # Anything greater than \\eqn{n} (in this case 1096) is not allowed is_valid_tau(1096, length(DataCPSim)) #> [1] FALSE is_valid_tau(1097, length(DataCPSim)) #> [1] FALSE  # Always return a factor with half-open intervals on the right regions_tau(c(42, 330), 1096) #> [1] [1,42)     [42,330)   [330,1097) #> Levels: [1,42) [330,1097) [42,330) # Anything less than 2 is not allowed validate_tau(0, length(DataCPSim)) #> numeric(0) validate_tau(1, length(DataCPSim)) #> numeric(0) validate_tau(826, length(DataCPSim)) #> [1] 826  # Duplicates are removed validate_tau(c(826, 826), length(DataCPSim)) #> [1] 826  # Anything greater than \\eqn{n} (in this case 1096) is not allowed validate_tau(1096, length(DataCPSim)) #> numeric(0) validate_tau(1097, length(DataCPSim)) #> numeric(0)  # Fix many problems validate_tau(c(-4, 0, 1, 4, 5, 5, 824, 1096, 1097, 182384), length(DataCPSim)) #> [1]   4   5 824"},{"path":"https://beanumber.github.io/tidychangepoint/reference/plot.tidyga.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot GA information — plot.tidyga","title":"Plot GA information — plot.tidyga","text":"Plot GA information","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/plot.tidyga.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot GA information — plot.tidyga","text":"","code":"# S3 method for class 'tidyga' plot(x, ...)"},{"path":"https://beanumber.github.io/tidychangepoint/reference/plot.tidyga.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot GA information — plot.tidyga","text":"x tidyga object ... currently ignored","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/plot.tidyga.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot GA information — plot.tidyga","text":"ggplot2::ggplot() object.","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/plot.tidyga.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot GA information — plot.tidyga","text":"","code":"# \\donttest{ x <- segment(DataCPSim, method = \"ga-coen\", maxiter = 5) #> Seeding initial population with probability: 0.0264598540145985 plot(x$segmenter)  # }"},{"path":"https://beanumber.github.io/tidychangepoint/reference/plot_best_chromosome.html","id":null,"dir":"Reference","previous_headings":"","what":"Diagnostic plots for seg_basket objects — plot_best_chromosome","title":"Diagnostic plots for seg_basket objects — plot_best_chromosome","text":"Diagnostic plots seg_basket objects","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/plot_best_chromosome.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Diagnostic plots for seg_basket objects — plot_best_chromosome","text":"","code":"plot_best_chromosome(x)  plot_cpt_repeated(x, i = nrow(x$basket))"},{"path":"https://beanumber.github.io/tidychangepoint/reference/plot_best_chromosome.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Diagnostic plots for seg_basket objects — plot_best_chromosome","text":"x seg_basket() object index basket show","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/plot_best_chromosome.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Diagnostic plots for seg_basket objects — plot_best_chromosome","text":"ggplot2::ggplot() object","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/plot_best_chromosome.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Diagnostic plots for seg_basket objects — plot_best_chromosome","text":"seg_basket() objects contain baskets candidate changepoint sets. plot_best_chromosome() shows size candidate changepoint sets change across generations evolution. plot_cpt_repeated() shows frequently individual observations appear best candidate changepoint sets generation.","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/plot_best_chromosome.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Diagnostic plots for seg_basket objects — plot_best_chromosome","text":"","code":"# \\donttest{ # Segment a time series using Coen's algorithm x <- segment(DataCPSim, method = \"coen\", num_generations = 3) #>    |                                                                     |                                                            |   0%   |                                                                     |==============================                              |  50%   |                                                                     |============================================================| 100%  # Plot the size of the sets during the evolution x |>   as.segmenter() |>   plot_best_chromosome()  # } # \\donttest{ # Segment a time series using Coen's algorithm x <- segment(DataCPSim, method = \"coen\", num_generations = 3) #>    |                                                                     |                                                            |   0%   |                                                                     |==============================                              |  50%   |                                                                     |============================================================| 100%  # Plot overall frequency of appearance of changepoints plot_cpt_repeated(x$segmenter) #> `stat_bin()` using `bins = 30`. Pick better value `binwidth`. #> Warning: Removed 2 rows containing missing values or values outside the scale range #> (`geom_bar()`).   # Plot frequency of appearance only up to a specific generation plot_cpt_repeated(x$segmenter, 5) #> `stat_bin()` using `bins = 30`. Pick better value `binwidth`. #> Warning: Removed 2 rows containing missing values or values outside the scale range #> (`geom_bar()`).  # }"},{"path":"https://beanumber.github.io/tidychangepoint/reference/plot_intensity.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the intensity of an NHPP fit — plot_intensity","title":"Plot the intensity of an NHPP fit — plot_intensity","text":"Plot intensity NHPP fit","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/plot_intensity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the intensity of an NHPP fit — plot_intensity","text":"","code":"plot_intensity(x, ...)"},{"path":"https://beanumber.github.io/tidychangepoint/reference/plot_intensity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the intensity of an NHPP fit — plot_intensity","text":"x NHPP model returned fit_nhpp() ... currently ignored","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/plot_intensity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the intensity of an NHPP fit — plot_intensity","text":"ggplot2::ggplot() object","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/plot_intensity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the intensity of an NHPP fit — plot_intensity","text":"","code":"# Plot the estimated intensity function plot_intensity(fit_nhpp(DataCPSim, tau = 826))   # Segment a time series using PELT mod <- segment(bogota_pm, method = \"pelt\")  # Plot the estimated intensity function for the NHPP model using the  # changepoints found by PELT plot_intensity(fit_nhpp(bogota_pm, tau = changepoints(mod)))"},{"path":"https://beanumber.github.io/tidychangepoint/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — as.ts.mod_cpt","title":"Objects exported from other packages — as.ts.mod_cpt","text":"objects imported packages. Follow links see documentation. broom augment, glance, tidy stats AIC, BIC, .ts, coef, fitted, logLik, nobs, residuals, time vctrs vec_cast, vec_ptype2 zoo index","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/reexports.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Objects exported from other packages — as.ts.mod_cpt","text":"","code":"# S3 method for class 'mod_cpt' as.ts(x, ...)  # S3 method for class 'mod_cpt' nobs(object, ...)  # S3 method for class 'mod_cpt' logLik(object, ...)  # S3 method for class 'mod_cpt' fitted(object, ...)  # S3 method for class 'mod_cpt' residuals(object, ...)  # S3 method for class 'mod_cpt' coef(object, ...)  # S3 method for class 'mod_cpt' augment(x, ...)  # S3 method for class 'mod_cpt' tidy(x, ...)  # S3 method for class 'mod_cpt' glance(x, ...)  # S3 method for class 'mod_cpt' plot(x, ...)  # S3 method for class 'mod_cpt' print(x, ...)  # S3 method for class 'mod_cpt' summary(object, ...)  # S3 method for class 'seg_basket' as.ts(x, ...)  # S3 method for class 'seg_basket' plot(x, ...)  # S3 method for class 'seg_cpt' as.ts(x, ...)  # S3 method for class 'seg_cpt' glance(x, ...)  # S3 method for class 'seg_cpt' nobs(object, ...)  # S3 method for class 'seg_cpt' print(x, ...)  # S3 method for class 'seg_cpt' summary(object, ...)  # S3 method for class 'tidycpt' as.ts(x, ...)  # S3 method for class 'tidycpt' augment(x, ...)  # S3 method for class 'tidycpt' tidy(x, ...)  # S3 method for class 'tidycpt' glance(x, ...)  # S3 method for class 'tidycpt' plot(x, use_time_index = FALSE, ylab = NULL, ...)  # S3 method for class 'tidycpt' print(x, ...)  # S3 method for class 'tidycpt' summary(object, ...)  # S3 method for class 'meanshift_lnorm' logLik(object, ...)  # S3 method for class 'nhpp' logLik(object, ...)  # S3 method for class 'nhpp' glance(x, ...)  # S3 method for class 'ga' as.ts(x, ...)  # S3 method for class 'ga' nobs(object, ...)  # S3 method for class 'cpt' as.ts(x, ...)  # S3 method for class 'cpt' logLik(object, ...)  # S3 method for class 'cpt' nobs(object, ...)  # S3 method for class 'cptga' as.ts(x, ...)  # S3 method for class 'cptga' nobs(object, ...)  # S3 method for class 'segmented' as.ts(x, ...)  # S3 method for class 'segmented' nobs(object, ...)  # S3 method for class 'wbs' as.ts(x, ...)  # S3 method for class 'wbs' nobs(object, ...)"},{"path":"https://beanumber.github.io/tidychangepoint/reference/reexports.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Objects exported from other packages — as.ts.mod_cpt","text":"... methods generic function require additional    arguments. object object log-likelihood value,    contribution log-likelihood value, can extracted. use_time_index x-axis labels time indices? time labels?","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/reexports.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Objects exported from other packages — as.ts.mod_cpt","text":"","code":"# Plot a meanshift model fit plot(fit_meanshift_norm(CET, tau = 330))   #' # Plot a trendshift model fit plot(fit_trendshift(CET, tau = 330))   #' # Plot a quadratic polynomial model fit plot(fit_lmshift(CET, tau = 330, deg_poly = 2))   #' # Plot a 4th degree polynomial model fit plot(fit_lmshift(CET, tau = 330, deg_poly = 10))   # Plot a segmented time series plot(segment(CET, method = \"pelt\"))   # Plot a segmented time series and show the time labels on the x-axis plot(segment(CET, method = \"pelt\"), use_time_index = TRUE) #> Scale for x is already present. #> Adding another scale for x, which will replace the existing scale.   # Label the y-axis correctly segment(CET, method = \"pelt\") |>   plot(use_time_index = TRUE, ylab = \"Degrees Celsius\") #> Scale for x is already present. #> Adding another scale for x, which will replace the existing scale.  # Summarize a tidycpt object summary(segment(CET, method = \"pelt\")) #>  #> ── Summary of tidycpt object ─────────────────────────────────────────────────── #> → y: Contains 366 observations, ranging from 6.86  to 11.18  . #> ℹ Segmenter (class cpt ) #> → A: Used the PELT algorithm from the changepoint  package. #> → τ: Found 5 changepoint(s). #> → f: Reported a fitness value of Inf using the MBIC penalty. #> ℹ Model #> → M: Fit the meanvar  model. #> → θ: Estimated 2 parameter(s), for each of 6 region(s). summary(segment(DataCPSim, method = \"pelt\")) #>  #> ── Summary of tidycpt object ─────────────────────────────────────────────────── #> → y: Contains 1096 observations, ranging from 13.67  to 298.98  . #> ℹ Segmenter (class cpt ) #> → A: Used the PELT algorithm from the changepoint  package. #> → τ: Found 3 changepoint(s). #> → f: Reported a fitness value of 9.40 k using the MBIC penalty. #> ℹ Model #> → M: Fit the meanvar  model. #> → θ: Estimated 2 parameter(s), for each of 4 region(s)."},{"path":"https://beanumber.github.io/tidychangepoint/reference/regions.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the regions from a tidycpt object — regions","title":"Extract the regions from a tidycpt object — regions","text":"Extract regions tidycpt object","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/regions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the regions from a tidycpt object — regions","text":"","code":"regions(x, ...)  # S3 method for class 'mod_cpt' regions(x, ...)  # S3 method for class 'tidycpt' regions(x, ...)"},{"path":"https://beanumber.github.io/tidychangepoint/reference/regions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the regions from a tidycpt object — regions","text":"x object regions ... Currently ignored","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/regions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the regions from a tidycpt object — regions","text":"base::factor() intervals indicating region","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/regions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the regions from a tidycpt object — regions","text":"","code":"cpt <- fit_meanshift_norm(CET, tau = 330) regions(cpt) #> [1] [1,330)   [330,367) #> Levels: [1,330) [330,367)"},{"path":"https://beanumber.github.io/tidychangepoint/reference/seg_basket.html","id":null,"dir":"Reference","previous_headings":"","what":"Default class for candidate changepoint sets — new_seg_basket","title":"Default class for candidate changepoint sets — new_seg_basket","text":"Default class candidate changepoint sets","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/seg_basket.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default class for candidate changepoint sets — new_seg_basket","text":"","code":"new_seg_basket(   x = numeric(),   algorithm = NA,   cpt_list = list(),   seg_params = list(),   model_name = \"meanshift_norm\",   penalty = \"BIC\",   ... )  seg_basket(x, ...)"},{"path":"https://beanumber.github.io/tidychangepoint/reference/seg_basket.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default class for candidate changepoint sets — new_seg_basket","text":"x numeric vector coercible stats::ts() object algorithm Algorithm used find changepoints cpt_list possibly empty list() candidate changepoints seg_params possibly empty list() segmenter parameters model_name character indicating model used find changepoints. penalty character indicating name penalty function used find changepoints. ... currently ignored","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/seg_basket.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Default class for candidate changepoint sets — new_seg_basket","text":"seg_basket() object.","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/seg_basket.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Default class for candidate changepoint sets — new_seg_basket","text":"","code":"seg <- seg_basket(DataCPSim, cpt_list = list(c(365), c(330, 839))) str(seg) #> List of 6 #>  $ data      : Time-Series [1:1096] from 1 to 1096: 35.5 29 35.6 33 29.5 ... #>  $ algorithm : logi NA #>  $ basket    : tibble [2 × 7] (S3: tbl_df/tbl/data.frame) #>   ..$ changepoints:List of 2 #>   .. ..$ : num 365 #>   .. ..$ : num [1:2] 330 839 #>   ..$ model       :List of 2 #>   .. ..$ :List of 6 #>   .. .. ..$ data         : Time-Series [1:1096] from 1 to 1096: 35.5 29 35.6 33 29.5 ... #>   .. .. ..$ tau          : num 365 #>   .. .. ..$ region_params: tibble [2 × 2] (S3: tbl_df/tbl/data.frame) #>   .. .. .. ..$ region  : chr [1:2] \"[1,365)\" \"[365,1.1e+03)\" #>   .. .. .. ..$ param_mu: num [1:2] 35.8 76.8 #>   .. .. ..$ model_params : Named num 1716 #>   .. .. .. ..- attr(*, \"names\")= chr \"sigma_hatsq\" #>   .. .. ..$ fitted_values: num [1:1096] 35.8 35.8 35.8 35.8 35.8 ... #>   .. .. ..$ model_name   : chr \"meanshift_norm\" #>   .. .. ..- attr(*, \"class\")= chr \"mod_cpt\" #>   .. ..$ :List of 6 #>   .. .. ..$ data         : Time-Series [1:1096] from 1 to 1096: 35.5 29 35.6 33 29.5 ... #>   .. .. ..$ tau          : num [1:2] 330 839 #>   .. .. ..$ region_params: tibble [3 × 2] (S3: tbl_df/tbl/data.frame) #>   .. .. .. ..$ region  : chr [1:3] \"[1,330)\" \"[330,839)\" \"[839,1.1e+03)\" #>   .. .. .. ..$ param_mu: num [1:3] 35.9 49.2 125.6 #>   .. .. ..$ model_params : Named num 858 #>   .. .. .. ..- attr(*, \"names\")= chr \"sigma_hatsq\" #>   .. .. ..$ fitted_values: num [1:1096] 35.9 35.9 35.9 35.9 35.9 ... #>   .. .. ..$ model_name   : chr \"meanshift_norm\" #>   .. .. ..- attr(*, \"class\")= chr \"mod_cpt\" #>   ..$ logLik      : num [1:2] -5636 -5256 #>   ..$ AIC         : num [1:2] 11281 10525 #>   ..$ BIC         : num [1:2] 11301 10555 #>   ..$ MBIC        : num [1:2] 11292 10551 #>   ..$ MDL         : num [1:2] 11306 10566 #>  $ seg_params: list() #>  $ model_name: chr \"meanshift_norm\" #>  $ penalty   : chr \"BIC\" #>  - attr(*, \"class\")= chr \"seg_basket\" as.ts(seg) #> Time Series: #> Start = 1  #> End = 1096  #> Frequency = 1  #>    [1]  35.50961  29.00292  35.63508  32.98452  29.53557  25.40781  28.82497 #>    [8]  50.31157  24.93185  58.88063  30.35777  33.66315  32.58653  42.78788 #>   [15]  45.23963  23.66417  20.00954  31.64746  34.65507  68.49028  43.53948 #>   [22]  25.29938  57.19244  39.51995  23.79025  27.81451  42.00712  36.09812 #>   [29]  32.74664  34.73679  60.20919  55.52211  33.92043  32.48948  22.66494 #>   [36]  24.16119  27.05582  16.09789  31.69439  27.22202  20.64027  33.97673 #>   [43]  46.71000  25.28389  24.88207  41.75347  36.50448  35.98297  31.39612 #>   [50]  44.14153  67.82557  26.81619  27.55292  30.77449  51.17371  51.34317 #>   [57]  23.10056  22.92962  29.39409  73.67531  23.46017  35.36286  29.45083 #>   [64]  54.18062  25.04895  27.47914  51.41767  32.30387  43.17916  30.11288 #>   [71]  22.45535  33.70278  34.16720  44.64931  22.60994  50.26498  50.28394 #>   [78]  33.24944  38.73890  36.75336  52.38881  36.62906  16.68155  35.12389 #>   [85]  35.89239  61.81050  47.85419  30.26446  36.93150  54.81053  30.32479 #>   [92]  37.46579  49.93442  46.01734  24.86685  35.88435  42.25720  37.78741 #>   [99]  46.26335  38.52976  47.99867  44.28395  51.05976  50.99393  36.01026 #>  [106]  37.44409  16.77029  31.05583  22.40344  27.22149  28.31583  58.06805 #>  [113]  38.30690  47.26490  31.55811  47.63268  23.38334  33.30157  46.75618 #>  [120]  30.46511  23.17060  31.52724  38.55479  35.54940  49.63486  38.85458 #>  [127]  35.80205  24.50227  20.49025  31.59546  33.84992  30.02572  23.84156 #>  [134]  27.92167  28.04857  55.54324  23.82133  46.27102  35.95369  47.65766 #>  [141]  31.37265  37.43892  26.73598  39.78209  37.23990  38.69749  25.74961 #>  [148]  15.00954  41.03282  35.55822  28.20253  34.25572  36.72560  25.87219 #>  [155]  34.25647  41.05718  45.99951  35.09617  30.10936  56.29692  21.62607 #>  [162]  32.16878  48.08144  27.56512  24.86829  23.20973  23.35380  24.87480 #>  [169]  41.98302  43.00026  42.37708  57.59545  28.58172  35.77870  28.82814 #>  [176]  35.31054  45.07452  19.92057  49.94871  42.05699  45.69919  40.55247 #>  [183]  28.77050  34.25098  39.57524  27.14581  44.69057  36.14965  49.50564 #>  [190]  49.79043  17.99559  39.65697  44.97010  18.31935  31.24522  31.07475 #>  [197]  21.61906  40.06484  34.99030  21.94425  37.44403  40.21178  38.23743 #>  [204]  31.80890  34.61897  47.81524  34.58307  30.49509  45.29616  49.07757 #>  [211]  24.17640  35.64875  17.63070  21.61867  32.29813  26.41488  28.31542 #>  [218]  25.02318  20.23520  28.13247  63.69313  42.52417  29.03129  54.03181 #>  [225]  25.60167  66.22389  26.02854  43.94607  39.26708  21.90635  33.10292 #>  [232]  31.36953  68.74632  49.57971  36.77692  62.23430  33.17239  34.70213 #>  [239]  29.33086  40.40664  20.51693  56.48982  47.57652  18.78920  39.83695 #>  [246]  23.57444  32.90584  23.97282  29.16350  33.94278  33.32760  40.39087 #>  [253]  37.08789  34.55488  28.07540  34.55889  32.50873  30.26050  31.61021 #>  [260]  29.22609  21.66017  39.99861  31.54268  54.66244  28.83481  50.43102 #>  [267]  41.57023  36.52691  41.74322  29.88869  65.63664  28.92781  31.62743 #>  [274]  60.02248  23.41874  30.41566  49.28914  30.75073  41.08489  35.95343 #>  [281]  26.30653  30.42233  35.58619  27.11696  41.07739  32.16801  54.22658 #>  [288]  30.58481  32.75808  40.14170  38.59850  34.62828  26.92407  32.65613 #>  [295]  21.12857  21.76199  31.72514  32.81883  39.57492  29.56246  26.52171 #>  [302]  33.16808  30.46846  26.71148  20.12177  28.85316  25.85809  73.07025 #>  [309]  50.11722  55.60337  42.62562  53.62811  40.37492  36.09093  54.15097 #>  [316]  52.48111  28.21508  44.33563  15.14660  31.77283  28.02836  42.85488 #>  [323]  30.07936  32.42728  33.91356  17.04858  29.01530  31.04799  24.28621 #>  [330]  35.50456  45.96182  21.99371  38.45540  25.78633  45.07985  27.04933 #>  [337]  50.03548  29.92024  26.27057  24.47919  59.13347  35.87683  42.14550 #>  [344]  29.36456  44.58931  30.97851  21.83860  46.47922  39.71751  20.74531 #>  [351]  21.96494  27.95186  40.64999  65.79466  34.95445  33.87721  27.41981 #>  [358]  19.67562  39.39982  45.69528  22.18879  37.54553  23.15847  28.45508 #>  [365]  25.23477  33.00227  27.16574  34.19212  38.82416  17.26278  38.40626 #>  [372]  57.01508  40.28032  27.15082  32.21021  41.59108  44.75365  31.57659 #>  [379]  44.49800  41.11233  35.23455  24.47634  45.13415  37.24519  42.85021 #>  [386]  32.84645  37.01077  38.96790  40.08106  43.99265  32.24746  27.24075 #>  [393]  31.66613  34.98403  27.29397  34.99001  31.25752  30.07230  27.18477 #>  [400]  37.36462  34.40921  27.16085  37.36703  47.98335  43.48091  23.31231 #>  [407]  20.68531  40.72063  13.66989  27.99689  25.61063  27.89089  17.93238 #>  [414]  23.25505  69.87353  20.53952  38.76444  45.53784  43.99368  25.86236 #>  [421]  23.02465  26.68788  51.99475  31.49945  39.98303  25.96329  18.68290 #>  [428]  45.39740  41.85522  40.88774  33.13019  36.51401  43.93668  28.72223 #>  [435]  17.36850  29.80030  29.36764  33.21636  30.98314  44.00905  49.96474 #>  [442]  32.63317  34.95938  42.09920  25.98961  26.13540  40.91752  27.13926 #>  [449]  23.93415  44.34438  24.80069  39.56627  34.17161  29.33848  51.51685 #>  [456]  38.10154  17.89906  29.84155  20.73680  17.94649  20.14526  30.60828 #>  [463]  37.05229  26.99159  48.47064  29.63704  30.29811  29.44919  50.20743 #>  [470]  25.22852  19.31610  49.49408  31.13921  45.04409  26.36500  21.37141 #>  [477]  33.60464  39.82629  23.44417  50.85233  35.55273  31.42400  52.78349 #>  [484]  46.42078  32.84158  41.58214  37.57874  92.79539  21.87917  35.86701 #>  [491]  44.63170  23.67373  49.57926  37.82632  28.51937  54.19448  25.42921 #>  [498]  31.42047  45.75800  26.14005  32.43037  30.31998  60.34780  35.38384 #>  [505]  17.65934  49.95322  48.97623  24.37608  62.05997  17.90258  35.04199 #>  [512]  25.02686  37.13100  27.42116  46.56513  14.44667  18.13457  30.41839 #>  [519]  40.06058  33.26711  58.99535  23.18483  36.67044  24.95331  27.19064 #>  [526]  26.76947  37.48431  37.13503  22.80870  32.98376  16.45626  25.22453 #>  [533]  35.59700  24.01433  58.24541  34.09432  31.09085  29.28524  20.65437 #>  [540]  24.52000  61.00638  33.59970  19.62836  30.89483  27.49646  47.74031 #>  [547]  38.48854  79.28284  49.83587  41.20827  60.84168  58.74430  73.74234 #>  [554]  62.99021  44.73661  66.14946  78.63431  58.85001  56.29965  49.76806 #>  [561]  66.31184  77.24626  30.20323  34.36305  40.14230 115.76308  53.35118 #>  [568]  56.61291  54.02821  30.86656  64.91494  51.47610  58.02405  46.19877 #>  [575]  75.46288  62.38693  62.12430  29.65914  48.83256  48.45711  87.84555 #>  [582]  48.89591  79.45862  45.43495  61.17216  44.15376  40.81283  28.66775 #>  [589] 100.81542  80.80345  59.82787  60.46746  61.44131  33.23726  52.19624 #>  [596]  83.51128  53.55938  63.91426  43.91224  55.36213  54.68760  56.36276 #>  [603]  50.26803  63.36135  71.84053  44.01963  54.90876  48.05082  73.33604 #>  [610]  40.86609  53.14413  59.74683  74.13609  72.72819  73.80368  46.35780 #>  [617]  39.46049  69.37131  69.23278  39.48316  65.63175  50.51306  79.59284 #>  [624]  43.27989  29.25963  53.94132  47.30325  89.88726  64.49022  53.12747 #>  [631]  51.61317  47.72412 102.46424  79.80996  51.62739  45.94677  44.20380 #>  [638]  62.47154  56.71323  45.20940  33.56516  93.76083  56.27748  43.03061 #>  [645]  86.12136  66.81985 103.73717  45.81972  66.39085  43.21773  56.16747 #>  [652]  59.28413  50.73493  65.26301 107.46498  68.39817  77.53655  63.00234 #>  [659] 100.37694  50.08347  51.31859  47.84582  73.28803  56.60291  49.47953 #>  [666]  74.14721  51.88331  72.97605  37.36928  50.55296  94.49818  85.63369 #>  [673]  47.21940  51.29463  30.87699  40.99069  65.22233  84.18339  36.97547 #>  [680]  67.67693 130.27515  56.50564  52.08214  36.62894  50.17403  43.98132 #>  [687]  63.78818  69.71901  58.66280  34.25625  40.01212  38.51369  31.93027 #>  [694]  70.08009  60.78508  51.19670  65.45439  70.13630  38.38639  46.42615 #>  [701]  59.55314  49.09690  60.75484  66.66783  70.41840  77.79466  57.57120 #>  [708]  66.27876  40.41878  51.19402  90.55426  28.21335  67.71025  52.72485 #>  [715]  37.34428  72.43783  92.29608  55.59297  69.66448  58.30077  50.26778 #>  [722]  74.61613  50.92561  51.97960  99.50324  47.12665  87.80435 119.15289 #>  [729]  96.67512  27.20912  42.35955  51.36019  66.15466  50.99965  31.33727 #>  [736]  29.62981  55.37496  72.04834  44.82771  46.57539  64.62869  38.82131 #>  [743]  53.86127  30.62108  27.37893  85.39840  55.85290  64.89730  94.68730 #>  [750]  35.15146  37.51919  45.72001  89.69830  46.13428  66.35095  37.41977 #>  [757]  43.10677  40.13555  43.13188  24.73451  76.52571  36.36566  71.17790 #>  [764]  56.44084  63.19831  38.86127  56.54947  83.05808  41.66112  60.14119 #>  [771]  73.36839  36.83335  46.99687  68.72470  48.02621  37.04922  67.67630 #>  [778]  46.78206  43.38829  79.76107  43.42811  34.89142  46.70848  85.92108 #>  [785]  65.54841  39.49996  41.09837  47.97916  62.31907  75.42977  83.27070 #>  [792]  73.13176  58.56810  75.03824  37.08341  57.11212  62.88590  80.01578 #>  [799]  31.43220  50.27634  20.52318  57.18749  65.93147  42.64495  60.78448 #>  [806]  42.12619  44.69412  58.64844  68.76875 163.36185  59.30573  44.16434 #>  [813]  74.02857  42.16594  47.80402  46.06946  68.13544  58.27459  44.44837 #>  [820]  49.71347  41.92370  65.10552 190.42879 100.55114  84.73240  95.19440 #>  [827]  62.62765  81.34105  62.84927 119.41128  97.69586 103.24047 132.04779 #>  [834]  63.94897  61.11686  68.83021  80.70128 118.36174  69.88491  75.67939 #>  [841]  97.87433  84.47204 167.57416 119.33953 112.87803  94.60966  54.52644 #>  [848] 134.89541  80.76840 100.86500 125.36064  80.85360  81.27602 102.14881 #>  [855]  62.87013  89.81105  90.54166  77.87923 154.26053 104.44530  89.99370 #>  [862] 137.11783 108.63313  81.65888  91.76187 153.53548  93.17887 131.28943 #>  [869]  58.95745  63.59264  86.73104 159.01308  56.48464  53.76414  79.36095 #>  [876] 104.17268  82.69108  75.47191  80.10494 123.34176 117.11018  82.67987 #>  [883]  87.24288  77.92377 105.19438  75.47461  73.26672 103.96131  88.69445 #>  [890]  67.40834 115.24510 107.64339  93.11673 129.87959 126.03289 118.21727 #>  [897] 101.24318  85.84310  83.24171  94.37437  95.52714  58.18705  70.93290 #>  [904] 135.64519 122.17646  47.94730  81.90610  71.29312  59.56557  90.96883 #>  [911] 105.27981  68.10784  62.24482 118.12494  89.29744 104.93346  54.31292 #>  [918] 118.22755  85.99992  68.28882 116.87775  59.89081  88.51994 124.96078 #>  [925]  48.99528  83.42296  39.21350 104.91602  96.76956 112.59752  71.12703 #>  [932]  88.73937  68.98548  70.70640  93.68761 131.72255  82.59086  81.56980 #>  [939]  80.12171 160.72231 130.68852  61.65840 175.64769 103.14938 133.32521 #>  [946] 160.15746  97.61800 119.62046 125.04584 120.67301 110.96952  62.16252 #>  [953] 215.10540  81.98616 110.52191  53.11782  83.00635  59.01162 167.43096 #>  [960] 146.43115 136.73301  93.53995  92.63548  98.56852  59.88143 101.45146 #>  [967] 102.84065 115.38549 110.87331  96.65850  70.26512  73.19904 204.44288 #>  [974] 120.52524 148.47584 176.52242  72.50633  98.01507  85.07589 122.09749 #>  [981] 173.47087 272.06243 114.84247 194.43547 182.95500  99.70758 155.32184 #>  [988] 234.90205 149.08372 129.43951  92.17400 150.30666 127.34289  95.56536 #>  [995] 183.85856 173.20963 119.36203 298.97556 239.90785 149.72990 145.83624 #> [1002] 199.97769 221.71715 124.50443 127.57657 126.63670 224.84161 193.52027 #> [1009]  67.17684 193.24399 163.77183 115.04808 139.80491 194.08049 142.56183 #> [1016] 150.05278 112.32713 229.27074 123.95988 146.80726 185.69923 111.44768 #> [1023] 148.97687 122.53709 127.37003  92.55487 106.25934 151.61132 166.55049 #> [1030] 166.27216  89.84812 285.64838 210.83361 119.86280 120.26534 166.67314 #> [1037] 128.77576 128.26908 203.90985 124.66021 285.09853 111.19870 185.07644 #> [1044]  88.79945  97.17543 121.60783 183.18550 113.42228 234.66441 148.81920 #> [1051] 127.67544 144.30028 183.15017 180.80073 212.84778  81.80066 156.28369 #> [1058] 217.85070 136.70053 196.65904 155.49179 120.33784 123.21350 293.16047 #> [1065] 141.29326 286.30265 137.11341 191.99534 155.88733 232.83108 141.37831 #> [1072] 114.62536 154.08698 129.56200 197.71852 143.31929 155.63173 166.92790 #> [1079] 151.48311 133.67364 183.79864 134.72402 108.41123 113.01052 145.28928 #> [1086]  85.79995 220.96699 127.18015 215.14311 190.93505 156.44133 164.06449 #> [1093] 164.81190  85.39927 179.14410 135.09159 changepoints(seg) #> [1] 330 839 fitness(seg) #>      BIC  #> 10554.84"},{"path":"https://beanumber.github.io/tidychangepoint/reference/seg_cpt.html","id":null,"dir":"Reference","previous_headings":"","what":"Base class for segmenters — new_seg_cpt","title":"Base class for segmenters — new_seg_cpt","text":"Base class segmenters","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/seg_cpt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Base class for segmenters — new_seg_cpt","text":"","code":"new_seg_cpt(   x = numeric(),   pkg = character(),   base_class = character(),   algorithm = NA,   changepoints = integer(),   fitness = double(),   seg_params = list(),   model_name = \"meanshift_norm\",   penalty = \"BIC\",   ... )  seg_cpt(x, ...)"},{"path":"https://beanumber.github.io/tidychangepoint/reference/seg_cpt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Base class for segmenters — new_seg_cpt","text":"x numeric vector coercible stats::ts() object pkg name package providing segmenter base_class class underlying object algorithm Algorithm used find changepoints changepoints possibly empty list() candidate changepoints fitness named double vector whose name reflects penalty applied seg_params possibly empty list() segmenter parameters model_name character indicating model used find changepoints. penalty character indicating name penalty function used find changepoints. ... currently ignored","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/seg_cpt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Base class for segmenters — new_seg_cpt","text":"seg_cpt object.","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/seg_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve parameters from a segmenter — seg_params","title":"Retrieve parameters from a segmenter — seg_params","text":"Retrieve parameters segmenter","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/seg_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve parameters from a segmenter — seg_params","text":"","code":"seg_params(object, ...)  # S3 method for class 'seg_cpt' seg_params(object, ...)  # S3 method for class 'ga' seg_params(object, ...)  # S3 method for class 'cpt' seg_params(object, ...)  # S3 method for class 'cptga' seg_params(object, ...)  # S3 method for class 'segmented' seg_params(object, ...)  # S3 method for class 'wbs' seg_params(object, ...)"},{"path":"https://beanumber.github.io/tidychangepoint/reference/seg_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve parameters from a segmenter — seg_params","text":"object segmenter object. ... currently ignored","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/seg_params.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve parameters from a segmenter — seg_params","text":"named list parameters values.","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/seg_params.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve parameters from a segmenter — seg_params","text":"segmenting algorithms parameters. function retrieves informative set parameter values.","code":""},{"path":[]},{"path":"https://beanumber.github.io/tidychangepoint/reference/seg_params.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve parameters from a segmenter — seg_params","text":"","code":"# Segment a time series using PELT x <- segment(CET, method = \"pelt\") x |>   as.segmenter() |>   seg_params() #> $test_stat #> [1] \"Normal\" #>  #> $num_cpts_max #> [1] Inf #>  #> $min_seg_length #> [1] 2 #>"},{"path":"https://beanumber.github.io/tidychangepoint/reference/segment.html","id":null,"dir":"Reference","previous_headings":"","what":"Segment a time series using a variety of algorithms — segment","title":"Segment a time series using a variety of algorithms — segment","text":"wrapper function encapsulates various algorithms detecting changepoint sets univariate time series.","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/segment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Segment a time series using a variety of algorithms — segment","text":"","code":"segment(x, method = \"null\", ...)  # S3 method for class 'tbl_ts' segment(x, method = \"null\", ...)  # S3 method for class 'xts' segment(x, method = \"null\", ...)  # S3 method for class 'numeric' segment(x, method = \"null\", ...)  # S3 method for class 'ts' segment(x, method = \"null\", ...)"},{"path":"https://beanumber.github.io/tidychangepoint/reference/segment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Segment a time series using a variety of algorithms — segment","text":"x numeric vector coercible stats::ts object method character string indicating algorithm use. See Details. ... arguments passed methods","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/segment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Segment a time series using a variety of algorithms — segment","text":"object class tidycpt.","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/segment.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Segment a time series using a variety of algorithms — segment","text":"Currently, segment() can use following algorithms, depending value method argument: pelt: Uses PELT algorithm implemented segment_pelt(), wraps either changepoint::cpt.mean() changepoint::cpt.meanvar(). segmenter class cpt. binseg: Uses Binary Segmentation algorithm implemented changepoint::cpt.meanvar(). segmenter class cpt. segneigh: Uses Segmented Neighborhood algorithm implemented changepoint::cpt.meanvar(). segmenter class cpt. single-best: Uses AMOC criteria implemented changepoint::cpt.meanvar(). segmenter class cpt. wbs: Uses Wild Binary Segmentation algorithm implemented wbs::wbs(). segmenter class wbs. segmented: Uses segmented algorithm implemented segmented::segmented(). segmenter class segmented. cptga: Uses Genetic algorithm implemented segment_cptga(), wraps changepointGA::cptga(). segmenter class tidycptga. ga: Uses Genetic algorithm implemented segment_ga(), wraps GA::ga(). segmenter class tidyga. ga-shi: Uses genetic algorithm implemented segment_ga_shi(), wraps segment_ga(). segmenter class tidyga. ga-coen: Uses Coen's heuristic implemented segment_ga_coen(). segmenter class tidyga. implementation supersedes following one. coen: Uses Coen's heuristic implemented segment_coen(). segmenter class seg_basket(). Note function deprecated. random: Uses random basket changepoints implemented segment_ga_random(). segmenter class tidyga. manual: Uses vector changepoints tau argument. segmenter class seg_cpt`. null: default. Uses changepoints. segmenter class seg_cpt.","code":""},{"path":[]},{"path":"https://beanumber.github.io/tidychangepoint/reference/segment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Segment a time series using a variety of algorithms — segment","text":"","code":"# Segment a time series using PELT segment(DataCPSim, method = \"pelt\") #> ℹ A tidycpt object. Segmenter ↓ #> Class 'cpt' : Changepoint Object #>        ~~   : S4 class containing 12 slots with names #>               cpttype date version data.set method test.stat pen.type pen.value minseglen cpts ncpts.max param.est  #>  #> Created on  : Thu Oct 16 19:32:54 2025  #>  #> summary(.)  : #> ---------- #> Created Using changepoint version 2.3  #> Changepoint type      : Change in mean and variance  #> Method of analysis    : PELT  #> Test Statistic  : Normal  #> Type of penalty       : MBIC with value, 27.99769  #> Minimum Segment Length : 2  #> Maximum no. of cpts   : Inf  #> Changepoint Locations : 547 822 972  #> ℹ Model: A meanvar  model with 4 region(s). #> → Each region has 2 parameter(s). #> → The model has 0 global parameter(s).  # Segment a time series using PELT and the BIC penalty segment(DataCPSim, method = \"pelt\", penalty = \"BIC\") #> ℹ A tidycpt object. Segmenter ↓ #> Class 'cpt' : Changepoint Object #>        ~~   : S4 class containing 12 slots with names #>               cpttype date version data.set method test.stat pen.type pen.value minseglen cpts ncpts.max param.est  #>  #> Created on  : Thu Oct 16 19:32:54 2025  #>  #> summary(.)  : #> ---------- #> Created Using changepoint version 2.3  #> Changepoint type      : Change in mean and variance  #> Method of analysis    : PELT  #> Test Statistic  : Normal  #> Type of penalty       : BIC with value, 20.99827  #> Minimum Segment Length : 2  #> Maximum no. of cpts   : Inf  #> Changepoint Locations : 547 822 972  #> ℹ Model: A meanvar  model with 4 region(s). #> → Each region has 2 parameter(s). #> → The model has 0 global parameter(s).  # Segment a time series using Binary Segmentation segment(DataCPSim, method = \"binseg\", penalty = \"BIC\") #> ℹ A tidycpt object. Segmenter ↓ #> Class 'cpt' : Changepoint Object #>        ~~   : S4 class containing 14 slots with names #>               cpts.full pen.value.full data.set cpttype method test.stat pen.type pen.value minseglen cpts ncpts.max param.est date version  #>  #> Created on  : Thu Oct 16 19:32:54 2025  #>  #> summary(.)  : #> ---------- #> Created Using changepoint version 2.3  #> Changepoint type      : Change in mean and variance  #> Method of analysis    : BinSeg  #> Test Statistic  : Normal  #> Type of penalty       : BIC with value, 20.99827  #> Minimum Segment Length : 2  #> Maximum no. of cpts   : 5  #> Changepoint Locations : 547 809 972  #> Range of segmentations: #>      [,1] [,2] [,3] [,4] [,5] #> [1,]  809   NA   NA   NA   NA #> [2,]  809  547   NA   NA   NA #> [3,]  809  547  972   NA   NA #> [4,]  809  547  972  822   NA #> [5,]  809  547  972  822  813 #>  #>  For penalty values: 1485.679 462.0479 160.3649 15.04514 15.04514  #> ℹ Model: A meanvar  model with 4 region(s). #> → Each region has 2 parameter(s). #> → The model has 0 global parameter(s).  # Segment a time series using a random changepoint set segment(DataCPSim, method = \"random\") #> Seeding initial population with probability: 0.0063863343681642 #> ℹ A tidycpt object. Segmenter ↓ #> An object of class \"ga\" #>  #> Call: #> GA::ga(type = \"binary\", fitness = obj_fun, nBits = n, population = ..1,     maxiter = 1) #>  #> Available slots: #>  [1] \"data\"          \"model_fn_args\" \"call\"          \"type\"          #>  [5] \"lower\"         \"upper\"         \"nBits\"         \"names\"         #>  [9] \"popSize\"       \"iter\"          \"run\"           \"maxiter\"       #> [13] \"suggestions\"   \"population\"    \"elitism\"       \"pcrossover\"    #> [17] \"pmutation\"     \"optim\"         \"fitness\"       \"summary\"       #> [21] \"bestSol\"       \"fitnessValue\"  \"solution\"      #> ℹ Model: A meanshift_norm  model with 7 region(s). #> → Each region has 1 parameter(s). #> → The model has 1 global parameter(s).  # Segment a time series using a manually-specified changepoint set segment(DataCPSim, method = \"manual\", tau = c(826)) #> ℹ A tidycpt object. Segmenter ↓ #> List of 9 #>  $ data        : Time-Series [1:1096] from 1 to 1096: 35.5 29 35.6 33 29.5 ... #>  $ pkg         : chr \"tidychangepoint\" #>  $ base_class  : chr(0)  #>  $ algorithm   : chr \"manual\" #>  $ changepoints: num 826 #>  $ fitness     : Named num 10571 #>   ..- attr(*, \"names\")= chr \"BIC\" #>  $ seg_params  : list() #>  $ model_name  : chr \"meanshift_norm\" #>  $ penalty     : chr \"BIC\" #>  - attr(*, \"class\")= chr \"seg_cpt\" #> ℹ Model: A meanshift_norm  model with 2 region(s). #> → Each region has 1 parameter(s). #> → The model has 1 global parameter(s).  # Segment a time series using a null changepoint set segment(DataCPSim) #> ℹ A tidycpt object. Segmenter ↓ #> List of 9 #>  $ data        : Time-Series [1:1096] from 1 to 1096: 35.5 29 35.6 33 29.5 ... #>  $ pkg         : chr \"tidychangepoint\" #>  $ base_class  : chr(0)  #>  $ algorithm   : chr \"manual\" #>  $ changepoints: NULL #>  $ fitness     : Named num 11503 #>   ..- attr(*, \"names\")= chr \"BIC\" #>  $ seg_params  : list() #>  $ model_name  : chr \"meanshift_norm\" #>  $ penalty     : chr \"BIC\" #>  - attr(*, \"class\")= chr \"seg_cpt\" #> ℹ Model: A meanshift_norm  model with 1 region(s). #> → Each region has 1 parameter(s). #> → The model has 1 global parameter(s)."},{"path":"https://beanumber.github.io/tidychangepoint/reference/segment_coen.html","id":null,"dir":"Reference","previous_headings":"","what":"Algoritmo genético de Bayesian MDL a un paso — segment_coen","title":"Algoritmo genético de Bayesian MDL a un paso — segment_coen","text":"implementation deprecated. Please see segment_ga_coen()","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/segment_coen.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Algoritmo genético de Bayesian MDL a un paso — segment_coen","text":"","code":"segment_coen(   x,   num_generations = 50,   nhpp_dist = c(\"W\", \"EW\", \"GGO\", \"MO\", \"GO\")[1],   vec_dist_a_priori = c(\"Gamma\", \"Gamma\"),   mat_phi = matrix(c(1, 3, 2, 1.2), ncol = 2),   generation_size = 50,   max_num_cp = 20,   show_progress_bar = TRUE,   ... )"},{"path":"https://beanumber.github.io/tidychangepoint/reference/segment_coen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Algoritmo genético de Bayesian MDL a un paso — segment_coen","text":"x object coercible time series object via stats::.ts() num_generations Number generations evolve nhpp_dist toma valores en c(\"W\",\"EW\",\"GGO\",\"MO\",\"GO\") y es el nombre de la función de tasa del NHPP vec_dist_a_priori vector de los nobmres de las distribuciones priori que se utilizan; eg c(\"Gamma\",\"Gamma\") y c(\"Gamma\",\"Gamma\",\"Gamma\") mat_phi matriz cuyos renglones tiene los parámetros de las distribuciones priori; cada renglón tiene todos los parametros de una distribución generation_size tamaño de las generaciones max_num_cp el máximo número de rebases. Este parámetro se ocupa en particular para que todos los cromosomas quepan en una matriz. show_progress_bar show progress bar? ... arguments passed methods","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/segment_coen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Algoritmo genético de Bayesian MDL a un paso — segment_coen","text":"cpt_gbmdl object","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/segment_coen.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Algoritmo genético de Bayesian MDL a un paso — segment_coen","text":"","code":"# \\donttest{ x <- segment_coen(DataCPSim, num_generations = 5) #>    |                                                                     |                                                            |   0%   |                                                                     |===============                                             |  25%   |                                                                     |==============================                              |  50%   |                                                                     |=============================================               |  75%   |                                                                     |============================================================| 100% # }"},{"path":"https://beanumber.github.io/tidychangepoint/reference/segment_cptga.html","id":null,"dir":"Reference","previous_headings":"","what":"Segment a time series using a genetic algorithm — segment_cptga","title":"Segment a time series using a genetic algorithm — segment_cptga","text":"Segmenting functions various genetic algorithms","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/segment_cptga.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Segment a time series using a genetic algorithm — segment_cptga","text":"","code":"segment_cptga(x, ...)"},{"path":"https://beanumber.github.io/tidychangepoint/reference/segment_cptga.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Segment a time series using a genetic algorithm — segment_cptga","text":"x time series ... arguments passed changepointGA::cptga()","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/segment_cptga.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Segment a time series using a genetic algorithm — segment_cptga","text":"tidycptga object. just changepointGA::cptga() object additional slot data (original time series).","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/segment_cptga.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Segment a time series using a genetic algorithm — segment_cptga","text":"segment_cptga() uses genetic algorithm changepointGA::cptga() \"evolve\" random set candidate changepoint sets, using penalized objective function specified penalty_fn. default, normal meanshift model fit (see fit_meanshift_norm()) BIC penalty applied.","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/segment_cptga.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Segment a time series using a genetic algorithm — segment_cptga","text":"","code":"# \\donttest{ # Segment a time series using a genetic algorithm res <- segment_cptga(CET) summary(res) #>    Length     Class      Mode  #>         1 tidycptga        S4   # Segment a time series using changepointGA x <- segment(CET, method = \"cptga\") summary(x) #>  #> ── Summary of tidycpt object ─────────────────────────────────────────────────── #> → y: Contains 366 observations, ranging from 6.86  to 11.18  . #> ℹ Segmenter (class tidycptga ) #> → A: Used the Genetic algorithm from the changepointGA  package. #> → τ: Found 2 changepoint(s). #> → f: Reported a fitness value of -370.22  using the BIC penalty. #> ℹ Model #> → M: Fit the arima  model. #> → θ: Estimated 2 parameter(s), for each of 3 region(s). changepoints(x) #> [1]  42 330 # }"},{"path":"https://beanumber.github.io/tidychangepoint/reference/segment_ga.html","id":null,"dir":"Reference","previous_headings":"","what":"Segment a time series using a genetic algorithm — segment_ga","title":"Segment a time series using a genetic algorithm — segment_ga","text":"Segmenting functions various genetic algorithms","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/segment_ga.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Segment a time series using a genetic algorithm — segment_ga","text":"","code":"segment_ga(   x,   model_fn = fit_meanshift_norm,   penalty_fn = BIC,   model_fn_args = list(),   ... )  segment_ga_shi(x, ...)  segment_ga_coen(x, ...)  segment_ga_random(x, ...)"},{"path":"https://beanumber.github.io/tidychangepoint/reference/segment_ga.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Segment a time series using a genetic algorithm — segment_ga","text":"x time series model_fn character name coercible fun_cpt function. See, example, fit_meanshift_norm(). penalty_fn function evaluates changepoint set returned model_fn. provide AIC(), BIC(), MBIC(), MDL(), BMDL(). model_fn_args list() parameters passed model_fn ... arguments passed GA::ga()","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/segment_ga.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Segment a time series using a genetic algorithm — segment_ga","text":"tidyga object. just GA::ga() object additional slot data (original time series) model_fn_args (captures model_fn penalty_fn arguments).","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/segment_ga.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Segment a time series using a genetic algorithm — segment_ga","text":"segment_ga() uses genetic algorithm GA::ga() \"evolve\" random set candidate changepoint sets, using penalized objective function specified penalty_fn. default, normal meanshift model fit (see fit_meanshift_norm()) BIC penalty applied. segment_ga_shi(): Shi's algorithm algorithm used doi:10.1175/JCLI-D-21-0489.1 . Note order achieve reported results run algorithm really long time. Pass values maxiter = 50000 run = 10000 GA::ga() using dots. segment_ga_coen(): Coen's algorithm one used doi:10.1007/978-3-031-47372-2_20 . Note speed algorithm highly sensitive size changepoint sets consideration, large changepoint sets slow. Consider setting population argument GA::ga() improve performance. Coen's algorithm uses build_gabin_population() function purpose default. segment_ga_random(): Randomly select candidate changepoint sets. implemented genetic algorithm one generation (.e., maxiter = 1). Note function uses log_gabin_population() default.","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/segment_ga.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Segment a time series using a genetic algorithm — segment_ga","text":"Shi, et al. (2022, doi:10.1175/JCLI-D-21-0489.1 ) Taimal, et al. (2023, doi:10.1007/978-3-031-47372-2_20 )","code":""},{"path":[]},{"path":"https://beanumber.github.io/tidychangepoint/reference/segment_ga.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Segment a time series using a genetic algorithm — segment_ga","text":"","code":"# Segment a time series using a genetic algorithm res <- segment_ga(CET, maxiter = 5) summary(res) #> ── Genetic Algorithm ───────────────────  #>  #> GA settings:  #> Type                  =  binary  #> Population size       =  50  #> Number of generations =  5  #> Elitism               =  2  #> Crossover probability =  0.8  #> Mutation probability  =  0.1  #>  #> GA results:  #> Iterations             = 5  #> Fitness function value = -2320.85  #> Solution =  #>      x1 x2 x3 x4 x5 x6 x7 x8 x9 x10  ...  x365 x366 #> [1,]  0  0  0  0  1  1  0  1  1   0          1    0 str(res) #> Formal class 'tidyga' [package \"tidychangepoint\"] with 23 slots #>   ..@ data         : Time-Series [1:366] from 1 to 366: 8.87 9.1 9.78 9.52 8.63 9.34 8.29 9.86 8.52 9.51 ... #>   ..@ model_fn_args:List of 2 #>   .. ..$ model_fn  : chr \"meanshift_norm\" #>   .. ..$ penalty_fn: chr \"BIC\" #>   ..@ call         : language GA::ga(type = \"binary\", fitness = obj_fun, nBits = n, maxiter = 5) #>   ..@ type         : chr \"binary\" #>   ..@ lower        : logi NA #>   ..@ upper        : logi NA #>   ..@ nBits        : int 366 #>   ..@ names        : chr [1:366] \"x1\" \"x2\" \"x3\" \"x4\" ... #>   ..@ popSize      : num 50 #>   ..@ iter         : int 5 #>   ..@ run          : int 5 #>   ..@ maxiter      : num 5 #>   ..@ suggestions  : logi[0 , 1:366]  #>   ..@ population   : num [1:50, 1:366] 0 1 0 1 1 0 1 1 1 1 ... #>   ..@ elitism      : int 2 #>   ..@ pcrossover   : num 0.8 #>   ..@ pmutation    : num 0.1 #>   ..@ optim        : logi FALSE #>   ..@ fitness      : num [1:50] -2321 -Inf -2353 -Inf -Inf ... #>   ..@ summary      : num [1:5, 1:6] -2321 -2321 -2321 -2321 -2321 ... #>   .. ..- attr(*, \"dimnames\")=List of 2 #>   .. .. ..$ : NULL #>   .. .. ..$ : chr [1:6] \"max\" \"mean\" \"q3\" \"median\" ... #>   ..@ bestSol      : list() #>   ..@ fitnessValue : num -2321 #>   ..@ solution     : num [1, 1:366] 0 0 0 0 1 1 0 1 1 0 ... #>   .. ..- attr(*, \"dimnames\")=List of 2 #>   .. .. ..$ : NULL #>   .. .. ..$ : chr [1:366] \"x1\" \"x2\" \"x3\" \"x4\" ... plot(res)   # \\donttest{ # Segment a time series using Shi's algorithm x <- segment(CET, method = \"ga-shi\", maxiter = 5) str(x) #> List of 4 #>  $ segmenter   :Formal class 'tidyga' [package \"tidychangepoint\"] with 23 slots #>   .. ..@ data         : Time-Series [1:366] from 1 to 366: 8.87 9.1 9.78 9.52 8.63 9.34 8.29 9.86 8.52 9.51 ... #>   .. ..@ model_fn_args:List of 2 #>   .. .. ..$ model_fn  : chr \"meanshift_norm_ar1\" #>   .. .. ..$ penalty_fn: chr \"BIC\" #>   .. ..@ call         : language GA::ga(type = \"binary\", fitness = obj_fun, nBits = n, popSize = 200, maxiter = 5) #>   .. ..@ type         : chr \"binary\" #>   .. ..@ lower        : logi NA #>   .. ..@ upper        : logi NA #>   .. ..@ nBits        : int 366 #>   .. ..@ names        : chr [1:366] \"x1\" \"x2\" \"x3\" \"x4\" ... #>   .. ..@ popSize      : num 200 #>   .. ..@ iter         : int 5 #>   .. ..@ run          : int 1 #>   .. ..@ maxiter      : num 5 #>   .. ..@ suggestions  : logi[0 , 1:366]  #>   .. ..@ population   : num [1:200, 1:366] 0 0 0 0 0 0 0 0 0 0 ... #>   .. ..@ elitism      : int 10 #>   .. ..@ pcrossover   : num 0.8 #>   .. ..@ pmutation    : num 0.1 #>   .. ..@ optim        : logi FALSE #>   .. ..@ fitness      : num [1:200] -Inf -2525 -Inf -Inf -2245 ... #>   .. ..@ summary      : num [1:5, 1:6] -2208 -2200 -2200 -2200 -2194 ... #>   .. .. ..- attr(*, \"dimnames\")=List of 2 #>   .. .. .. ..$ : NULL #>   .. .. .. ..$ : chr [1:6] \"max\" \"mean\" \"q3\" \"median\" ... #>   .. ..@ bestSol      : list() #>   .. ..@ fitnessValue : num -2194 #>   .. ..@ solution     : num [1, 1:366] 0 0 0 0 0 0 0 1 1 1 ... #>   .. .. ..- attr(*, \"dimnames\")=List of 2 #>   .. .. .. ..$ : NULL #>   .. .. .. ..$ : chr [1:366] \"x1\" \"x2\" \"x3\" \"x4\" ... #>  $ model       :List of 7 #>   ..$ data         : Time-Series [1:366] from 1 to 366: 8.87 9.1 9.78 9.52 8.63 9.34 8.29 9.86 8.52 9.51 ... #>   ..$ tau          : int [1:156] 8 9 10 12 15 16 18 19 21 22 ... #>   ..$ region_params: tibble [157 × 2] (S3: tbl_df/tbl/data.frame) #>   .. ..$ region  : chr [1:157] \"[1,8)\" \"[8,9)\" \"[9,10)\" \"[10,12)\" ... #>   .. ..$ param_mu: num [1:157] 9.08 9.86 8.52 9.27 8.95 ... #>   ..$ model_params : Named num [1:2] 0.146 -0.278 #>   .. ..- attr(*, \"names\")= chr [1:2] \"sigma_hatsq\" \"phi_hat\" #>   ..$ fitted_values: num [1:366] 9.08 9.13 9.07 8.88 8.95 ... #>   ..$ model_name   : chr \"meanshift_norm_ar1\" #>   ..$ durbin_watson: num 2.55 #>   ..- attr(*, \"class\")= chr \"mod_cpt\" #>  $ elapsed_time: 'difftime' num 1.02898526191711 #>   ..- attr(*, \"units\")= chr \"secs\" #>  $ time_index  : Date[1:366], format: \"1659-01-01\" \"1660-01-01\" ... #>  - attr(*, \"class\")= chr \"tidycpt\"  # Segment a time series using Coen's algorithm y <- segment(CET, method = \"ga-coen\", maxiter = 5) #> Seeding initial population with probability: 0.0273224043715847 changepoints(y) #>  x42  x45  x57 x252  #>   42   45   57  252   # Segment a time series using Coen's algorithm and an arbitrary threshold z <- segment(CET, method = \"ga-coen\", maxiter = 5,               model_fn_args = list(threshold = 2)) #> Seeding initial population with probability: 0.0327868852459016 changepoints(z) #>  x33 x314  #>   33  314  # } if (FALSE) { # \\dontrun{ # This will take a really long time! x <- segment(CET, method = \"ga-shi\", maxiter = 500, run = 100) changepoints(x)  # This will also take a really long time! y <- segment(CET, method = \"ga\", model_fn = fit_lmshift, penalty_fn = BIC,    popSize = 200, maxiter = 5000, run = 1000,    model_fn_args = list(trends = TRUE),    population = build_gabin_population(CET) ) } # }  if (FALSE) { # \\dontrun{ x <- segment(method = \"ga-coen\", maxiter = 50) } # }  x <- segment(CET, method = \"random\") #> Seeding initial population with probability: 0.0161274134792387"},{"path":"https://beanumber.github.io/tidychangepoint/reference/segment_manual.html","id":null,"dir":"Reference","previous_headings":"","what":"Manually segment a time series — segment_manual","title":"Manually segment a time series — segment_manual","text":"Segment time series manually inputting changepoint set","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/segment_manual.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Manually segment a time series — segment_manual","text":"","code":"segment_manual(x, tau, ...)"},{"path":"https://beanumber.github.io/tidychangepoint/reference/segment_manual.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Manually segment a time series — segment_manual","text":"x time series tau set indices representing changepoint set ... arguments passed seg_cpt","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/segment_manual.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Manually segment a time series — segment_manual","text":"seg_cpt object","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/segment_manual.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Manually segment a time series — segment_manual","text":"Sometimes want see manually input set changepoints performs. function takes time series changepoint detection set inputs returns seg_cpt object representing segmenter. Note default fit_meanshift_norm() used fit model BIC() used penalized objective function.","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/segment_manual.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Manually segment a time series — segment_manual","text":"","code":"# Segment a time series manually segment_manual(CET, tau = c(84, 330)) #> List of 9 #>  $ data        : Time-Series [1:366] from 1 to 366: 8.87 9.1 9.78 9.52 8.63 9.34 8.29 9.86 8.52 9.51 ... #>  $ pkg         : chr \"tidychangepoint\" #>  $ base_class  : chr(0)  #>  $ algorithm   : chr \"manual\" #>  $ changepoints: num [1:2] 84 330 #>  $ fitness     : Named num 697 #>   ..- attr(*, \"names\")= chr \"BIC\" #>  $ seg_params  : list() #>  $ model_name  : chr \"meanshift_norm\" #>  $ penalty     : chr \"BIC\" #>  - attr(*, \"class\")= chr \"seg_cpt\" segment_manual(CET, tau = NULL) #> List of 9 #>  $ data        : Time-Series [1:366] from 1 to 366: 8.87 9.1 9.78 9.52 8.63 9.34 8.29 9.86 8.52 9.51 ... #>  $ pkg         : chr \"tidychangepoint\" #>  $ base_class  : chr(0)  #>  $ algorithm   : chr \"manual\" #>  $ changepoints: NULL #>  $ fitness     : Named num 789 #>   ..- attr(*, \"names\")= chr \"BIC\" #>  $ seg_params  : list() #>  $ model_name  : chr \"meanshift_norm\" #>  $ penalty     : chr \"BIC\" #>  - attr(*, \"class\")= chr \"seg_cpt\""},{"path":"https://beanumber.github.io/tidychangepoint/reference/segment_pelt.html","id":null,"dir":"Reference","previous_headings":"","what":"Segment a time series using the PELT algorithm — segment_pelt","title":"Segment a time series using the PELT algorithm — segment_pelt","text":"Segmenting functions PELT algorithm","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/segment_pelt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Segment a time series using the PELT algorithm — segment_pelt","text":"","code":"segment_pelt(x, model_fn = fit_meanvar, ...)"},{"path":"https://beanumber.github.io/tidychangepoint/reference/segment_pelt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Segment a time series using the PELT algorithm — segment_pelt","text":"x time series model_fn character name coercible fun_cpt function. See, example, fit_meanshift_norm(). default fit_meanvar(). ... arguments passed changepoint::cpt.meanvar() changepoint::cpt.mean()","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/segment_pelt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Segment a time series using the PELT algorithm — segment_pelt","text":"cpt object returned changepoint::cpt.meanvar() changepoint::cpt.mean()","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/segment_pelt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Segment a time series using the PELT algorithm — segment_pelt","text":"function wraps either changepoint::cpt.meanvar() changepoint::cpt.mean().","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/segment_pelt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Segment a time series using the PELT algorithm — segment_pelt","text":"","code":"# Segment a time series using PELT res <- segment_pelt(DataCPSim) res #> Class 'cpt' : Changepoint Object #>        ~~   : S4 class containing 12 slots with names #>               cpttype date version data.set method test.stat pen.type pen.value minseglen cpts ncpts.max param.est  #>  #> Created on  : Thu Oct 16 19:33:19 2025  #>  #> summary(.)  : #> ---------- #> Created Using changepoint version 2.3  #> Changepoint type      : Change in mean and variance  #> Method of analysis    : PELT  #> Test Statistic  : Normal  #> Type of penalty       : MBIC with value, 27.99769  #> Minimum Segment Length : 2  #> Maximum no. of cpts   : Inf  #> Changepoint Locations : 547 822 972  str(res) #> Formal class 'cpt' [package \"changepoint\"] with 12 slots #>   ..@ data.set : Time-Series [1:1096] from 1 to 1096: 35.5 29 35.6 33 29.5 ... #>   ..@ cpttype  : chr \"mean and variance\" #>   ..@ method   : chr \"PELT\" #>   ..@ test.stat: chr \"Normal\" #>   ..@ pen.type : chr \"MBIC\" #>   ..@ pen.value: num 28 #>   ..@ minseglen: num 2 #>   ..@ cpts     : int [1:4] 547 822 972 1096 #>   ..@ ncpts.max: num Inf #>   ..@ param.est:List of 2 #>   .. ..$ mean    : num [1:4] 35.3 58.2 96.8 156.5 #>   .. ..$ variance: num [1:4] 127 371 921 2406 #>   ..@ date     : chr \"Thu Oct 16 19:33:19 2025\" #>   ..@ version  : chr \"2.3\"  # Segment as time series while specifying a penalty function segment_pelt(DataCPSim, penalty = \"BIC\") #> Class 'cpt' : Changepoint Object #>        ~~   : S4 class containing 12 slots with names #>               cpttype date version data.set method test.stat pen.type pen.value minseglen cpts ncpts.max param.est  #>  #> Created on  : Thu Oct 16 19:33:19 2025  #>  #> summary(.)  : #> ---------- #> Created Using changepoint version 2.3  #> Changepoint type      : Change in mean and variance  #> Method of analysis    : PELT  #> Test Statistic  : Normal  #> Type of penalty       : BIC with value, 20.99827  #> Minimum Segment Length : 2  #> Maximum no. of cpts   : Inf  #> Changepoint Locations : 547 822 972   # Segment a time series while specifying a meanshift normal model segment_pelt(DataCPSim, model_fn = fit_meanshift_norm, penalty = \"BIC\") #> Class 'cpt' : Changepoint Object #>        ~~   : S4 class containing 12 slots with names #>               cpttype date version data.set method test.stat pen.type pen.value minseglen cpts ncpts.max param.est  #>  #> Created on  : Thu Oct 16 19:33:19 2025  #>  #> summary(.)  : #> ---------- #> Created Using changepoint version 2.3  #> Changepoint type      : Change in mean  #> Method of analysis    : PELT  #> Test Statistic  : Normal  #> Type of penalty       : BIC with value, 13.99884  #> Minimum Segment Length : 1  #> Maximum no. of cpts   : Inf  #> Number of changepoints: 873"},{"path":"https://beanumber.github.io/tidychangepoint/reference/tau2time.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert changepoint sets to time indices — tau2time","title":"Convert changepoint sets to time indices — tau2time","text":"Convert changepoint sets time indices","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/tau2time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert changepoint sets to time indices — tau2time","text":"","code":"tau2time(tau, index)  time2tau(cpts, index)"},{"path":"https://beanumber.github.io/tidychangepoint/reference/tau2time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert changepoint sets to time indices — tau2time","text":"tau numeric vector changepoint indices index Index times, typically returned stats::time() cpts Time series observation labels converted indices","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/tau2time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert changepoint sets to time indices — tau2time","text":"tau2time(): character time labels time2tau(): integer vector changepoint indices","code":""},{"path":[]},{"path":"https://beanumber.github.io/tidychangepoint/reference/tau2time.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert changepoint sets to time indices — tau2time","text":"","code":"# Recover the years from a set of changepoint indices tau2time(c(42, 81, 330), index = as_year(time(CET))) #> [1] \"1700\" \"1739\" \"1988\"  # Recover the changepoint set indices from the years time2tau(c(1700, 1739, 1988), index = as_year(time(CET))) #> [1]  42  81 330"},{"path":"https://beanumber.github.io/tidychangepoint/reference/tbl_coef.html","id":null,"dir":"Reference","previous_headings":"","what":"Format the coefficients from a linear model as a tibble — tbl_coef","title":"Format the coefficients from a linear model as a tibble — tbl_coef","text":"Format coefficients linear model tibble","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/tbl_coef.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format the coefficients from a linear model as a tibble — tbl_coef","text":"","code":"tbl_coef(mod, ...)"},{"path":"https://beanumber.github.io/tidychangepoint/reference/tbl_coef.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format the coefficients from a linear model as a tibble — tbl_coef","text":"mod lm model object ... currently ignored","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/tbl_coef.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format the coefficients from a linear model as a tibble — tbl_coef","text":"tibble::tbl_df object containing fitted coefficients.","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/tbl_coef.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format the coefficients from a linear model as a tibble — tbl_coef","text":"","code":"# Convert a time series into a data frame with indices ds <- data.frame(y = as.ts(CET), t = 1:length(CET))  # Retrieve the coefficients from a null model tbl_coef(lm(y ~ 1, data = ds)) #> # A tibble: 1 × 2 #>   region param_mu #>   <chr>     <dbl> #> 1 NA         9.29  # Retrieve the coefficients from a two changepoint model tbl_coef(lm(y ~ (t >= 42) + (t >= 81), data = ds)) #> # A tibble: 3 × 2 #>   region  param_mu #>   <chr>      <dbl> #> 1 NA          8.68 #> 2 t >= 42     9.38 #> 3 t >= 81     9.37  # Retrieve the coefficients from a trendshift model tbl_coef(lm(y ~ poly(t, 1, raw = TRUE) * (t >= 42) + poly(t, 1, raw = TRUE) * (t >= 81), data = ds)) #> # A tibble: 3 × 3 #>   region  param_mu param_beta1 #>   <chr>      <dbl>       <dbl> #> 1 NA          9.25     -0.0273 #> 2 t >= 42     7.79      0.0535 #> 3 t >= 81     8.45     -0.0221  # Retrieve the coefficients from a quadratic model tbl_coef(lm(y ~ poly(t, 2, raw = TRUE) * (t >= 42) + poly(t, 2, raw = TRUE) * (t >= 81), data = ds)) #> # A tibble: 3 × 4 #>   region  param_mu param_beta1 param_beta2 #>   <chr>      <dbl>       <dbl>       <dbl> #> 1 NA          9.19     -0.0190   -0.000198 #> 2 t >= 42    11.0      -0.0646    0.00110  #> 3 t >= 81     9.72      0.0745   -0.000870"},{"path":"https://beanumber.github.io/tidychangepoint/reference/test_set.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate time series with known changepoint sets — test_set","title":"Simulate time series with known changepoint sets — test_set","text":"Simulate time series known changepoint sets","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/test_set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate time series with known changepoint sets — test_set","text":"","code":"test_set(n = 1, sd = 1, seed = NULL)"},{"path":"https://beanumber.github.io/tidychangepoint/reference/test_set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate time series with known changepoint sets — test_set","text":"n Number true changepoints set sd Standard deviation passed stats::rnorm() seed Value passed base::set.seed()","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/test_set.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate time series with known changepoint sets — test_set","text":"stats::ts() object","code":""},{"path":[]},{"path":"https://beanumber.github.io/tidychangepoint/reference/test_set.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate time series with known changepoint sets — test_set","text":"","code":"x <- test_set() plot(x)  changepoints(x) #> [1] 515"},{"path":"https://beanumber.github.io/tidychangepoint/reference/tidychangepoint-package.html","id":null,"dir":"Reference","previous_headings":"","what":"tidychangepoint: A Tidy Framework for Changepoint Detection Analysis — tidychangepoint-package","title":"tidychangepoint: A Tidy Framework for Changepoint Detection Analysis — tidychangepoint-package","text":"Changepoint detection algorithms R widespread different interfaces reporting conventions. makes comparative analysis results difficult. solve problem providing tidy, unified interface several different changepoint detection algorithms. also provide consistent numerical graphical reporting leveraging 'broom' 'ggplot2' packages.","code":""},{"path":[]},{"path":"https://beanumber.github.io/tidychangepoint/reference/tidychangepoint-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"tidychangepoint: A Tidy Framework for Changepoint Detection Analysis — tidychangepoint-package","text":"Maintainer: Benjamin S. Baumer ben.baumer@gmail.com (ORCID) [copyright holder] Authors: Biviana Marcela Suárez Sierra bmsuarezs@eafit.edu.co (ORCID) Arrigo Coen (ORCID) Carlos . Taimal (ORCID) contributors: Xueheng Shi [contributor]","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/tidycpt-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Container class for tidycpt objects — tidycpt-class","title":"Container class for tidycpt objects — tidycpt-class","text":"Container class tidycpt objects","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/tidycpt-class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Container class for tidycpt objects — tidycpt-class","text":"tidycpt object.","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/tidycpt-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Container class for tidycpt objects — tidycpt-class","text":"Every tidycpt object contains: segmenter: object returned underlying changepoint detection algorithm. can arbitrary class. Use .segmenter() retrieve . model: model object inheriting mod_cpt, created .model() called segmenter. elapsed_time: clock time passed algorithm running. time_index: available, labels time indices time series.","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/tidycpt-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Container class for tidycpt objects — tidycpt-class","text":"","code":"# Segment a time series using PELT x <- segment(CET, method = \"pelt\") class(x) #> [1] \"tidycpt\" str(x) #> List of 4 #>  $ segmenter   :Formal class 'cpt' [package \"changepoint\"] with 12 slots #>   .. ..@ data.set : Time-Series [1:366] from 1 to 366: 8.87 9.1 9.78 9.52 8.63 9.34 8.29 9.86 8.52 9.51 ... #>   .. ..@ cpttype  : chr \"mean and variance\" #>   .. ..@ method   : chr \"PELT\" #>   .. ..@ test.stat: chr \"Normal\" #>   .. ..@ pen.type : chr \"MBIC\" #>   .. ..@ pen.value: num 23.6 #>   .. ..@ minseglen: num 2 #>   .. ..@ cpts     : int [1:6] 55 57 267 344 347 366 #>   .. ..@ ncpts.max: num Inf #>   .. ..@ param.est:List of 2 #>   .. .. ..$ mean    : num [1:6] 8.79 9.44 9.17 9.62 10.52 ... #>   .. .. ..$ variance: num [1:6] 0.368 0 0.366 0.256 0 ... #>   .. ..@ date     : chr \"Thu Oct 16 19:33:20 2025\" #>   .. ..@ version  : chr \"2.3\" #>  $ model       :List of 6 #>   ..$ data         : Time-Series [1:366] from 1 to 366: 8.87 9.1 9.78 9.52 8.63 9.34 8.29 9.86 8.52 9.51 ... #>   ..$ tau          : int [1:5] 55 57 267 344 347 #>   ..$ region_params: tibble [6 × 3] (S3: tbl_df/tbl/data.frame) #>   .. ..$ region           : chr [1:6] \"[1,55)\" \"[55,57)\" \"[57,267)\" \"[267,344)\" ... #>   .. ..$ param_mu         : num [1:6] 8.8 9.04 9.17 9.6 10.54 ... #>   .. ..$ param_sigma_hatsq: Named num [1:6] 0.37429 0.16 0.36591 0.2457 0.00109 ... #>   .. .. ..- attr(*, \"names\")= chr [1:6] \"[1,55)\" \"[55,57)\" \"[57,267)\" \"[267,344)\" ... #>   ..$ model_params : NULL #>   ..$ fitted_values: num [1:366] 8.8 8.8 8.8 8.8 8.8 ... #>   ..$ model_name   : chr \"meanvar\" #>   ..- attr(*, \"class\")= chr \"mod_cpt\" #>  $ elapsed_time: 'difftime' num 0.00898122787475586 #>   ..- attr(*, \"units\")= chr \"secs\" #>  $ time_index  : Date[1:366], format: \"1659-01-01\" \"1660-01-01\" ... #>  - attr(*, \"class\")= chr \"tidycpt\""},{"path":"https://beanumber.github.io/tidychangepoint/reference/vec_ptype2.logLik.logLik.html","id":null,"dir":"Reference","previous_headings":"","what":"Vectors implementation for logLik — vec_ptype2.logLik.logLik","title":"Vectors implementation for logLik — vec_ptype2.logLik.logLik","text":"Vectors implementation logLik","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/vec_ptype2.logLik.logLik.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vectors implementation for logLik — vec_ptype2.logLik.logLik","text":"","code":"# S3 method for class 'logLik.logLik' vec_ptype2(x, y, ...)  # S3 method for class 'logLik.logLik' vec_cast(x, to, ...)"},{"path":"https://beanumber.github.io/tidychangepoint/reference/vec_ptype2.logLik.logLik.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vectors implementation for logLik — vec_ptype2.logLik.logLik","text":"x, y Vector types. ... dots future extensions must empty. Type cast . NULL, x returned .","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/vec_ptype2.logLik.logLik.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Vectors implementation for logLik — vec_ptype2.logLik.logLik","text":"stats::logLik() vector.","code":""},{"path":[]},{"path":"https://beanumber.github.io/tidychangepoint/reference/vec_ptype2.logLik.logLik.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Vectors implementation for logLik — vec_ptype2.logLik.logLik","text":"","code":"a <- logLik(lm(mpg ~ disp, data = mtcars)) b <- logLik(lm(mpg ~ am, data = mtcars)) vec_ptype2(a, b) #> 'log Lik.'  (df=3) c(a, b) #> [1] -82.10469 -95.24219 vec_cast(a, b) #> 'log Lik.' -82.10469 (df=3)"},{"path":"https://beanumber.github.io/tidychangepoint/reference/whomademe.html","id":null,"dir":"Reference","previous_headings":"","what":"Recover the function that created a model — whomademe","title":"Recover the function that created a model — whomademe","text":"Recover function created model","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/whomademe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Recover the function that created a model — whomademe","text":"","code":"whomademe(x, ...)"},{"path":"https://beanumber.github.io/tidychangepoint/reference/whomademe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recover the function that created a model — whomademe","text":"x character giving name model. passed model_name(). ... currently ignored","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/whomademe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Recover the function that created a model — whomademe","text":"function","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/whomademe.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Recover the function that created a model — whomademe","text":"Model objects (inheriting mod_cpt) know name function created . whomademe() returns function.","code":""},{"path":[]},{"path":"https://beanumber.github.io/tidychangepoint/reference/whomademe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Recover the function that created a model — whomademe","text":"","code":"# Get the function that made a model f <- whomademe(fit_meanshift_norm(CET, tau = 42)) str(f) #> function (x, tau, ...)   #>  - attr(*, \"model_name\")= chr \"meanshift_norm\" #>  - attr(*, \"class\")= chr \"fun_cpt\""},{"path":"https://beanumber.github.io/tidychangepoint/news/index.html","id":"tidychangepoint-102","dir":"Changelog","previous_headings":"","what":"tidychangepoint 1.0.2","title":"tidychangepoint 1.0.2","text":"Updated use changepointGA::GA() changepointGA::cptga()","code":""},{"path":"https://beanumber.github.io/tidychangepoint/news/index.html","id":"tidychangepoint-101","dir":"Changelog","previous_headings":"","what":"tidychangepoint 1.0.1","title":"tidychangepoint 1.0.1","text":"CRAN release: 2025-07-09 Added preliminary support ARIMA models. Added support models changepointGA package. Added support models segmented package. fitness.wbs() returns MBIC penalty value. Added summary() methods tidycpt, seg_cpt, mod_cpt objects. Improved output print() methods.","code":""},{"path":"https://beanumber.github.io/tidychangepoint/news/index.html","id":"tidychangepoint-100","dir":"Changelog","previous_headings":"","what":"tidychangepoint 1.0.0","title":"tidychangepoint 1.0.0","text":"CRAN release: 2025-01-31 mlb_diffs now tsibble various statistics. Added ls_*() functions list algorithms, models, penalty functions usable package. Added support SIC (=BIC) HQC penalty functions. Updated CET include 2021-2024. Added regions() generic function Padding always 1 n+1n+1, intervals always closed left open right. cut_inclusive() now cut_by_tau(). Added italy_grads data set.","code":""},{"path":"https://beanumber.github.io/tidychangepoint/news/index.html","id":"tidychangepoint-001","dir":"Changelog","previous_headings":"","what":"tidychangepoint 0.0.1","title":"tidychangepoint 0.0.1","text":"CRAN release: 2024-08-19 Initial CRAN submission.","code":""}]
