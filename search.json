[{"path":"https://beanumber.github.io/tidychangepoint/articles/climate_data.html","id":"central-england-temperature","dir":"Articles","previous_headings":"","what":"Central England Temperature","title":"Climate data in tidychangepoint","text":"Shi et al. (2022) use changepoint detection algorithms analyze time series annual temperature data Central England. data available via CET tidychangepoint. data go back 1659, simple plot illustrates increase temperature recent years.  Shi et al. (2022) use genetic algorithm identify changepoints time series. code reproduces analysis. Note since genetic algorithm random, results vary. Shi, et al. used maxiter value 50,000 order obtain results used paper. , use much lower value solely interest computational speed. Note algorithm fitting “meanshift” model, estimates mean \\(\\mu_i\\) regions defined changepoint set. objective function employs BIC penalty. One departure Shi’s implementation use log_gabin_population() function generate first generation 200 (.e. popSize) possible changepoint sets. data point chosen uniformly random probability equal \\(\\ln{N}\\), \\(N\\) number observations (362, case). Compare changepoint set discovered algorithm: fitness() function returns named vector value objective function discovered changepoint set. Information regions, including means, shown tidy() function. default, glance() returns summary segmenter produced discovered changepoint set. includes fitness, elapsed time, parameters used segmenter. However, can also run glance() model resulting discovered changepoint set. provides information model fit, including values various alternative model fitting metrics. important note one metrics (case, BIC) actually one used segmenter! plot() function returns informative plot original time series, changepoint set corresponding regions demarcated.","code":"plot(CET) trend_wn <- CET |>   segment(     method = \"ga\",      model_fn = fit_meanshift_norm,      penalty_fn = BIC,      population = log_gabin_population(CET),     popSize = 200,      maxiter = 50,     run = 10   ) ## Seeding initial population with probability: 0.0162752602536624 changepoints(trend_wn) ##  x30  x41 x266 x331  ##   30   41  266  331 changepoints(trend_wn, use_labels = TRUE) |>   as_year() ## [1] \"1688\" \"1699\" \"1924\" \"1989\" fitness(trend_wn) ##      BIC  ## 653.2597 tidy(trend_wn) ## # A tibble: 5 × 9 ##   region    num_obs   min   max  mean    sd begin   end param_mu ##   <chr>       <int> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>    <dbl> ## 1 [0,30)         29  7.88 10.2   8.89 0.543     0    30     8.89 ## 2 [30,41)        11  7.29  8.94  8.08 0.496    30    41     8.08 ## 3 [41,266)      225  6.86 10.5   9.17 0.593    41   266     9.17 ## 4 [266,331)      65  8.52 10.6   9.52 0.437   266   331     9.52 ## 5 [331,362]      32  8.86 11.0  10.3  0.497   331   362    10.3 glance(trend_wn) ## # A tibble: 1 × 8 ##   pkg   version    algorithm seg_params model_name criteria fitness elapsed_time ##   <chr> <pckg_vrs> <chr>     <list>     <chr>      <chr>      <dbl> <drtn>       ## 1 GA    3.2.4      Genetic   <list [1]> meanshift… BIC         653. 10.062 secs trend_wn |>   as.model() |>   glance() ## # A tibble: 1 × 11 ##   pkg     version algorithm params num_cpts  rmse logLik   AIC   BIC  MBIC   MDL ##   <chr>   <pckg_> <chr>     <list>    <int> <dbl>  <dbl> <dbl> <dbl> <dbl> <dbl> ## 1 tidych… 0.0.1   meanshif… <dbl>         4 0.550  -297.  614.  653.  654.  664. plot(trend_wn, use_time_index = TRUE) ## Scale for x is already present. ## Adding another scale for x, which will replace the existing scale."},{"path":"https://beanumber.github.io/tidychangepoint/articles/climate_data.html","id":"comparison-to-reported-values","dir":"Articles","previous_headings":"Central England Temperature","what":"Comparison to reported values","title":"Climate data in tidychangepoint","text":"changepoint set reported Shi et al. (2022) \\(\\{1700, 1739, 1988\\}\\). configuration trendshift model white noise errors, Table 2 Shi et al. (2022) reports model variance \\(\\hat{\\sigma}^2\\) 0.291, log-likelihood -290.02, BIC 650.74, MDL 653.07. Fitting trendshift model white noise errors running glance() function reveals exact match reported figures. Modifying model incorporate AR(1) lagged errors also matches figures Table 2.","code":"target_cpts <- c(1700, 1739, 1988) ids <- time2tau(target_cpts, as_year(time(CET))) CET |>   fit_trendshift(tau = ids) |>   glance() ## # A tibble: 1 × 11 ##   pkg     version algorithm params num_cpts  rmse logLik   AIC   BIC  MBIC   MDL ##   <chr>   <pckg_> <chr>     <list>    <int> <dbl>  <dbl> <dbl> <dbl> <dbl> <dbl> ## 1 tidych… 0.0.1   trendshi… <dbl>         3 0.539  -290.  604.  651.  626.  653. CET |>   fit_trendshift_ar1(tau = ids) |>   glance() ## # A tibble: 1 × 11 ##   pkg     version algorithm params num_cpts  rmse logLik   AIC   BIC  MBIC   MDL ##   <chr>   <pckg_> <chr>     <list>    <int> <dbl>  <dbl> <dbl> <dbl> <dbl> <dbl> ## 1 tidych… 0.0.1   trendshi… <dbl>         3 0.538  -289.  603.  654.  623.  656."},{"path":"https://beanumber.github.io/tidychangepoint/articles/climate_data.html","id":"bogotá-particulate-matter","dir":"Articles","previous_headings":"","what":"Bogotá particulate matter","title":"Climate data in tidychangepoint","text":"bogota_pm data set contains daily measurement particulate matter Bogotá, Colombia three-year period 2018–2020.  , use genetic algorithm Taimal, Suárez-Sierra, Rivera (2023) identify changepoint sets. Note model fit NHPP model, along BMDL penalty function.  compare quality fit NHPP model using diagnose().","code":"plot(bogota_pm) bog_cpt <- bogota_pm |>   segment(     method = \"ga-coen\",     maxiter = 50,     run = 10   ) ## Seeding initial population with probability: 0.0145985401459854 glance(bog_cpt) ## # A tibble: 1 × 8 ##   pkg   version    algorithm seg_params model_name criteria fitness elapsed_time ##   <chr> <pckg_vrs> <chr>     <list>     <chr>      <chr>      <dbl> <drtn>       ## 1 GA    3.2.4      Genetic   <list [1]> nhpp       BMDL       1987. 36.156 secs plot(bog_cpt, use_time_index = TRUE) ## Scale for x is already present. ## Adding another scale for x, which will replace the existing scale. bog_cpt |>   as.model() |>   diagnose()"},{"path":"https://beanumber.github.io/tidychangepoint/articles/climate_data.html","id":"medellín-rainfall","dir":"Articles","previous_headings":"","what":"Medellín rainfall","title":"Climate data in tidychangepoint","text":"times series mde_rain_monthly contains monthly precipitation readings locations around city Medellín, Colombia.  , fit deterministic PELT algorithm (Killick Eckley 2014).","code":"plot(mde_rain_monthly) mde_cpt <- segment(mde_rain_monthly, method = \"pelt\") plot(mde_cpt, use_time_index = TRUE) ## Scale for x is already present. ## Adding another scale for x, which will replace the existing scale."},{"path":[]},{"path":"https://beanumber.github.io/tidychangepoint/articles/coen.html","id":"using-the-original-implementation-of-coens-algorithm","dir":"Articles","previous_headings":"","what":"Using the original implementation of Coen’s algorithm","title":"Using Coen's algorithm","text":"","code":"x <- segment(bogota_pm, method = \"coen\", num_generations = 5) #> Warning: `segment_coen()` was deprecated in tidychangepoint 0.0.1. #> ℹ Please use `segment_ga_coen()` instead. #> ℹ The deprecated feature was likely used in the tidychangepoint package. #>   Please report the issue to the authors. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was #> generated. #>   |                                                                    |                                                            |   0%  |                                                                    |===============                                             |  25%  |                                                                    |==============================                              |  50%  |                                                                    |=============================================               |  75%  |                                                                    |============================================================| 100% changepoints(x) #> [1] 102 249 plot(x)"},{"path":"https://beanumber.github.io/tidychangepoint/articles/coen.html","id":"using-the-ga-implementation-of-coens-algorithm","dir":"Articles","previous_headings":"","what":"Using the GA implementation of Coen’s algorithm","title":"Using Coen's algorithm","text":"","code":"y <- segment(bogota_pm, method = \"ga-coen\", maxiter = 50, run = 10) #> Seeding initial population with probability: 0.0145985401459854 changepoints(y) #> x557  #>  557 plot(y) diagnose(y$model) tidy(y) #> # A tibble: 2 × 12 #>   region      num_obs   min   max  mean    sd begin   end param_alpha param_beta #>   <chr>         <int> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>       <dbl>      <dbl> #> 1 [0,557)         556   1.3  78.5  30.1  14.3     0   557       0.928    1.06    #> 2 [557,1.1e+…     540   1.3  71.8  27.5  13.9   557  1096       0.529    0.00298 #> # ℹ 2 more variables: logPost <dbl>, logLik <dbl> glance(y) #> # A tibble: 1 × 8 #>   pkg   version    algorithm seg_params model_name criteria fitness elapsed_time #>   <chr> <pckg_vrs> <chr>     <list>     <chr>      <chr>      <dbl> <drtn>       #> 1 GA    3.2.4      Genetic   <list [1]> nhpp       BMDL       1964. 22.766 secs"},{"path":"https://beanumber.github.io/tidychangepoint/articles/coen.html","id":"changing-the-threshold","dir":"Articles","previous_headings":"Using the GA implementation of Coen’s algorithm","what":"Changing the threshold","title":"Using Coen's algorithm","text":"default, threshold set mean observed values, can changed using model_fn_args argument segment(). Please note number iterations (maxiter) genetic algorithm set low ease compilation. NOTA BENE: obtain robust result, set maxiter something much higher. can also experiment popSize argument segment().","code":"z <- segment(   bogota_pm,    method = \"ga-coen\",    maxiter = 5,   model_fn_args = list(threshold = 50) ) #> Seeding initial population with probability: 0.0145985401459854 changepoints(z) #>  x103  x283  x636  x690  x767  x833  x839 x1070  #>   103   283   636   690   767   833   839  1070 plot(z) diagnose(z$model) tidy(z) #> # A tibble: 9 × 12 #>   region      num_obs   min   max  mean    sd begin   end param_alpha param_beta #>   <chr>         <int> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>       <dbl>      <dbl> #> 1 [0,103)         102   2.9  56.2  31.9  10.4     0   103       0.158     0.160  #> 2 [103,283)       180   1.3  57.2  25.7  12.6   103   283       0.228     0.0895 #> 3 [283,636)       353   1.6  78.5  31.7  15.4   283   636       0.528     0.0835 #> 4 [636,690)        54   1.7  55.2  34.5  12.1   636   690       0.510     0.0824 #> 5 [690,767)        77   2.2  53.5  29.0  14.7   690   767       0.457     0.0814 #> 6 [767,833)        66   4.6  71.8  33.5  16.5   767   833       0.571     0.0800 #> 7 [833,839)         6   2.4  40.8  24.7  14.9   833   839       0.407     0.0836 #> 8 [839,1.07e…     231   1.3  57.4  22.3  10.9   839  1070       0.299     0.0847 #> 9 [1.07e+03,…      27   2    58.2  34.8  15.3  1070  1096       0.613     0.0785 #> # ℹ 2 more variables: logPost <dbl>, logLik <dbl> glance(z) #> # A tibble: 1 × 8 #>   pkg   version    algorithm seg_params model_name criteria fitness elapsed_time #>   <chr> <pckg_vrs> <chr>     <list>     <chr>      <chr>      <dbl> <drtn>       #> 1 GA    3.2.4      Genetic   <list [1]> nhpp       BMDL        658. 5.401 secs"},{"path":"https://beanumber.github.io/tidychangepoint/articles/tidychangepoint.html","id":"tidy-methods-for-changepoint-analysis","dir":"Articles","previous_headings":"","what":"Tidy methods for changepoint analysis","title":"tidychangepoint","text":"tidychangepoint package allows use number algorithms detecting changepoint sets univariate time series common, tidyverse-compliant interface. also provides model-fitting procedures commonly-used parametric models, tools computing various penalty functions, graphical diagnostic displays. Changepoint sets computed using segment() function, takes numeric vector coercible ts object, string indicating algorithm wish use. segment() always returns tidycpt object. Various methods available tidycpt objects. example, .ts() returns original data ts object, changepoints() returns set changepoint indices.","code":"library(tidychangepoint) x <- segment(DataCPSim, method = \"pelt\") class(x) #> [1] \"tidycpt\" changepoints(x) #> [1] 547 822 972"},{"path":"https://beanumber.github.io/tidychangepoint/articles/tidychangepoint.html","id":"retrieving-information-using-the-broom-interface","dir":"Articles","previous_headings":"Tidy methods for changepoint analysis","what":"Retrieving information using the broom interface","title":"tidychangepoint","text":"tidychangepoint follows design interface broom package. Therefore, augment(), tidy() glance() methods exists tidycpt objects. augment() returns tsibble grouped according regions defined changepoint set. tidy() returns tbl provides summary statistics region. include parameters fit, prefixed output param_. glance() returns tbl provides summary statistics algorithm. includes fitness, value penalized objective function used.","code":"augment(x) #> # A tsibble: 1,096 x 5 [1] #> # Groups:    region [4] #>    index     y region  .fitted  .resid #>    <int> <dbl> <fct>     <dbl>   <dbl> #>  1     1  35.5 [0,547)    35.3   0.232 #>  2     2  29.0 [0,547)    35.3  -6.27  #>  3     3  35.6 [0,547)    35.3   0.357 #>  4     4  33.0 [0,547)    35.3  -2.29  #>  5     5  29.5 [0,547)    35.3  -5.74  #>  6     6  25.4 [0,547)    35.3  -9.87  #>  7     7  28.8 [0,547)    35.3  -6.45  #>  8     8  50.3 [0,547)    35.3  15.0   #>  9     9  24.9 [0,547)    35.3 -10.3   #> 10    10  58.9 [0,547)    35.3  23.6   #> # ℹ 1,086 more rows tidy(x) #> # A tibble: 4 × 10 #>   region  num_obs   min   max  mean    sd begin   end param_mu param_sigma_hatsq #>   <chr>     <int> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>    <dbl>             <dbl> #> 1 [0,547)     546  13.7  92.8  35.3  11.3     0   547     35.3              127. #> 2 [547,8…     275  20.5 163.   58.1  19.3   547   822     58.1              372. #> 3 [822,9…     150  39.2 215.   96.7  30.5   822   972     96.7              924. #> 4 [972,1…     125  67.2 299.  156.   49.6   972  1096    156.              2442. glance(x) #> # A tibble: 1 × 8 #>   pkg      version algorithm seg_params model_name criteria fitness elapsed_time #>   <chr>    <pckg_> <chr>     <list>     <chr>      <chr>      <dbl> <drtn>       #> 1 changep… 2.2.4   PELT      <list [1]> meanvar    MBIC       9403. 0.067 secs"},{"path":"https://beanumber.github.io/tidychangepoint/articles/tidychangepoint.html","id":"other-methods","dir":"Articles","previous_headings":"Tidy methods for changepoint analysis","what":"Other methods","title":"tidychangepoint","text":"plot() method leverages ggplot2 provide informative plot, regions defined changepoint set clearly demarcated, means within region also indicated.  generic functions defined tidycpt objects include fitness(), .model(), exceedances(). example, fitness() returns named vector value penalized objective function used.","code":"plot(x) fitness(x) #>     MBIC  #> 9403.391"},{"path":"https://beanumber.github.io/tidychangepoint/articles/tidychangepoint.html","id":"structure","dir":"Articles","previous_headings":"","what":"Structure","title":"tidychangepoint","text":"Every tidycpt objects contains two main children: segmenter: object results changepoint detection algorithm. can class. Methods objects class cpt, ga, wbs currently implemented, well seg_basket (default internal class). Given data set, model, penalized objective function, segmenter’s job search exponentially-large space possible changepoint sets one optimizes penalized objective function (space possible changepoint sets). segmenting algorithms (e.g., PELT) deterministic, others (e.g., genetic algorithms) randomized. model: model object inheriting mod_cpt, internal class representing model objects. Model objects created model-fitting functions, whose names start fit_. model tidycpt object model object returned fit_*() function corresponds one used segmenter. Given data set, model description, set changepoints, corresponding model-fitting function finds values model parameters optimize model fit data. segmenters models implement methods generic functions changepoints(), .ts(), nobs(), logLik(), model_name(), glance(). However, important note tidychangepoint best match model used segmenter corresponding model-fitting function, exact matches always exist. Thus, logLik() segmenter may always match logLik() model. Nevertheless, squaring values focus ongoing work.","code":""},{"path":"https://beanumber.github.io/tidychangepoint/articles/tidychangepoint.html","id":"segmenters","dir":"Articles","previous_headings":"Structure","what":"Segmenters","title":"tidychangepoint","text":"example , segmenter class cpt, segment() simply wraps cpt.meanvar() function changepoint package. addition generic functions listed , segmenters implement methods generic functions fitness(), model_args(), seg_params().","code":"x |>   as.segmenter() |>   str() #> Formal class 'cpt' [package \"changepoint\"] with 12 slots #>   ..@ data.set : Time-Series [1:1096] from 1 to 1096: 35.5 29 35.6 33 29.5 ... #>   ..@ cpttype  : chr \"mean and variance\" #>   ..@ method   : chr \"PELT\" #>   ..@ test.stat: chr \"Normal\" #>   ..@ pen.type : chr \"MBIC\" #>   ..@ pen.value: num 28 #>   ..@ minseglen: num 2 #>   ..@ cpts     : int [1:4] 547 822 972 1096 #>   ..@ ncpts.max: num Inf #>   ..@ param.est:List of 2 #>   .. ..$ mean    : num [1:4] 35.3 58.2 96.8 156.5 #>   .. ..$ variance: num [1:4] 127 371 921 2406 #>   ..@ date     : chr \"Wed Apr 24 21:56:29 2024\" #>   ..@ version  : chr \"2.2.4\""},{"path":"https://beanumber.github.io/tidychangepoint/articles/tidychangepoint.html","id":"models","dir":"Articles","previous_headings":"Structure","what":"Models","title":"tidychangepoint","text":"model object case created fit_meanvar(), class mod_cpt. addition generic functions listed , models implement methods generic functions fitted(), residuals(), coef(), augment(), tidy(), plot().","code":"x |>   as.model() |>   str() #> List of 6 #>  $ data         : Time-Series [1:1096] from 1 to 1096: 35.5 29 35.6 33 29.5 ... #>  $ tau          : int [1:3] 547 822 972 #>  $ region_params: tibble [4 × 3] (S3: tbl_df/tbl/data.frame) #>   ..$ region           : chr [1:4] \"[0,547)\" \"[547,822)\" \"[822,972)\" \"[972,1.1e+03]\" #>   ..$ param_mu         : num [1:4] 35.3 58.1 96.7 155.9 #>   ..$ param_sigma_hatsq: Named num [1:4] 127 372 924 2442 #>   .. ..- attr(*, \"names\")= chr [1:4] \"[0,547)\" \"[547,822)\" \"[822,972)\" \"[972,1.1e+03]\" #>  $ model_params : NULL #>  $ fitted_values: num [1:1096] 35.3 35.3 35.3 35.3 35.3 ... #>  $ model_name   : chr \"meanvar\" #>  - attr(*, \"class\")= chr \"mod_cpt\""},{"path":"https://beanumber.github.io/tidychangepoint/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Benjamin S. Baumer. Author, maintainer. Biviana Marcela Suarez Sierra. Author. Arrigo Coen. Author. Carlos . Taimal. Author. Xueheng Shi. Contributor.","code":""},{"path":"https://beanumber.github.io/tidychangepoint/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Baumer B, Suarez Sierra B, Coen , Taimal C (2024). tidychangepoint: Facilitate Changepoint Detection Analysis Tidy Framework. R package version 0.0.1, https://beanumber.github.io/tidychangepoint/.","code":"@Manual{,   title = {tidychangepoint: Facilitate Changepoint Detection Analysis in a Tidy Framework},   author = {Benjamin S. Baumer and Biviana Marcela {Suarez Sierra} and Arrigo Coen and Carlos A. Taimal},   year = {2024},   note = {R package version 0.0.1},   url = {https://beanumber.github.io/tidychangepoint/}, }"},{"path":[]},{"path":"https://beanumber.github.io/tidychangepoint/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Facilitate Changepoint Detection Analysis in a Tidy Framework","text":"install tidychangepoint: load :","code":"remotes::install_github(\"beanumber/tidychangepoint\") library(tidychangepoint)"},{"path":"https://beanumber.github.io/tidychangepoint/index.html","id":"tidy-methods-for-changepoint-analysis","dir":"","previous_headings":"","what":"Tidy methods for changepoint analysis","title":"Facilitate Changepoint Detection Analysis in a Tidy Framework","text":"tidychangepoint package allows use number algorithms detecting changepoint sets univariate time series common, tidyverse-compliant interface. Currently, algorithms changepoint, wbs, several genetic algorithms made accessible via GA supported. also provides model-fitting procedures commonly-used parametric models, tools computing various penalty functions, graphical diagnostic displays. Changepoint sets computed using segment() function, takes numeric vector coercible ts object, string indicating algorithm wish use. segment() always returns tidycpt object. Various methods available tidycpt objects. example, .ts() returns original data ts object, changepoints() returns set changepoint indices. original time series time labels, can also retrieve information. fitness() function returns value name objective function algorithm used find optimal changepoint set.","code":"x <- segment(CET, method = \"pelt\", minseglen = 3) class(x) ## [1] \"tidycpt\" changepoints(x) ## [1] 237 330 changepoints(x, use_labels = TRUE) ## [1] \"1895-01-01\" \"1988-01-01\" fitness(x) ##     MBIC  ## 643.5292"},{"path":"https://beanumber.github.io/tidychangepoint/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Facilitate Changepoint Detection Analysis in a Tidy Framework","text":"Please read full paper details. cite package, use following information:","code":"citation(\"tidychangepoint\") ## Warning in citation(\"tidychangepoint\"): could not determine year for ## 'tidychangepoint' from package DESCRIPTION file  ## To cite package 'tidychangepoint' in publications use: ##  ##   Baumer B, Suarez Sierra B, Coen A, Taimal C (????). _tidychangepoint: ##   Facilitate Changepoint Detection Analysis in a Tidy Framework_. R ##   package version 0.0.1, ##   <https://beanumber.github.io/tidychangepoint/>. ##  ## A BibTeX entry for LaTeX users is ##  ##   @Manual{, ##     title = {tidychangepoint: Facilitate Changepoint Detection Analysis in a Tidy Framework}, ##     author = {Benjamin S. Baumer and Biviana Marcela {Suarez Sierra} and Arrigo Coen and Carlos A. Taimal}, ##     note = {R package version 0.0.1}, ##     url = {https://beanumber.github.io/tidychangepoint/}, ##   }"},{"path":"https://beanumber.github.io/tidychangepoint/reference/BMDL.html","id":null,"dir":"Reference","previous_headings":"","what":"Bayesian Maximum Descriptive Length — BMDL","title":"Bayesian Maximum Descriptive Length — BMDL","text":"Generic function compute Bayesian Maximum Descriptive Length changepoint detection model.","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/BMDL.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bayesian Maximum Descriptive Length — BMDL","text":"","code":"BMDL(object, ...)  # S3 method for default BMDL(object, ...)  # S3 method for nhpp BMDL(object, ...)"},{"path":"https://beanumber.github.io/tidychangepoint/reference/BMDL.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bayesian Maximum Descriptive Length — BMDL","text":"object object log-likelihood value,    contribution log-likelihood value, can extracted. ... methods generic function require additional    arguments.","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/BMDL.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bayesian Maximum Descriptive Length — BMDL","text":"double vector length 1","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/BMDL.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Bayesian Maximum Descriptive Length — BMDL","text":"Currently, BMDL function defined NHPP model (see fit_nhpp()). Given changepoint set \\(\\tau\\), BMDL : $$    BMDL(\\tau, NHPP(y | \\hat{\\theta}_\\tau) =     P_{MDL}(\\tau) - 2 \\ln{ L_{NHPP}(y | \\hat{\\theta}_\\tau) }     - 2 \\ln{ g(\\hat{\\theta}_\\tau) }  $$ \\(P_{MDL}(\\tau)\\) MDL() penalty.","code":""},{"path":[]},{"path":"https://beanumber.github.io/tidychangepoint/reference/BMDL.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bayesian Maximum Descriptive Length — BMDL","text":"","code":"BMDL(fit_nhpp(DataCPSim, tau = NULL)) #> [1] 1453.906 BMDL(fit_nhpp(DataCPSim, tau = c(365, 830))) #> [1] 1235.144"},{"path":"https://beanumber.github.io/tidychangepoint/reference/CET.html","id":null,"dir":"Reference","previous_headings":"","what":"Hadley Centre Central England Temperature — CET","title":"Hadley Centre Central England Temperature — CET","text":"Mean annual temperatures Central England","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/CET.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hadley Centre Central England Temperature — CET","text":"","code":"CET"},{"path":"https://beanumber.github.io/tidychangepoint/reference/CET.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Hadley Centre Central England Temperature — CET","text":"object class xts (inherits zoo) 362 rows 1 columns.","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/CET.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Hadley Centre Central England Temperature — CET","text":"https://www.metoffice.gov.uk/hadobs/hadcet/","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/CET.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Hadley Centre Central England Temperature — CET","text":"CET time series perhaps longest instrumental record surface temperatures world, commencing 1659 spanning 362 years 2020. CET series benchmark European climate studies, sensitive atmospheric variability North Atlantic (Parker et al. 1992). record previously analyzed long-term changes (Plaut et al. 1995; Harvey Mills 2003; Hillebrand Proietti 2017); however, knowledge, detailed changepoint analysis previously conducted. length CET record affords us opportunity explore variety temperature features.","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/CET.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Hadley Centre Central England Temperature — CET","text":"Shi, et al. (2022, doi:10.1175/JCLI-D-21-0489.1 ), Parker, et al. (1992, doi:10.1002/joc.3370120402 )","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/DataCPSim.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulated time series data — DataCPSim","title":"Simulated time series data — DataCPSim","text":"Randomly-generated time series data, using stats::rlnorm() function. rlnorm_ts_1, one changepoint located 826. rlnorm_ts_2, two changepoints, located 366 731. rlnorm_ts_3, three changepoints, located 548, 823, 973.","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/DataCPSim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulated time series data — DataCPSim","text":"","code":"DataCPSim  rlnorm_ts_1  rlnorm_ts_2  rlnorm_ts_3"},{"path":"https://beanumber.github.io/tidychangepoint/reference/DataCPSim.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Simulated time series data — DataCPSim","text":"object class numeric length 1096. object class ts length 1096. object class ts length 1096. object class ts length 1096.","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/DataCPSim.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulated time series data — DataCPSim","text":"DataCPSim: Simulated time series.","code":""},{"path":[]},{"path":"https://beanumber.github.io/tidychangepoint/reference/DataCPSim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulated time series data — DataCPSim","text":"","code":"plot(rlnorm_ts_1)  plot(rlnorm_ts_2)  plot(rlnorm_ts_3)  changepoints(rlnorm_ts_1) #> [1] 826"},{"path":"https://beanumber.github.io/tidychangepoint/reference/MBIC.html","id":null,"dir":"Reference","previous_headings":"","what":"Modified Bayesian Information Criterion — MBIC","title":"Modified Bayesian Information Criterion — MBIC","text":"Generic function compute Modified Bayesian Information Criterion changepoint detection model.","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/MBIC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modified Bayesian Information Criterion — MBIC","text":"","code":"MBIC(object, ...)  # S3 method for default MBIC(object, ...)  # S3 method for logLik MBIC(object, ...)"},{"path":"https://beanumber.github.io/tidychangepoint/reference/MBIC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Modified Bayesian Information Criterion — MBIC","text":"object object log-likelihood value,    contribution log-likelihood value, can extracted. ... methods generic function require additional    arguments.","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/MBIC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Modified Bayesian Information Criterion — MBIC","text":"double vector length 1","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/MBIC.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Modified Bayesian Information Criterion — MBIC","text":"Zhang Seigmmund (2007) MBIC: doi:10.1111/j.1541-0420.2006.00662.x","code":""},{"path":[]},{"path":"https://beanumber.github.io/tidychangepoint/reference/MDL.html","id":null,"dir":"Reference","previous_headings":"","what":"Maximum Descriptive Length — MDL","title":"Maximum Descriptive Length — MDL","text":"Generic function compute Maximum Descriptive Length changepoint detection model.","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/MDL.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Maximum Descriptive Length — MDL","text":"","code":"MDL(object, ...)  # S3 method for default MDL(object, ...)  # S3 method for logLik MDL(object, ...)"},{"path":"https://beanumber.github.io/tidychangepoint/reference/MDL.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Maximum Descriptive Length — MDL","text":"object object log-likelihood value,    contribution log-likelihood value, can extracted. ... methods generic function require additional    arguments.","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/MDL.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Maximum Descriptive Length — MDL","text":"double vector length 1","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/MDL.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Maximum Descriptive Length — MDL","text":"$$    P_{MDL}(\\tau) = \\frac{(\\theta_\\tau)}{2} \\cdot       \\sum_{j=0}^m \\log{\\left(\\tau_j - \\tau_{j-1} \\right)} + 2 \\ln{m} + \\sum_{j=2}^m \\ln{\\tau_j} +       \\left( 2 + b(\\theta_\\tau) \\right) \\ln{n}   $$ \\((\\theta)\\) number parameters \\(\\theta\\) fit region, \\(b(\\theta)\\) number parameters fit model whole. quantites base::attributes() object returned logLik().","code":""},{"path":[]},{"path":"https://beanumber.github.io/tidychangepoint/reference/MDL.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Maximum Descriptive Length — MDL","text":"","code":"MDL(fit_meanshift_norm_ar1(CET, tau = c(42, 330))) #> [1] 665.0437 MDL(fit_trendshift(CET, tau = c(42, 81, 330))) #> [1] 653.0703"},{"path":"https://beanumber.github.io/tidychangepoint/reference/as.model.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a segmenter to a model object — as.model.tidycpt","title":"Convert a segmenter to a model object — as.model.tidycpt","text":"Convert segmenters models standardized segmenters","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/as.model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a segmenter to a model object — as.model.tidycpt","text":"","code":"# S3 method for tidycpt as.model(object, ...)  # S3 method for tidycpt as.segmenter(object, ...)  as.segmenter(object, ...)  as.seg_cpt(object, ...)  as.model(object, ...)  # S3 method for default as.model(object, ...)  is_model(x, ...)  is_segmenter(object, ...)"},{"path":"https://beanumber.github.io/tidychangepoint/reference/as.model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a segmenter to a model object — as.model.tidycpt","text":"object segmenter object, typically returned segment() ... currently ignored x object, typically returned fit_*()","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/as.model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a segmenter to a model object — as.model.tidycpt","text":".segmenter() returns segmenter object .seg_cpt() returns seg_cpt object .model() returns mod_cpt model object is_model() logical vector length 1 is_segmenter() logical vector length 1","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/as.model.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert a segmenter to a model object — as.model.tidycpt","text":".model.tidycpt() returns model object tidycpt object .segmenter.tidycpt() returns segmenter object tidycpt object .segmenter() returns segmenter tidycpt object .seg_cpt() converts wild-caught segmenter class seg_cpt object .model() converts segmenter object mod_cpt model object is_model() checks see model object implements S3 methods necessary considered model. is_segmenter() checks see segmenter object implements S3 methods necessary considered segmenter.","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/as.model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a segmenter to a model object — as.model.tidycpt","text":"","code":"cpt <- segment(DataCPSim, method = \"ga\", maxiter = 5) as.model(cpt$segmenter) #> List of 6 #>  $ data         : Time-Series [1:1096] from 1 to 1096: 35.5 29 35.6 33 29.5 ... #>  $ tau          : int [1:511] 2 3 4 5 7 8 11 14 17 19 ... #>  $ region_params: tibble [512 × 2] (S3: tbl_df/tbl/data.frame) #>   ..$ region  : chr [1:512] \"[0,2)\" \"[2,3)\" \"[3,4)\" \"[4,5)\" ... #>   ..$ param_mu: num [1:512] 35.5 29 35.6 33 27.5 ... #>  $ model_params : Named num 273 #>   ..- attr(*, \"names\")= chr \"sigma_hatsq\" #>  $ fitted_values: num [1:1096] 35.5 29 35.6 33 27.5 ... #>  $ model_name   : chr \"meanshift_norm\" #>  - attr(*, \"class\")= chr \"mod_cpt\" cpt <- segment(DataCPSim, method = \"ga-coen\", model_fn_args = list(threshold = 80), maxiter = 5) #> Seeding initial population with probability: 0.0191605839416058 as.model(cpt$segmenter)$model_params #> threshold  #>        80  x <- fit_nhpp(CET, tau = 330) is_model(x) #> [1] TRUE x <- segment(CET, method = \"pelt\") is_segmenter(x$segmenter) #> [1] TRUE"},{"path":"https://beanumber.github.io/tidychangepoint/reference/bogota_pm.html","id":null,"dir":"Reference","previous_headings":"","what":"Particulate matter in Bogotá, Colombia — bogota_pm","title":"Particulate matter in Bogotá, Colombia — bogota_pm","text":"Particulate matter less 2.5 microns diameter Bogotá, Colombia. Daily readings 2018-2020 included.","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/bogota_pm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Particulate matter in Bogotá, Colombia — bogota_pm","text":"","code":"bogota_pm"},{"path":"https://beanumber.github.io/tidychangepoint/reference/bogota_pm.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Particulate matter in Bogotá, Colombia — bogota_pm","text":"object class xts (inherits zoo) 1096 rows 1 columns.","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/bogota_pm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Particulate matter in Bogotá, Colombia — bogota_pm","text":"","code":"class(bogota_pm) #> [1] \"xts\" \"zoo\""},{"path":"https://beanumber.github.io/tidychangepoint/reference/build_gabin_population.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize populations in genetic algorithms — build_gabin_population","title":"Initialize populations in genetic algorithms — build_gabin_population","text":"Build initial population set genetic algorithms","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/build_gabin_population.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize populations in genetic algorithms — build_gabin_population","text":"","code":"build_gabin_population(x, ...)  log_gabin_population(x, ...)"},{"path":"https://beanumber.github.io/tidychangepoint/reference/build_gabin_population.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize populations in genetic algorithms — build_gabin_population","text":"x numeric vector coercible stats::ts object ... arguments passed methods","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/build_gabin_population.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize populations in genetic algorithms — build_gabin_population","text":"function can passed population argument GA::ga() (segment_ga())","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/build_gabin_population.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Initialize populations in genetic algorithms — build_gabin_population","text":"Genetic algorithms require method randomly generating initial populations (.e., first generation). default method used GA::ga() changepoint detection usually GA::gabin_Population(), selects candidate changepoints uniformly random probability 0.5. leads initial population excessively large candidate changepoint sets (order \\(n/2\\)), makes genetic algorithm slow. build_gabin_population() takes ts object runs several fast changepoint detection algorithms , sets initial probability 3 times average value size changepoint sets returned algorithms. conservative guess likely size optimal changepoint set. log_gabin_population() takes ts object sets initial probability natural logarithm length time series.","code":""},{"path":[]},{"path":"https://beanumber.github.io/tidychangepoint/reference/build_gabin_population.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialize populations in genetic algorithms — build_gabin_population","text":"","code":"if (FALSE) { f <- build_gabin_population(CET) segment(CET, method = \"ga\", population = f) } f <- log_gabin_population(CET) segment(CET, method = \"ga\", population = f, maxiter = 10) #> Seeding initial population with probability: 0.0162752602536624 #> A tidycpt object #> An object of class \"ga\" #>  #> Call: #> GA::ga(type = \"binary\", fitness = obj_fun, nBits = n, population = ..1,     maxiter = 10) #>  #> Available slots: #>  [1] \"data\"          \"model_fn_args\" \"call\"          \"type\"          #>  [5] \"lower\"         \"upper\"         \"nBits\"         \"names\"         #>  [9] \"popSize\"       \"iter\"          \"run\"           \"maxiter\"       #> [13] \"suggestions\"   \"population\"    \"elitism\"       \"pcrossover\"    #> [17] \"pmutation\"     \"optim\"         \"fitness\"       \"summary\"       #> [21] \"bestSol\"       \"fitnessValue\"  \"solution\"      #> List of 6 #>  $ data         : Time-Series [1:362] from 1 to 362: 8.87 9.1 9.78 9.52 8.63 9.34 8.29 9.86 8.52 9.51 ... #>  $ tau          : int [1:4] 47 131 273 331 #>  $ region_params: tibble [5 × 2] (S3: tbl_df/tbl/data.frame) #>   ..$ region  : chr [1:5] \"[0,47)\" \"[47,131)\" \"[131,273)\" \"[273,331)\" ... #>   ..$ param_mu: num [1:5] 8.71 9.21 9.17 9.53 10.27 #>  $ model_params : Named num 0.317 #>   ..- attr(*, \"names\")= chr \"sigma_hatsq\" #>  $ fitted_values: num [1:362] 8.71 8.71 8.71 8.71 8.71 ... #>  $ model_name   : chr \"meanshift_norm\" #>  - attr(*, \"class\")= chr \"mod_cpt\""},{"path":"https://beanumber.github.io/tidychangepoint/reference/changepoints.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract changepoints — changepoints.mod_cpt","title":"Extract changepoints — changepoints.mod_cpt","text":"confused wbs::changepoints(), returns different information.","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/changepoints.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract changepoints — changepoints.mod_cpt","text":"","code":"# S3 method for mod_cpt changepoints(x, ...)  # S3 method for seg_basket changepoints(x, ...)  # S3 method for seg_cpt changepoints(x, ...)  # S3 method for tidycpt changepoints(x, use_labels = FALSE, ...)  changepoints(x, ...)  # S3 method for default changepoints(x, ...)  seg_params(x, ...)  # S3 method for ga changepoints(x, ...)  # S3 method for cpt changepoints(x, ...)  # S3 method for wbs changepoints(x, ...)"},{"path":"https://beanumber.github.io/tidychangepoint/reference/changepoints.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract changepoints — changepoints.mod_cpt","text":"x tidycpt object ... arguments passed methods use_labels return time labels changepoints instead indices.","code":""},{"path":[]},{"path":"https://beanumber.github.io/tidychangepoint/reference/changepoints.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract changepoints — changepoints.mod_cpt","text":"","code":"cpts <- segment(DataCPSim, method = \"ga\", maxiter = 5) changepoints(cpts$segmenter) #>    x4    x6   x11   x13   x14   x16   x17   x21   x23   x28   x29   x32   x38  #>     4     6    11    13    14    16    17    21    23    28    29    32    38  #>   x41   x42   x43   x44   x47   x52   x53   x60   x61   x62   x63   x64   x67  #>    41    42    43    44    47    52    53    60    61    62    63    64    67  #>   x68   x69   x70   x71   x72   x74   x75   x76   x79   x87   x89   x92   x95  #>    68    69    70    71    72    74    75    76    79    87    89    92    95  #>   x96  x107  x108  x111  x113  x114  x116  x118  x124  x128  x129  x130  x131  #>    96   107   108   111   113   114   116   118   124   128   129   130   131  #>  x132  x137  x139  x140  x143  x144  x145  x151  x152  x154  x156  x158  x160  #>   132   137   139   140   143   144   145   151   152   154   156   158   160  #>  x161  x162  x163  x165  x167  x168  x169  x171  x172  x173  x176  x177  x178  #>   161   162   163   165   167   168   169   171   172   173   176   177   178  #>  x180  x181  x192  x194  x195  x196  x201  x202  x204  x205  x208  x216  x217  #>   180   181   192   194   195   196   201   202   204   205   208   216   217  #>  x218  x221  x222  x223  x224  x227  x230  x232  x237  x241  x242  x244  x247  #>   218   221   222   223   224   227   230   232   237   241   242   244   247  #>  x248  x250  x254  x257  x258  x260  x261  x268  x270  x273  x274  x275  x276  #>   248   250   254   257   258   260   261   268   270   273   274   275   276  #>  x278  x279  x281  x282  x283  x286  x287  x288  x290  x291  x292  x293  x294  #>   278   279   281   282   283   286   287   288   290   291   292   293   294  #>  x297  x298  x300  x302  x304  x307  x309  x310  x312  x315  x318  x319  x320  #>   297   298   300   302   304   307   309   310   312   315   318   319   320  #>  x326  x329  x331  x332  x334  x336  x339  x342  x343  x347  x350  x357  x358  #>   326   329   331   332   334   336   339   342   343   347   350   357   358  #>  x360  x361  x364  x365  x366  x368  x369  x370  x372  x373  x375  x377  x379  #>   360   361   364   365   366   368   369   370   372   373   375   377   379  #>  x380  x383  x385  x389  x390  x391  x392  x395  x398  x399  x401  x403  x406  #>   380   383   385   389   390   391   392   395   398   399   401   403   406  #>  x408  x409  x411  x412  x413  x414  x420  x421  x422  x423  x426  x428  x429  #>   408   409   411   412   413   414   420   421   422   423   426   428   429  #>  x430  x431  x432  x435  x438  x439  x440  x441  x445  x449  x451  x455  x457  #>   430   431   432   435   438   439   440   441   445   449   451   455   457  #>  x465  x466  x468  x469  x471  x473  x474  x475  x477  x479  x480  x483  x485  #>   465   466   468   469   471   473   474   475   477   479   480   483   485  #>  x486  x487  x489  x491  x492  x495  x496  x497  x498  x499  x502  x503  x504  #>   486   487   489   491   492   495   496   497   498   499   502   503   504  #>  x506  x512  x514  x517  x518  x520  x521  x523  x526  x527  x529  x534  x535  #>   506   512   514   517   518   520   521   523   526   527   529   534   535  #>  x536  x537  x539  x542  x543  x546  x551  x552  x553  x557  x560  x561  x564  #>   536   537   539   542   543   546   551   552   553   557   560   561   564  #>  x565  x567  x570  x572  x577  x579  x582  x583  x584  x587  x591  x592  x593  #>   565   567   570   572   577   579   582   583   584   587   591   592   593  #>  x594  x598  x599  x601  x603  x608  x613  x614  x617  x619  x620  x621  x623  #>   594   598   599   601   603   608   613   614   617   619   620   621   623  #>  x627  x630  x631  x634  x637  x639  x641  x642  x644  x649  x654  x656  x658  #>   627   630   631   634   637   639   641   642   644   649   654   656   658  #>  x659  x663  x664  x667  x669  x671  x673  x674  x675  x679  x680  x681  x685  #>   659   663   664   667   669   671   673   674   675   679   680   681   685  #>  x687  x690  x691  x693  x694  x699  x700  x702  x704  x705  x709  x713  x716  #>   687   690   691   693   694   699   700   702   704   705   709   713   716  #>  x718  x719  x724  x727  x729  x731  x732  x734  x735  x737  x738  x742  x743  #>   718   719   724   727   729   731   732   734   735   737   738   742   743  #>  x747  x749  x750  x751  x756  x759  x766  x768  x769  x778  x779  x780  x781  #>   747   749   750   751   756   759   766   768   769   778   779   780   781  #>  x782  x783  x784  x788  x790  x791  x794  x795  x796  x806  x807  x809  x810  #>   782   783   784   788   790   791   794   795   796   806   807   809   810  #>  x811  x812  x813  x815  x816  x818  x819  x820  x821  x822  x823  x828  x829  #>   811   812   813   815   816   818   819   820   821   822   823   828   829  #>  x830  x832  x835  x838  x839  x842  x846  x849  x850  x853  x854  x855  x856  #>   830   832   835   838   839   842   846   849   850   853   854   855   856  #>  x858  x861  x866  x867  x869  x873  x874  x876  x878  x881  x885  x886  x889  #>   858   861   866   867   869   873   874   876   878   881   885   886   889  #>  x890  x891  x892  x893  x898  x899  x902  x905  x907  x909  x910  x912  x915  #>   890   891   892   893   898   899   902   905   907   909   910   912   915  #>  x918  x925  x928  x929  x932  x934  x937  x938  x939  x940  x944  x945  x948  #>   918   925   928   929   932   934   937   938   939   940   944   945   948  #>  x952  x953  x955  x958  x959  x963  x966  x969  x974  x975  x976  x977  x979  #>   952   953   955   958   959   963   966   969   974   975   976   977   979  #>  x981  x985  x988  x989  x990  x997  x998 x1000 x1003 x1005 x1006 x1008 x1009  #>   981   985   988   989   990   997   998  1000  1003  1005  1006  1008  1009  #> x1011 x1012 x1013 x1014 x1016 x1017 x1018 x1030 x1031 x1037 x1041 x1043 x1044  #>  1011  1012  1013  1014  1016  1017  1018  1030  1031  1037  1041  1043  1044  #> x1046 x1049 x1051 x1052 x1053 x1054 x1058 x1062 x1063 x1067 x1069 x1070 x1076  #>  1046  1049  1051  1052  1053  1054  1058  1062  1063  1067  1069  1070  1076  #> x1082 x1084 x1089 x1091 x1093 x1094  #>  1082  1084  1089  1091  1093  1094   cpts <- segment(DataCPSim, method = \"wbs\") changepoints(cpts$segmenter) #>  [1]  547  822  939  972  981  982  997  999 1031 1032 1040 1041 1063 1066"},{"path":"https://beanumber.github.io/tidychangepoint/reference/class-mod_cpt.html","id":null,"dir":"Reference","previous_headings":"","what":"Base class for changepoint models — class-mod_cpt","title":"Base class for changepoint models — class-mod_cpt","text":"Create changepoint detection model objects","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/class-mod_cpt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Base class for changepoint models — class-mod_cpt","text":"","code":"new_mod_cpt(   x = numeric(),   tau = integer(),   region_params = tibble::tibble(),   model_params = double(),   fitted_values = double(),   model_name = character(),   ... )  validate_mod_cpt(x)  mod_cpt(x, ...)"},{"path":"https://beanumber.github.io/tidychangepoint/reference/class-mod_cpt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Base class for changepoint models — class-mod_cpt","text":"x numeric vector coercible ts object tau indices changepoint set region_params tibble::tibble() one row region defined changepoint set tau. variable represents parameter estimated region. model_params numeric vector parameters estimated model across entire data set (just region). fitted_values Fitted values returned model original data set. model_name character vector giving model's name. ... currently ignored","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/class-mod_cpt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Base class for changepoint models — class-mod_cpt","text":"mod_cpt object","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/class-mod_cpt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Base class for changepoint models — class-mod_cpt","text":"Changepoint detection models know created, data set, optimal changepoint set found, parameters fit model. Methods various generic reporting functions provided.","code":""},{"path":[]},{"path":"https://beanumber.github.io/tidychangepoint/reference/class-mod_cpt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Base class for changepoint models — class-mod_cpt","text":"","code":"cpt <- mod_cpt(CET) str(cpt) #> List of 6 #>  $ data         : Time-Series [1:362] from 1 to 362: 8.87 9.1 9.78 9.52 8.63 9.34 8.29 9.86 8.52 9.51 ... #>  $ tau          : int(0)  #>  $ region_params: tibble [0 × 0] (S3: tbl_df/tbl/data.frame) #>  Named list() #>  $ model_params : num(0)  #>  $ fitted_values: num(0)  #>  $ model_name   : chr(0)  #>  - attr(*, \"class\")= chr \"mod_cpt\" as.ts(cpt) #> Time Series: #> Start = 1  #> End = 362  #> Frequency = 1  #>   [1]  8.87  9.10  9.78  9.52  8.63  9.34  8.29  9.86  8.52  9.51  9.02  8.96 #>  [13]  9.08  8.82  8.38  8.12  7.88  8.84  8.78  8.45  8.76  8.89  8.75  9.05 #>  [25]  8.49  7.95  9.16 10.15  8.99  7.86  8.56  8.94  8.17  7.73  8.47  7.67 #>  [37]  7.29  8.52  8.05  7.67  8.83  8.60  8.75  9.31  9.09  9.07  8.75  9.82 #>  [49]  9.41  9.68  8.74  9.49  9.42  9.14  8.64  9.44  9.44  8.38  9.04  9.29 #>  [61]  9.49  9.10  8.91  9.37  9.80  9.28  8.69  9.36  9.97  9.54  9.29 10.07 #>  [73]  9.90  9.69 10.50  9.82  9.57 10.33  9.95  9.84  9.21  6.86  9.32  8.38 #>  [85]  9.83  8.80  8.85  8.66  9.84  8.79  9.49  9.71  8.47  9.21  9.12  8.87 #>  [97]  8.58  8.78  8.97  8.98 10.03  9.85 10.02  9.61  8.95  8.73  8.55  8.66 #> [109]  8.70  8.95  8.81  8.53  8.58  9.17  9.29  9.09 10.11  9.02  9.12  9.23 #> [121] 10.41  9.12 10.23  8.05  9.31  7.85  8.58  8.27  9.31  9.22  8.93  9.46 #> [133]  9.29  9.20  9.13  9.90  8.71  9.02  9.03  9.63  7.92  9.28  9.63  8.98 #> [145]  9.09  9.59  9.00  9.84  8.69  8.86  8.96  8.78  9.69  8.21  8.72  7.78 #> [157]  9.07  7.89  8.89  9.88  9.27  8.56  9.55 10.06  8.40  9.32  9.76 10.09 #> [169]  9.51 10.32  8.18  8.72 10.13  9.49  9.52 10.51  9.57  8.88  8.85  8.10 #> [181]  8.71  8.52  8.75  9.25  9.10  8.60  8.30 10.16  9.26  9.42  9.32  9.10 #> [193]  9.18  9.82  8.41  9.34  8.09  9.10 10.11  9.16  9.64  7.92  9.15  9.21 #> [205]  9.69  8.87  9.72  9.68  9.03 10.40  9.62  9.02  9.07  9.76  9.03  9.33 #> [217]  9.48  9.53  9.19  9.26  7.44  9.10  8.58  9.47  9.04  9.85  8.58  8.74 #> [229]  8.30  8.24  9.02  8.76  8.51  8.18 10.01  9.32  8.70  9.34  9.44 10.10 #> [241]  9.71  9.60  9.15  8.88  9.33  9.02  9.16  9.47  8.88  9.28  8.59  9.20 #> [253] 10.09  9.37  9.83  9.90  8.96  9.20  8.55  9.53  8.53  9.58 10.51  8.70 #> [265]  9.11  9.29  9.20  9.74  9.24  9.59  9.06  9.47  9.02  9.41  9.86 10.03 #> [277]  9.74  9.35  9.59 10.21  9.70  9.06  9.12  9.11 10.05  9.59 10.29  9.46 #> [289]  9.65 10.03 10.64  9.43  9.30  9.12  9.87  9.26  9.33  8.87 10.06  9.45 #> [301] 10.52  9.75  9.95  8.61  8.52  9.48  8.99  9.47  9.64  9.32  9.32  9.60 #> [313]  9.72  9.22  9.57  9.64 10.04 10.10  9.51  9.47  8.85  9.42  9.28  9.86 #> [325] 10.10  9.75  8.90  8.81  9.08  9.80 10.54 10.65  9.58  9.87  9.52 10.29 #> [337] 10.55  9.22 10.56 10.35 10.65 10.32  9.97 10.63 10.54 10.50 10.48 10.87 #> [349] 10.50  9.97 10.14  8.86 10.72  9.72  9.61 10.95 10.31 10.34 10.58 10.68 #> [361] 10.34 10.76 changepoints(cpt) #> integer(0)"},{"path":"https://beanumber.github.io/tidychangepoint/reference/compare_models.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare various models for a give changepoint set — compare_models","title":"Compare various models for a give changepoint set — compare_models","text":"Compare various models give changepoint set","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/compare_models.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare various models for a give changepoint set — compare_models","text":"","code":"compare_models(x, ...)  compare_algorithms(x, ...)"},{"path":"https://beanumber.github.io/tidychangepoint/reference/compare_models.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare various models for a give changepoint set — compare_models","text":"x tidycpt object ... currently ignored","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/cpt-generics.html","id":null,"dir":"Reference","previous_headings":"","what":"Compatibility layer for changepoint — cpt-generics","title":"Compatibility layer for changepoint — cpt-generics","text":"Methods generic functions applied cpt objects","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/cpt-generics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compatibility layer for changepoint — cpt-generics","text":"","code":"# S3 method for cpt as.seg_cpt(object, ...)  # S3 method for cpt as.ts(x, ...)  # S3 method for cpt logLik(object, ...)  # S3 method for cpt nobs(object, ...)  # S3 method for cpt seg_params(x, ...)"},{"path":"https://beanumber.github.io/tidychangepoint/reference/cpt-generics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compatibility layer for changepoint — cpt-generics","text":"object cpt object. ... arguments passed methods x cpt object returned changepoint::cpt.meanvar()","code":""},{"path":[]},{"path":"https://beanumber.github.io/tidychangepoint/reference/cpt-generics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compatibility layer for changepoint — cpt-generics","text":"","code":"cpts <- segment(DataCPSim, method = \"pelt\") x <- as.segmenter(cpts) class(x) #> [1] \"cpt\" #> attr(,\"package\") #> [1] \"changepoint\" as.seg_cpt(x) #> List of 8 #>  $ data        : Time-Series [1:1096] from 1 to 1096: 35.5 29 35.6 33 29.5 ... #>  $ pkg         : chr \"changepoint\" #>  $ algorithm   : chr \"PELT\" #>  $ changepoints: int [1:3] 547 822 972 #>  $ fitness     : Named num 9403 #>   ..- attr(*, \"names\")= chr \"MBIC\" #>  $ seg_params  :List of 1 #>   ..$ :List of 3 #>   .. ..$ test_stat     : chr \"Normal\" #>   .. ..$ num_cpts_max  : num Inf #>   .. ..$ min_seg_length: num 2 #>  $ model_name  : chr \"meanvar\" #>  $ penalty     : chr \"MBIC\" #>  - attr(*, \"class\")= chr \"seg_cpt\" as.ts(x)  #> Time Series: #> Start = 1  #> End = 1096  #> Frequency = 1  #>    [1]  35.50961  29.00292  35.63508  32.98452  29.53557  25.40781  28.82497 #>    [8]  50.31157  24.93185  58.88063  30.35777  33.66315  32.58653  42.78788 #>   [15]  45.23963  23.66417  20.00954  31.64746  34.65507  68.49028  43.53948 #>   [22]  25.29938  57.19244  39.51995  23.79025  27.81451  42.00712  36.09812 #>   [29]  32.74664  34.73679  60.20919  55.52211  33.92043  32.48948  22.66494 #>   [36]  24.16119  27.05582  16.09789  31.69439  27.22202  20.64027  33.97673 #>   [43]  46.71000  25.28389  24.88207  41.75347  36.50448  35.98297  31.39612 #>   [50]  44.14153  67.82557  26.81619  27.55292  30.77449  51.17371  51.34317 #>   [57]  23.10056  22.92962  29.39409  73.67531  23.46017  35.36286  29.45083 #>   [64]  54.18062  25.04895  27.47914  51.41767  32.30387  43.17916  30.11288 #>   [71]  22.45535  33.70278  34.16720  44.64931  22.60994  50.26498  50.28394 #>   [78]  33.24944  38.73890  36.75336  52.38881  36.62906  16.68155  35.12389 #>   [85]  35.89239  61.81050  47.85419  30.26446  36.93150  54.81053  30.32479 #>   [92]  37.46579  49.93442  46.01734  24.86685  35.88435  42.25720  37.78741 #>   [99]  46.26335  38.52976  47.99867  44.28395  51.05976  50.99393  36.01026 #>  [106]  37.44409  16.77029  31.05583  22.40344  27.22149  28.31583  58.06805 #>  [113]  38.30690  47.26490  31.55811  47.63268  23.38334  33.30157  46.75618 #>  [120]  30.46511  23.17060  31.52724  38.55479  35.54940  49.63486  38.85458 #>  [127]  35.80205  24.50227  20.49025  31.59546  33.84992  30.02572  23.84156 #>  [134]  27.92167  28.04857  55.54324  23.82133  46.27102  35.95369  47.65766 #>  [141]  31.37265  37.43892  26.73598  39.78209  37.23990  38.69749  25.74961 #>  [148]  15.00954  41.03282  35.55822  28.20253  34.25572  36.72560  25.87219 #>  [155]  34.25647  41.05718  45.99951  35.09617  30.10936  56.29692  21.62607 #>  [162]  32.16878  48.08144  27.56512  24.86829  23.20973  23.35380  24.87480 #>  [169]  41.98302  43.00026  42.37708  57.59545  28.58172  35.77870  28.82814 #>  [176]  35.31054  45.07452  19.92057  49.94871  42.05699  45.69919  40.55247 #>  [183]  28.77050  34.25098  39.57524  27.14581  44.69057  36.14965  49.50564 #>  [190]  49.79043  17.99559  39.65697  44.97010  18.31935  31.24522  31.07475 #>  [197]  21.61906  40.06484  34.99030  21.94425  37.44403  40.21178  38.23743 #>  [204]  31.80890  34.61897  47.81524  34.58307  30.49509  45.29616  49.07757 #>  [211]  24.17640  35.64875  17.63070  21.61867  32.29813  26.41488  28.31542 #>  [218]  25.02318  20.23520  28.13247  63.69313  42.52417  29.03129  54.03181 #>  [225]  25.60167  66.22389  26.02854  43.94607  39.26708  21.90635  33.10292 #>  [232]  31.36953  68.74632  49.57971  36.77692  62.23430  33.17239  34.70213 #>  [239]  29.33086  40.40664  20.51693  56.48982  47.57652  18.78920  39.83695 #>  [246]  23.57444  32.90584  23.97282  29.16350  33.94278  33.32760  40.39087 #>  [253]  37.08789  34.55488  28.07540  34.55889  32.50873  30.26050  31.61021 #>  [260]  29.22609  21.66017  39.99861  31.54268  54.66244  28.83481  50.43102 #>  [267]  41.57023  36.52691  41.74322  29.88869  65.63664  28.92781  31.62743 #>  [274]  60.02248  23.41874  30.41566  49.28914  30.75073  41.08489  35.95343 #>  [281]  26.30653  30.42233  35.58619  27.11696  41.07739  32.16801  54.22658 #>  [288]  30.58481  32.75808  40.14170  38.59850  34.62828  26.92407  32.65613 #>  [295]  21.12857  21.76199  31.72514  32.81883  39.57492  29.56246  26.52171 #>  [302]  33.16808  30.46846  26.71148  20.12177  28.85316  25.85809  73.07025 #>  [309]  50.11722  55.60337  42.62562  53.62811  40.37492  36.09093  54.15097 #>  [316]  52.48111  28.21508  44.33563  15.14660  31.77283  28.02836  42.85488 #>  [323]  30.07936  32.42728  33.91356  17.04858  29.01530  31.04799  24.28621 #>  [330]  35.50456  45.96182  21.99371  38.45540  25.78633  45.07985  27.04933 #>  [337]  50.03548  29.92024  26.27057  24.47919  59.13347  35.87683  42.14550 #>  [344]  29.36456  44.58931  30.97851  21.83860  46.47922  39.71751  20.74531 #>  [351]  21.96494  27.95186  40.64999  65.79466  34.95445  33.87721  27.41981 #>  [358]  19.67562  39.39982  45.69528  22.18879  37.54553  23.15847  28.45508 #>  [365]  25.23477  33.00227  27.16574  34.19212  38.82416  17.26278  38.40626 #>  [372]  57.01508  40.28032  27.15082  32.21021  41.59108  44.75365  31.57659 #>  [379]  44.49800  41.11233  35.23455  24.47634  45.13415  37.24519  42.85021 #>  [386]  32.84645  37.01077  38.96790  40.08106  43.99265  32.24746  27.24075 #>  [393]  31.66613  34.98403  27.29397  34.99001  31.25752  30.07230  27.18477 #>  [400]  37.36462  34.40921  27.16085  37.36703  47.98335  43.48091  23.31231 #>  [407]  20.68531  40.72063  13.66989  27.99689  25.61063  27.89089  17.93238 #>  [414]  23.25505  69.87353  20.53952  38.76444  45.53784  43.99368  25.86236 #>  [421]  23.02465  26.68788  51.99475  31.49945  39.98303  25.96329  18.68290 #>  [428]  45.39740  41.85522  40.88774  33.13019  36.51401  43.93668  28.72223 #>  [435]  17.36850  29.80030  29.36764  33.21636  30.98314  44.00905  49.96474 #>  [442]  32.63317  34.95938  42.09920  25.98961  26.13540  40.91752  27.13926 #>  [449]  23.93415  44.34438  24.80069  39.56627  34.17161  29.33848  51.51685 #>  [456]  38.10154  17.89906  29.84155  20.73680  17.94649  20.14526  30.60828 #>  [463]  37.05229  26.99159  48.47064  29.63704  30.29811  29.44919  50.20743 #>  [470]  25.22852  19.31610  49.49408  31.13921  45.04409  26.36500  21.37141 #>  [477]  33.60464  39.82629  23.44417  50.85233  35.55273  31.42400  52.78349 #>  [484]  46.42078  32.84158  41.58214  37.57874  92.79539  21.87917  35.86701 #>  [491]  44.63170  23.67373  49.57926  37.82632  28.51937  54.19448  25.42921 #>  [498]  31.42047  45.75800  26.14005  32.43037  30.31998  60.34780  35.38384 #>  [505]  17.65934  49.95322  48.97623  24.37608  62.05997  17.90258  35.04199 #>  [512]  25.02686  37.13100  27.42116  46.56513  14.44667  18.13457  30.41839 #>  [519]  40.06058  33.26711  58.99535  23.18483  36.67044  24.95331  27.19064 #>  [526]  26.76947  37.48431  37.13503  22.80870  32.98376  16.45626  25.22453 #>  [533]  35.59700  24.01433  58.24541  34.09432  31.09085  29.28524  20.65437 #>  [540]  24.52000  61.00638  33.59970  19.62836  30.89483  27.49646  47.74031 #>  [547]  38.48854  79.28284  49.83587  41.20827  60.84168  58.74430  73.74234 #>  [554]  62.99021  44.73661  66.14946  78.63431  58.85001  56.29965  49.76806 #>  [561]  66.31184  77.24626  30.20323  34.36305  40.14230 115.76308  53.35118 #>  [568]  56.61291  54.02821  30.86656  64.91494  51.47610  58.02405  46.19877 #>  [575]  75.46288  62.38693  62.12430  29.65914  48.83256  48.45711  87.84555 #>  [582]  48.89591  79.45862  45.43495  61.17216  44.15376  40.81283  28.66775 #>  [589] 100.81542  80.80345  59.82787  60.46746  61.44131  33.23726  52.19624 #>  [596]  83.51128  53.55938  63.91426  43.91224  55.36213  54.68760  56.36276 #>  [603]  50.26803  63.36135  71.84053  44.01963  54.90876  48.05082  73.33604 #>  [610]  40.86609  53.14413  59.74683  74.13609  72.72819  73.80368  46.35780 #>  [617]  39.46049  69.37131  69.23278  39.48316  65.63175  50.51306  79.59284 #>  [624]  43.27989  29.25963  53.94132  47.30325  89.88726  64.49022  53.12747 #>  [631]  51.61317  47.72412 102.46424  79.80996  51.62739  45.94677  44.20380 #>  [638]  62.47154  56.71323  45.20940  33.56516  93.76083  56.27748  43.03061 #>  [645]  86.12136  66.81985 103.73717  45.81972  66.39085  43.21773  56.16747 #>  [652]  59.28413  50.73493  65.26301 107.46498  68.39817  77.53655  63.00234 #>  [659] 100.37694  50.08347  51.31859  47.84582  73.28803  56.60291  49.47953 #>  [666]  74.14721  51.88331  72.97605  37.36928  50.55296  94.49818  85.63369 #>  [673]  47.21940  51.29463  30.87699  40.99069  65.22233  84.18339  36.97547 #>  [680]  67.67693 130.27515  56.50564  52.08214  36.62894  50.17403  43.98132 #>  [687]  63.78818  69.71901  58.66280  34.25625  40.01212  38.51369  31.93027 #>  [694]  70.08009  60.78508  51.19670  65.45439  70.13630  38.38639  46.42615 #>  [701]  59.55314  49.09690  60.75484  66.66783  70.41840  77.79466  57.57120 #>  [708]  66.27876  40.41878  51.19402  90.55426  28.21335  67.71025  52.72485 #>  [715]  37.34428  72.43783  92.29608  55.59297  69.66448  58.30077  50.26778 #>  [722]  74.61613  50.92561  51.97960  99.50324  47.12665  87.80435 119.15289 #>  [729]  96.67512  27.20912  42.35955  51.36019  66.15466  50.99965  31.33727 #>  [736]  29.62981  55.37496  72.04834  44.82771  46.57539  64.62869  38.82131 #>  [743]  53.86127  30.62108  27.37893  85.39840  55.85290  64.89730  94.68730 #>  [750]  35.15146  37.51919  45.72001  89.69830  46.13428  66.35095  37.41977 #>  [757]  43.10677  40.13555  43.13188  24.73451  76.52571  36.36566  71.17790 #>  [764]  56.44084  63.19831  38.86127  56.54947  83.05808  41.66112  60.14119 #>  [771]  73.36839  36.83335  46.99687  68.72470  48.02621  37.04922  67.67630 #>  [778]  46.78206  43.38829  79.76107  43.42811  34.89142  46.70848  85.92108 #>  [785]  65.54841  39.49996  41.09837  47.97916  62.31907  75.42977  83.27070 #>  [792]  73.13176  58.56810  75.03824  37.08341  57.11212  62.88590  80.01578 #>  [799]  31.43220  50.27634  20.52318  57.18749  65.93147  42.64495  60.78448 #>  [806]  42.12619  44.69412  58.64844  68.76875 163.36185  59.30573  44.16434 #>  [813]  74.02857  42.16594  47.80402  46.06946  68.13544  58.27459  44.44837 #>  [820]  49.71347  41.92370  65.10552 190.42879 100.55114  84.73240  95.19440 #>  [827]  62.62765  81.34105  62.84927 119.41128  97.69586 103.24047 132.04779 #>  [834]  63.94897  61.11686  68.83021  80.70128 118.36174  69.88491  75.67939 #>  [841]  97.87433  84.47204 167.57416 119.33953 112.87803  94.60966  54.52644 #>  [848] 134.89541  80.76840 100.86500 125.36064  80.85360  81.27602 102.14881 #>  [855]  62.87013  89.81105  90.54166  77.87923 154.26053 104.44530  89.99370 #>  [862] 137.11783 108.63313  81.65888  91.76187 153.53548  93.17887 131.28943 #>  [869]  58.95745  63.59264  86.73104 159.01308  56.48464  53.76414  79.36095 #>  [876] 104.17268  82.69108  75.47191  80.10494 123.34176 117.11018  82.67987 #>  [883]  87.24288  77.92377 105.19438  75.47461  73.26672 103.96131  88.69445 #>  [890]  67.40834 115.24510 107.64339  93.11673 129.87959 126.03289 118.21727 #>  [897] 101.24318  85.84310  83.24171  94.37437  95.52714  58.18705  70.93290 #>  [904] 135.64519 122.17646  47.94730  81.90610  71.29312  59.56557  90.96883 #>  [911] 105.27981  68.10784  62.24482 118.12494  89.29744 104.93346  54.31292 #>  [918] 118.22755  85.99992  68.28882 116.87775  59.89081  88.51994 124.96078 #>  [925]  48.99528  83.42296  39.21350 104.91602  96.76956 112.59752  71.12703 #>  [932]  88.73937  68.98548  70.70640  93.68761 131.72255  82.59086  81.56980 #>  [939]  80.12171 160.72231 130.68852  61.65840 175.64769 103.14938 133.32521 #>  [946] 160.15746  97.61800 119.62046 125.04584 120.67301 110.96952  62.16252 #>  [953] 215.10540  81.98616 110.52191  53.11782  83.00635  59.01162 167.43096 #>  [960] 146.43115 136.73301  93.53995  92.63548  98.56852  59.88143 101.45146 #>  [967] 102.84065 115.38549 110.87331  96.65850  70.26512  73.19904 204.44288 #>  [974] 120.52524 148.47584 176.52242  72.50633  98.01507  85.07589 122.09749 #>  [981] 173.47087 272.06243 114.84247 194.43547 182.95500  99.70758 155.32184 #>  [988] 234.90205 149.08372 129.43951  92.17400 150.30666 127.34289  95.56536 #>  [995] 183.85856 173.20963 119.36203 298.97556 239.90785 149.72990 145.83624 #> [1002] 199.97769 221.71715 124.50443 127.57657 126.63670 224.84161 193.52027 #> [1009]  67.17684 193.24399 163.77183 115.04808 139.80491 194.08049 142.56183 #> [1016] 150.05278 112.32713 229.27074 123.95988 146.80726 185.69923 111.44768 #> [1023] 148.97687 122.53709 127.37003  92.55487 106.25934 151.61132 166.55049 #> [1030] 166.27216  89.84812 285.64838 210.83361 119.86280 120.26534 166.67314 #> [1037] 128.77576 128.26908 203.90985 124.66021 285.09853 111.19870 185.07644 #> [1044]  88.79945  97.17543 121.60783 183.18550 113.42228 234.66441 148.81920 #> [1051] 127.67544 144.30028 183.15017 180.80073 212.84778  81.80066 156.28369 #> [1058] 217.85070 136.70053 196.65904 155.49179 120.33784 123.21350 293.16047 #> [1065] 141.29326 286.30265 137.11341 191.99534 155.88733 232.83108 141.37831 #> [1072] 114.62536 154.08698 129.56200 197.71852 143.31929 155.63173 166.92790 #> [1079] 151.48311 133.67364 183.79864 134.72402 108.41123 113.01052 145.28928 #> [1086]  85.79995 220.96699 127.18015 215.14311 190.93505 156.44133 164.06449 #> [1093] 164.81190  85.39927 179.14410 135.09159 changepoints(x) #> [1] 547 822 972 fitness(x) #>     MBIC  #> 9403.391  logLik(x) #> 'log Lik.' -4687.697 (df=4) model_name(x) #> [1] \"meanvar\" model_args(x) #> NULL nobs(x) #> [1] 1096 seg_params(x) #> $test_stat #> [1] \"Normal\" #>  #> $num_cpts_max #> [1] Inf #>  #> $min_seg_length #> [1] 2 #>"},{"path":"https://beanumber.github.io/tidychangepoint/reference/diagnose.html","id":null,"dir":"Reference","previous_headings":"","what":"Diagnose the fit of a segmented time series — diagnose.mod_cpt","title":"Diagnose the fit of a segmented time series — diagnose.mod_cpt","text":"Diagnose fit segmented time series","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/diagnose.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Diagnose the fit of a segmented time series — diagnose.mod_cpt","text":"","code":"# S3 method for mod_cpt diagnose(x, ...)  # S3 method for seg_basket diagnose(x, ...)  # S3 method for tidycpt diagnose(x, ...)  diagnose(x, ...)"},{"path":"https://beanumber.github.io/tidychangepoint/reference/diagnose.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Diagnose the fit of a segmented time series — diagnose.mod_cpt","text":"x tidycpt object ... currently ignored","code":""},{"path":[]},{"path":"https://beanumber.github.io/tidychangepoint/reference/diagnose.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Diagnose the fit of a segmented time series — diagnose.mod_cpt","text":"","code":"diagnose(fit_meanshift_norm(CET, tau = 330))  x <- segment(DataCPSim, method = \"coen\", num_generations = 3) #> Warning: `segment_coen()` was deprecated in tidychangepoint 0.0.1. #> ℹ Please use `segment_ga_coen()` instead. #> ℹ The deprecated feature was likely used in the tidychangepoint package. #>   Please report the issue to the authors. #>    |                                                                     |                                                            |   0%   |                                                                     |==============================                              |  50%   |                                                                     |============================================================| 100% plot(x$segmenter) #> `geom_smooth()` using method = 'loess' and formula = 'y ~ x' #> Warning: span too small.   fewer data values than degrees of freedom. #> Warning: pseudoinverse used at 0.99 #> Warning: neighborhood radius 1.01 #> Warning: reciprocal condition number  0 #> Warning: There are other near singularities as well. 1.0201  diagnose(x$segmenter) #> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. #> Warning: Removed 2 rows containing missing values or values outside the scale range #> (`geom_bar()`).  diagnose(segment(DataCPSim))  diagnose(segment(DataCPSim, method = \"single-best\"))  diagnose(segment(DataCPSim, method = \"pelt\"))  diagnose(segment(test_set()))  diagnose(segment(test_set(n = 2, sd = 4), method = \"pelt\"))"},{"path":"https://beanumber.github.io/tidychangepoint/reference/evolve_gbmdl.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a list of candidate changepoints using a genetic algorithm — evolve_gbmdl","title":"Generate a list of candidate changepoints using a genetic algorithm — evolve_gbmdl","text":"Generate list candidate changepoints using genetic algorithm","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/evolve_gbmdl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a list of candidate changepoints using a genetic algorithm — evolve_gbmdl","text":"","code":"evolve_gbmdl(x, mat_cp, these_bmdls)  junta_1_puntos_cambio(padres, mat_cp)  junta_k_puntos_cambio(mat_padres, mat_cp)  mata_1_tau_volado(cp, prob_volado = 0.5)  mata_k_tau_volado(mat_cp)  muta_1_cp_BMDL(   cp,   x,   probs_nuevos_muta0N = c(0.8, 0.1, 0.1),   dist_extremos = 10,   min_num_cpts = 1,   mutation_possibilities = c(-1, 0, 1),   mutation_probs = c(0.3, 0.4, 0.3),   max_num_cp = 20 )  muta_k_cp_BMDL(mat_cp, x)  sim_1_cp_BMDL(x, max_num_cp = 20, prob_inicial = 0.06)  sim_k_cp_BMDL(x, generation_size = 50, max_num_cp = 20)  probs_vec_MDL(vec_MDL, probs_rank0_MDL1 = 0)  selec_k_pares_de_padres(vec_probs)  chromo2tau(chromo)  mat_cp_2_list(mat_cp)"},{"path":"https://beanumber.github.io/tidychangepoint/reference/evolve_gbmdl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a list of candidate changepoints using a genetic algorithm — evolve_gbmdl","text":"x time series object mat_cp matrix potential changepoints these_bmdls vector BMDL() scores padres vector de longitud dos con índice de papa e índice de mama mat_padres matriz de kx2 la cual contiene en sus renglones las parejas de padres cp vector cromosoma que se va poner prueba prob_volado probabilidad de quitar un tiempo de cambio existente utilizado por mata_k_tau_volado para quitar elementos de más. Se recomienda dejar el valor de 0.5 ya que así al juntar los pc del padre y madre se eliminará la mitad de estos probs_nuevos_muta0N probabilidades de mutar 0,1,2,...,l hasta cierto numero l; eg si vale c(.5,.2,.2,.1) se tiene una probabilidad 0.5 de mutar 0 (de mutar), probabilidad 0.2 de mutar 1,, probabilidad 0.2 de mutar 2, y, probabilidad 0.1 de mutar 3. dist_extremos distancia entre el primer los puntos de cambio v_0 y v_1 al igual que entre v_m y v_{m+1}; distancia minima que debe de haber de un punto de cambio y los valores 1 y T, donde T es la longitud total de la serie min_num_cpts es la cota inferior del número de puntos de cambio que puede tener un cromosoma mutation_possibilities vector con mutaciones posibles; eg si mutaciones=c(-1,0,1) entonces un punto de cambio puede ser movido una unidad la izquierda, puede quedarse igual, o moverse una unidad la derecha mutation_probs probabilidades de mutación. Las longitudes de este vector y mutaciones tienen que ser iguales; eg si mutaciones=c(-1,0,1) y probs_muta = c(.2, .6, .2) entonces se tiene una probabilidad .2 de que el punto de cambio se desplace la izquierda, probabilidad .6 de quedar igual, y probabilidad . 2 de ser movido la derecha max_num_cp el máximo número de rebases. Este parámetro se ocupa en particular para que todos los cromosomas quepan en una matriz. prob_inicial probabilidad de que en la primera generación un punto cualquiera sea punto de cambio. Se recomienda =.5 ya que con esto se distribuyen relativamente uniformes los puntos de cambio generation_size tamaño de las generaciones vec_MDL vector con valores MDL OBSERVACIÓN: Esto regresa numeros negativos, los cuales mientras más negativo mejor, ya que dará que es un mejor vector de tiempos de cambio. Es decir, un MDL de -6000 es mejor que -4000 probs_rank0_MDL1 para medir obtener la probabilidad de los padres se pueden tomar o las probabilidades con respecto los rangos (como en el artículo) o se pueden tomar las probabilidades con respecto el MDL. La diferencia radica en que si se toma con respecto al MDL se tendrá que un cromosoma con un gran MDL este tendrá una gran ventaja de ocurrir, en cambio cuando solo se tiene rank esta ventaja gran ventaja se reduce vec_probs vector de probabilidades de selección de cada uno de los cromosomas chromo Chromosome, row matrix mat_cp","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/evolve_gbmdl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a list of candidate changepoints using a genetic algorithm — evolve_gbmdl","text":"regresa una matriz de las mismas dimensiones que mat_cp, pero con los nuevos cromosomas el mismo cromosoma sin algunos de sus puntos de cambio regresa una matriz la cual se le quitaron sus cromosomas algunos puntos de cambio regresa un vector mutado regreas una mat_cp mutada regresa una matriz de k por max_num_cp+3, la cual en cada renglón tiene una simulación de un vector de tiempos de cambio regresa un vector de probabilidades","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/evolve_gbmdl.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate a list of candidate changepoints using a genetic algorithm — evolve_gbmdl","text":"regresa un vector de tamaño max_num_cp+3 donde la primera entrada es m, la segunda \\(v_0=1, ...., v_{m+1}=N,0,...,0\\) por ejemplo: c(4,1,3,8,11,15,20,0,0,0,0) para m=4, \\(max\\_num\\_cp=8\\), \\(N=20\\). Se tienen m puntos de cambio, los cuales \\(\\tau_0=1\\) y \\(\\tau_{m+1}= N+1\\), pero en nuestro caso tenemos que los vectores cp tienen \\(c(m,\\tau_0=1,\\tau_1,...,\\tau_{m-1},\\tau_m= N,0,0,0)\\) por lo cual se nosotros: empieza con el número de puntos de cambio; la segunda entrada es un uno; la tercera entrada es el primer punto de cambio; las siguientes son otros puntos de cambio; la siguiente entrada después de punto de cambio tiene el valor  N; y los siguientes son númores cero hasta llenarlo para que sea de tamaño max_num_cp","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/evolve_gbmdl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a list of candidate changepoints using a genetic algorithm — evolve_gbmdl","text":"","code":"mat_cp <- sim_k_cp_BMDL(DataCPSim) bmdls <- mat_cp |>    mat_cp_2_list() |>    evaluate_cpts(.data = as.ts(DataCPSim), model_fn = fit_nhpp) |>    dplyr::pull(BMDL) evolve_gbmdl(exceedances(DataCPSim), mat_cp, bmdls) #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] #>  [1,]   12    1  629  672  716  843  859  962  967  1010  1014  1031  1080 #>  [2,]    7    1  623  668  765  904 1057 1070 1072  1096     0     0     0 #>  [3,]    6    1  581  671  687  860  978 1019 1096     0     0     0     0 #>  [4,]   10    1  609  619  831  849  886  934  940   969  1024  1086  1096 #>  [5,]   13    1  566  628  698  777  784  822  876   879   890   982  1056 #>  [6,]    8    1  557  705  790  853  886  950 1067  1068  1096     0     0 #>  [7,]   10    1  671  856  858  907  947  968  969   997  1010  1078  1096 #>  [8,]    8    1  557  722  729  857  945  992 1025  1086  1096     0     0 #>  [9,]    9    1  645  834  837  875  896  981 1008  1023  1041  1096     0 #> [10,]    9    1  746  826  864  878  911  957  963  1032  1041  1096     0 #> [11,]   11    1  738  777  894  899  945  964 1008  1015  1044  1050  1083 #> [12,]    6    1  687  915  976  977 1000 1086 1096     0     0     0     0 #> [13,]    7    1  575  678  849  962 1008 1028 1061  1096     0     0     0 #> [14,]    7    1  794  851  923  981 1019 1034 1084  1096     0     0     0 #> [15,]   11    1  668  671  680  694  753  768  863   905   946   971   976 #> [16,]    9    1  678  841  944  996 1014 1031 1039  1049  1081  1096     0 #> [17,]   12    1  654  668  671  688  711  738  870   878   935  1001  1031 #> [18,]    9    1  571  687  697  704  803  966  982  1020  1086  1096     0 #> [19,]   10    1  598  615  659  785  856  885 1009  1026  1042  1079  1096 #> [20,]    9    1  415  784  791  839  872  879  887   897   985  1096     0 #> [21,]    7    1  666  794  828  935  969 1045 1086  1096     0     0     0 #> [22,]    9    1  830  842  892  924  934  971  983   997  1051  1096     0 #> [23,]    8    1  615  940  996 1015 1019 1025 1049  1066  1096     0     0 #> [24,]    8    1  840  876  883  944  950  987 1048  1066  1096     0     0 #> [25,]   10    1  488  561  663  777  834  846  968   977  1071  1074  1096 #> [26,]   10    1  562  698  832  979  982 1014 1018  1028  1060  1062  1096 #> [27,]    6    1  553  791  841  910  945 1046 1096     0     0     0     0 #> [28,]   10    1  590  609  656  697  698  716  790   853  1061  1071  1096 #> [29,]   10    1  803  877  884  910  928  936  969   999  1014  1027  1096 #> [30,]   12    1  553  633  791  813  830  901  933   962   983  1000  1015 #> [31,]    7    1  590  613  654  859  999 1002 1086  1096     0     0     0 #> [32,]    9    1  619  666  711  849  953  996 1007  1012  1030  1096     0 #> [33,]    8    1  618  846  945  954  970  999 1013  1028  1096     0     0 #> [34,]    9    1  614  697  771  790  875  886  900   972  1003  1096     0 #> [35,]    8    1  621  706  777  785  872  962 1039  1067  1096     0     0 #> [36,]   10    1  621  722  733  794  867  886  945  1046  1078  1079  1096 #> [37,]    8    1  646  649  803  870  877  971 1012  1061  1096     0     0 #> [38,]   11    1  553  621  698  774  993 1000 1012  1028  1041  1067  1086 #> [39,]    8    1  672  727  881  893  948  990  995  1083  1096     0     0 #> [40,]    9    1  415  583  725  894  948  961  984   995   997  1096     0 #> [41,]    9    1  647  728  768  826  837  860  901   946  1000  1096     0 #> [42,]    8    1  556  733  861  901  933  993 1000  1068  1096     0     0 #> [43,]   10    1  671  771  798  882  905  967  987   992  1038  1048  1096 #> [44,]    7    1  415  697  774  824  993 1038 1059  1096     0     0     0 #> [45,]   10    1  623  647  784  934  978 1013 1019  1024  1061  1070  1096 #> [46,]   10    1  618  830  849  887  969  999 1029  1056  1062  1083  1096 #> [47,]   12    1  654  704  830  877  921  954  971   994  1021  1029  1031 #> [48,]    8    1  556  605  856  886  946  948  989   991  1096     0     0 #> [49,]    7    1  621  861  901  970 1047 1055 1064  1096     0     0     0 #> [50,]    7    1  571  765  828  848  866 1025 1086  1096     0     0     0 #>       [,14] [,15] [,16] [,17] [,18] [,19] [,20] #>  [1,]  1083  1096     0     0     0     0     0 #>  [2,]     0     0     0     0     0     0     0 #>  [3,]     0     0     0     0     0     0     0 #>  [4,]     0     0     0     0     0     0     0 #>  [5,]  1069  1071  1096     0     0     0     0 #>  [6,]     0     0     0     0     0     0     0 #>  [7,]     0     0     0     0     0     0     0 #>  [8,]     0     0     0     0     0     0     0 #>  [9,]     0     0     0     0     0     0     0 #> [10,]     0     0     0     0     0     0     0 #> [11,]  1096     0     0     0     0     0     0 #> [12,]     0     0     0     0     0     0     0 #> [13,]     0     0     0     0     0     0     0 #> [14,]     0     0     0     0     0     0     0 #> [15,]  1096     0     0     0     0     0     0 #> [16,]     0     0     0     0     0     0     0 #> [17,]  1076  1096     0     0     0     0     0 #> [18,]     0     0     0     0     0     0     0 #> [19,]     0     0     0     0     0     0     0 #> [20,]     0     0     0     0     0     0     0 #> [21,]     0     0     0     0     0     0     0 #> [22,]     0     0     0     0     0     0     0 #> [23,]     0     0     0     0     0     0     0 #> [24,]     0     0     0     0     0     0     0 #> [25,]     0     0     0     0     0     0     0 #> [26,]     0     0     0     0     0     0     0 #> [27,]     0     0     0     0     0     0     0 #> [28,]     0     0     0     0     0     0     0 #> [29,]     0     0     0     0     0     0     0 #> [30,]  1067  1096     0     0     0     0     0 #> [31,]     0     0     0     0     0     0     0 #> [32,]     0     0     0     0     0     0     0 #> [33,]     0     0     0     0     0     0     0 #> [34,]     0     0     0     0     0     0     0 #> [35,]     0     0     0     0     0     0     0 #> [36,]     0     0     0     0     0     0     0 #> [37,]     0     0     0     0     0     0     0 #> [38,]  1096     0     0     0     0     0     0 #> [39,]     0     0     0     0     0     0     0 #> [40,]     0     0     0     0     0     0     0 #> [41,]     0     0     0     0     0     0     0 #> [42,]     0     0     0     0     0     0     0 #> [43,]     0     0     0     0     0     0     0 #> [44,]     0     0     0     0     0     0     0 #> [45,]     0     0     0     0     0     0     0 #> [46,]     0     0     0     0     0     0     0 #> [47,]  1056  1096     0     0     0     0     0 #> [48,]     0     0     0     0     0     0     0 #> [49,]     0     0     0     0     0     0     0 #> [50,]     0     0     0     0     0     0     0 sim_1_cp_BMDL(exceedances(DataCPSim)) #>  [1]   17    1   60  415  613  621  671  867  951  961  980  985 1001 1013 1024 #> [16] 1052 1054 1075 1076 1096 sim_1_cp_BMDL(exceedances(rlnorm_ts_1)) #>  [1]   17    1   18   59   60  108  130  134  157  585  664  810  841  863  867 #> [16]  938  963 1032 1049 1096 sim_1_cp_BMDL(exceedances(rlnorm_ts_2)) #>  [1]   17    1  379  388  423  477  575  615  691  739  899  911  924  936  937 #> [16]  969  977 1033 1068 1096 sim_1_cp_BMDL(exceedances(rlnorm_ts_3)) #>  [1]   17    1  610  834  840  858  863  866  895  897  949  952  973  974 1005 #> [16] 1017 1019 1022 1065 1096 sim_1_cp_BMDL(exceedances(bogota_pm)) #>  [1]   17    1   11  167  276  291  422  428  477  610  612  628  666  692  783 #> [16] 1026 1060 1061 1095 1096  sim_k_cp_BMDL(DataCPSim) #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] #>  [1,]   17    1  581  687  705  784  823  836  846   864   886   926   959 #>  [2,]   17    1  566  671  687  716  828  859  875   887   899   977   985 #>  [3,]   16    1  598  777  785  813  822  831  837   860   861   954   977 #>  [4,]   14    1  634  705  729  809  946  951  970   974   986  1023  1047 #>  [5,]   17    1  654  659  687  705  728  749  765   836   850   870   911 #>  [6,]   17    1  221  604  634  642  728  755  853   877   878   887   937 #>  [7,]   17    1  488  614  785  839  851  864  880   914   945   948  1012 #>  [8,]   17    1  654  657  741  810  838  895  898   960   972   988   994 #>  [9,]   16    1   60  642  678  728  833  863  899   901   920   959  1005 #> [10,]   17    1  668  687  785  834  853  858  861   904   933   974   986 #> [11,]   17    1  488  562  619  634  753  809  823   910   941   951   969 #> [12,]   17    1  613  633  657  716  791  838  845   854   879   891   947 #> [13,]   17    1  649  713  716  790  851  876  911   977   989   995  1024 #> [14,]   17    1  221  488  609  716  727  813  844   856   943   961   972 #> [15,]   17    1  271  571  656  680  733  785  813   887   894   910   933 #> [16,]   17    1  656  657  725  780  826  848  881   893   945   966   968 #> [17,]   17    1  581  614  655  666  728  810  832   891   897   986   995 #> [18,]   17    1  663  694  774  841  848  892  899   910   928   931   934 #> [19,]   16    1  619  677  738  854  856  864  894   899   918   946   967 #> [20,]   17    1  561  571  619  677  688  771  850   852   899   903   938 #> [21,]   17    1  553  615  629  810  840  845  879   883   885   957   978 #> [22,]   17    1  415  621  717  738  777  798  888   895   899   933   951 #> [23,]   17    1  488  633  666  698  708  729  866   892   941   990   993 #> [24,]   17    1  697  698  728  761  765  771  823   832   846   865   904 #> [25,]   17    1   51  634  822  837  839  854  861   879   910   935   957 #> [26,]   14    1  556  688  780  810  822  839  850   915   982  1017  1037 #> [27,]   17    1  598  604  738  761  842  889  941   945   973   988   991 #> [28,]   16    1  666  680  722  763  771  809  846   936   937   953   959 #> [29,]   17    1  415  666  671  672  678  794  826   844   878   882   940 #> [30,]   17    1  571  681  697  728  826  831  846   849   878   898   935 #> [31,]   16    1   60  649  656  763  843  858  881   901   915   916   990 #> [32,]   17    1  354  562  619  647  749  755  763   845   864   901   907 #> [33,]   17    1  233  613  647  659  705  790  792   880   883   897   948 #> [34,]   17    1  618  628  629  649  668  727  791   861   892   989   995 #> [35,]   17    1   51  596  663  708  725  755  817   830   864   905   932 #> [36,]   17    1  271  562  571  798  823  834  853   870   905   915   924 #> [37,]   17    1  615  642  645  763  774  837  852   865   895   991  1004 #> [38,]   17    1  623  688  722  780  794  823  833   841   848   859   872 #> [39,]   14    1  621  647  666  727  824  828  878   881   904   934   936 #> [40,]   17    1   60  556  628  672  687  722  791   823   875   877   923 #> [41,]   17    1  354  415  598  619  666  719  872   877   895   963  1008 #> [42,]   17    1  571  621  623  647  834  872  884   937   966   971   990 #> [43,]   16    1  354  566  614  629  774  929  936   963   975  1006  1007 #> [44,]   12    1  666  719  755  780  809  813  822   836  1001  1022  1069 #> [45,]   17    1  671  694  741  809  828  851  856   860   861   937   982 #> [46,]   17    1  654  680  711  763  765  774  794   841   919   932   933 #> [47,]   15    1  649  708  780  798  846  864  904   944   969   992  1007 #> [48,]   17    1  556  561  598  763  771  790  862   884   894   897   910 #> [49,]   17    1  233  777  833  834  839  856  879   971   973   974   997 #> [50,]   17    1  566  571  605  618  629  645  655   771   877   896   948 #>       [,14] [,15] [,16] [,17] [,18] [,19] [,20] #>  [1,]   975  1003  1087  1090  1091  1092  1096 #>  [2,]  1013  1019  1030  1044  1051  1055  1096 #>  [3,]   985  1009  1035  1049  1051  1096     0 #>  [4,]  1081  1084  1087  1096     0     0     0 #>  [5,]   946   954  1010  1011  1072  1095  1096 #>  [6,]   941   961   985  1057  1066  1070  1096 #>  [7,]  1052  1059  1065  1066  1086  1090  1096 #>  [8,]  1008  1017  1030  1054  1072  1088  1096 #>  [9,]  1045  1049  1065  1069  1088  1096     0 #> [10,]  1035  1051  1057  1058  1059  1093  1096 #> [11,]   974  1020  1032  1058  1061  1084  1096 #> [12,]   964   987   994  1052  1063  1091  1096 #> [13,]  1030  1032  1034  1073  1078  1087  1096 #> [14,]   977   980   982  1003  1017  1046  1096 #> [15,]   943   989  1007  1051  1082  1095  1096 #> [16,]   969  1050  1059  1075  1076  1088  1096 #> [17,]  1003  1004  1022  1046  1055  1061  1096 #> [18,]   940   991  1000  1054  1079  1085  1096 #> [19,]  1002  1017  1018  1028  1073  1096     0 #> [20,]   974  1013  1014  1037  1047  1071  1096 #> [21,]   991  1000  1023  1053  1076  1080  1096 #> [22,]   973   981   988  1040  1055  1083  1096 #> [23,]  1008  1015  1021  1033  1045  1061  1096 #> [24,]   960   986  1003  1035  1039  1080  1096 #> [25,]   972   976   989  1008  1033  1039  1096 #> [26,]  1046  1062  1064  1096     0     0     0 #> [27,]   999  1009  1013  1022  1033  1081  1096 #> [28,]   981   990  1050  1063  1069  1096     0 #> [29,]   944   963   969   972   976  1074  1096 #> [30,]   936   937   950   970  1016  1037  1096 #> [31,]  1002  1019  1061  1079  1090  1096     0 #> [32,]   948   997  1001  1048  1053  1068  1096 #> [33,]   968   985   996  1029  1056  1066  1096 #> [34,]  1012  1013  1034  1044  1045  1055  1096 #> [35,]   949   961   967  1054  1065  1068  1096 #> [36,]   941   979   997  1011  1030  1039  1096 #> [37,]  1020  1025  1049  1051  1071  1087  1096 #> [38,]   912   939   944   953  1017  1035  1096 #> [39,]   999  1052  1062  1096     0     0     0 #> [40,]   937   947   991  1013  1064  1074  1096 #> [41,]  1009  1017  1033  1049  1086  1092  1096 #> [42,]  1019  1026  1064  1069  1073  1085  1096 #> [43,]  1018  1029  1036  1071  1072  1096     0 #> [44,]  1071  1096     0     0     0     0     0 #> [45,]   999  1006  1023  1033  1052  1088  1096 #> [46,]   945   971   988   998  1022  1090  1096 #> [47,]  1010  1025  1048  1084  1096     0     0 #> [48,]   932   936   998  1073  1084  1085  1096 #> [49,]   999  1012  1029  1053  1060  1093  1096 #> [50,]   993  1025  1047  1056  1064  1065  1096  chromo <- c(4, 1, 557, 877 , 905, 986, 1096, 0, 0, 0) chromo2tau(chromo) #> [1] 557 877 905 986"},{"path":"https://beanumber.github.io/tidychangepoint/reference/exceedances.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute exceedances of a threshold for a time series — exceedances","title":"Compute exceedances of a threshold for a time series — exceedances","text":"Compute exceedances threshold time series","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/exceedances.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute exceedances of a threshold for a time series — exceedances","text":"","code":"exceedances(x, ...)  # S3 method for default exceedances(x, ...)  # S3 method for nhpp exceedances(x, ...)  # S3 method for ts exceedances(x, ...)  # S3 method for double exceedances(x, threshold = mean(x, na.rm = TRUE), ...)"},{"path":"https://beanumber.github.io/tidychangepoint/reference/exceedances.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute exceedances of a threshold for a time series — exceedances","text":"x numeric vector coercible stats::ts object ... arguments passed methods threshold value exceed. Default mean()","code":""},{"path":[]},{"path":"https://beanumber.github.io/tidychangepoint/reference/exceedances.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute exceedances of a threshold for a time series — exceedances","text":"","code":"fit_nhpp(DataCPSim, tau = 826) |> exceedances() #>   [1]   20   51   60  221  226  233  271  308  354  415  488  548  553  556  557 #>  [16]  561  562  566  571  575  581  583  589  590  596  598  604  605  609  613 #>  [31]  614  615  618  619  621  623  628  629  633  634  642  645  646  647  649 #>  [46]  654  655  656  657  659  663  666  668  671  672  677  678  680  681  687 #>  [61]  688  694  697  698  704  705  706  708  711  713  716  717  719  722  725 #>  [76]  727  728  729  733  738  741  746  748  749  753  755  761  763  765  768 #>  [91]  771  774  777  780  784  785  790  791  792  794  798  803  809  810  813 #> [106]  817  822  823  824  825  826  828  830  831  832  833  834  836  837  838 #> [121]  839  840  841  842  843  844  845  846  848  849  850  851  852  853  854 #> [136]  856  857  858  859  860  861  862  863  864  865  866  867  868  870  871 #> [151]  872  875  876  877  878  879  880  881  882  883  884  885  886  887  888 #> [166]  889  890  891  892  893  894  895  896  897  898  899  900  901  903  904 #> [181]  905  907  908  910  911  912  914  915  916  918  919  920  921  923  924 #> [196]  926  928  929  930  931  932  933  934  935  936  937  938  939  940  941 #> [211]  943  944  945  946  947  948  949  950  951  953  954  955  957  959  960 #> [226]  961  962  963  964  966  967  968  969  970  971  972  973  974  975  976 #> [241]  977  978  979  980  981  982  983  984  985  986  987  988  989  990  991 #> [256]  992  993  994  995  996  997  998  999 1000 1001 1002 1003 1004 1005 1006 #> [271] 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 #> [286] 1022 1023 1024 1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 #> [301] 1037 1038 1039 1040 1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 #> [316] 1052 1053 1054 1055 1056 1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 #> [331] 1067 1068 1069 1070 1071 1072 1073 1074 1075 1076 1077 1078 1079 1080 1081 #> [346] 1082 1083 1084 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 fit_nhpp(DataCPSim, tau = 826, threshold = 200) |> exceedances() #>  [1]  953  973  982  988  998  999 1003 1007 1018 1032 1033 1039 1041 1049 1055 #> [16] 1058 1064 1066 1070 1087 1089"},{"path":"https://beanumber.github.io/tidychangepoint/reference/file_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Obtain a descriptive filename for a tidycpt object — file_name","title":"Obtain a descriptive filename for a tidycpt object — file_name","text":"Obtain descriptive filename tidycpt object","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/file_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Obtain a descriptive filename for a tidycpt object — file_name","text":"","code":"file_name(x, data_name_slug = \"data\")"},{"path":"https://beanumber.github.io/tidychangepoint/reference/file_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Obtain a descriptive filename for a tidycpt object — file_name","text":"x tidycpt object data_name_slug character string identify data set used file name","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/file_name.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Obtain a descriptive filename for a tidycpt object — file_name","text":"","code":"file_name(segment(DataCPSim, method = \"pelt\")) #> [1] \"data_PELT_10135_b42849422cbfd7c23a6ffe77d48389f8.rda\""},{"path":"https://beanumber.github.io/tidychangepoint/reference/fit_lmshift.html","id":null,"dir":"Reference","previous_headings":"","what":"Regression-based model fitting — fit_lmshift","title":"Regression-based model fitting — fit_lmshift","text":"Regression-based model fitting","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/fit_lmshift.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Regression-based model fitting — fit_lmshift","text":"","code":"fit_lmshift(x, tau, deg_poly = 0, ...)  fit_lmshift_ar1(x, tau, ...)  fit_trendshift(x, tau, ...)  fit_trendshift_ar1(x, tau, ...)"},{"path":"https://beanumber.github.io/tidychangepoint/reference/fit_lmshift.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Regression-based model fitting — fit_lmshift","text":"x time series tau set indices representing changepoint set deg_poly integer indicating degree polynomial spline fit. Passed stats::poly(). ... arguments passed stats::lm()","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/fit_lmshift.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Regression-based model fitting — fit_lmshift","text":"fit_lmshift_ar1(): apply auto-regressive lag 1 errors fit_trendshift(): fit line region fit_trendshift_ar1(): fit line region autoregress lag 1 errors","code":""},{"path":[]},{"path":"https://beanumber.github.io/tidychangepoint/reference/fit_lmshift.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Regression-based model fitting — fit_lmshift","text":"","code":"tau <- c(365, 826) mod <- fit_lmshift(DataCPSim, tau) logLik(mod) #> 'log Lik.' -5250.548 (df=6) deg_free(mod) #> [1] 6  cpts <- c(1700, 1739, 1988) ids <- time2tau(cpts, as_year(time(CET))) mod <- fit_lmshift(CET, tau = ids) glance(mod) #> # A tibble: 1 × 11 #>   pkg     version algorithm params num_cpts  rmse logLik   AIC   BIC  MBIC   MDL #>   <chr>   <pckg_> <chr>     <list>    <int> <dbl>  <dbl> <dbl> <dbl> <dbl> <dbl> #> 1 tidych… 0.0.1   meanshift <dbl>         3 0.575  -313.  642.  673.  672.  683. glance(fit_lmshift(CET, tau = ids, deg_poly = 1)) #> # A tibble: 1 × 11 #>   pkg     version algorithm params num_cpts  rmse logLik   AIC   BIC  MBIC   MDL #>   <chr>   <pckg_> <chr>     <list>    <int> <dbl>  <dbl> <dbl> <dbl> <dbl> <dbl> #> 1 tidych… 0.0.1   trendshi… <dbl>         3 0.539  -290.  604.  651.  626.  653. glance(fit_lmshift_ar1(CET, tau = ids)) #> # A tibble: 1 × 11 #>   pkg     version algorithm params num_cpts  rmse logLik   AIC   BIC  MBIC   MDL #>   <chr>   <pckg_> <chr>     <list>    <int> <dbl>  <dbl> <dbl> <dbl> <dbl> <dbl> #> 1 tidych… 0.0.1   meanshif… <dbl>         3 0.566  -307.  632.  667.  660.  676. glance(fit_lmshift_ar1(CET, tau = ids, deg_poly = 1)) #> # A tibble: 1 × 11 #>   pkg     version algorithm params num_cpts  rmse logLik   AIC   BIC  MBIC   MDL #>   <chr>   <pckg_> <chr>     <list>    <int> <dbl>  <dbl> <dbl> <dbl> <dbl> <dbl> #> 1 tidych… 0.0.1   trendshi… <dbl>         3 0.538  -289.  603.  654.  623.  656. glance(fit_lmshift_ar1(CET, tau = ids, deg_poly = 2)) #> # A tibble: 1 × 11 #>   pkg     version algorithm params num_cpts  rmse logLik   AIC   BIC  MBIC   MDL #>   <chr>   <pckg_> <chr>     <list>    <int> <dbl>  <dbl> <dbl> <dbl> <dbl> <dbl> #> 1 tidych… 0.0.1   splinesh… <dbl>         3 0.537  -288.  609.  675.  621.  670. fit_lmshift(CET, tau = NULL) #> List of 6 #>  $ data         : Time-Series [1:362] from 1 to 362: 8.87 9.1 9.78 9.52 8.63 9.34 8.29 9.86 8.52 9.51 ... #>  $ tau          : NULL #>  $ region_params: tibble [1 × 2] (S3: tbl_df/tbl/data.frame) #>   ..$ region  : chr \"[0,362]\" #>   ..$ param_mu: num 9.28 #>  $ model_params : Named num 0.461 #>   ..- attr(*, \"names\")= chr \"sigma_hatsq\" #>  $ fitted_values: Named num [1:362] 9.28 9.28 9.28 9.28 9.28 ... #>   ..- attr(*, \"names\")= chr [1:362] \"1\" \"2\" \"3\" \"4\" ... #>  $ model_name   : chr \"null\" #>  - attr(*, \"class\")= chr \"mod_cpt\" fit_lmshift(CET, tau = c(42, 42)) #> List of 6 #>  $ data         : Time-Series [1:362] from 1 to 362: 8.87 9.1 9.78 9.52 8.63 9.34 8.29 9.86 8.52 9.51 ... #>  $ tau          : num 42 #>  $ region_params: tibble [2 × 2] (S3: tbl_df/tbl/data.frame) #>   ..$ region  : chr [1:2] \"[0,42)\" \"[42,362]\" #>   ..$ param_mu: num [1:2] 8.68 9.35 #>  $ model_params : Named num 0.415 #>   ..- attr(*, \"names\")= chr \"sigma_hatsq\" #>  $ fitted_values: Named num [1:362] 8.68 8.68 8.68 8.68 8.68 ... #>   ..- attr(*, \"names\")= chr [1:362] \"1\" \"2\" \"3\" \"4\" ... #>  $ model_name   : chr \"meanshift\" #>  - attr(*, \"class\")= chr \"mod_cpt\""},{"path":"https://beanumber.github.io/tidychangepoint/reference/fit_meanshift.html","id":null,"dir":"Reference","previous_headings":"","what":"Fast implementation of meanshift model — fit_meanshift","title":"Fast implementation of meanshift model — fit_meanshift","text":"Fast implementation meanshift model","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/fit_meanshift.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fast implementation of meanshift model — fit_meanshift","text":"","code":"fit_meanshift(x, tau, distribution = \"norm\", ...)  fit_meanshift2(x, tau, ...)  fit_meanshift_norm(x, tau, ...)  fit_meanshift_lnorm(x, tau, ...)  # S3 method for meanshift_lnorm logLik(object, ...)  fit_meanshift_norm_ar1(x, tau, ...)"},{"path":"https://beanumber.github.io/tidychangepoint/reference/fit_meanshift.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fast implementation of meanshift model — fit_meanshift","text":"x time series tau set indices representing changepoint set distribution character indicating distribution data. match R distribution function naming conventions (e.g., \"norm\" Normal distribution, etc.) ... arguments passed stats::lm() object object log-likelihood value,    contribution log-likelihood value, can extracted.","code":""},{"path":[]},{"path":"https://beanumber.github.io/tidychangepoint/reference/fit_meanshift.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Fast implementation of meanshift model — fit_meanshift","text":"Xueheng Shi","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/fit_meanshift.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fast implementation of meanshift model — fit_meanshift","text":"","code":"tau <- c(365, 826) mod <- fit_meanshift_norm_ar1(DataCPSim, tau) logLik(mod) #> 'log Lik.' -5195.452 (df=7) deg_free(mod) #> [1] 7  cpts <- c(1700, 1739, 1988) ids <- time2tau(cpts, as_year(time(CET))) mod <- fit_meanshift_norm(CET, tau = ids) glance(mod) #> # A tibble: 1 × 11 #>   pkg     version algorithm params num_cpts  rmse logLik   AIC   BIC  MBIC   MDL #>   <chr>   <pckg_> <chr>     <list>    <int> <dbl>  <dbl> <dbl> <dbl> <dbl> <dbl> #> 1 tidych… 0.0.1   meanshif… <dbl>         3 0.575  -313.  642.  673.  672.  683. mod <- fit_meanshift_norm_ar1(CET, tau = ids) glance(mod) #> # A tibble: 1 × 11 #>   pkg     version algorithm params num_cpts  rmse logLik   AIC   BIC  MBIC   MDL #>   <chr>   <pckg_> <chr>     <list>    <int> <dbl>  <dbl> <dbl> <dbl> <dbl> <dbl> #> 1 tidych… 0.0.1   meanshif… <dbl>         3 0.566  -307.  632.  667.  660.  676."},{"path":"https://beanumber.github.io/tidychangepoint/reference/fit_meanvar.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit a model for mean and variance — fit_meanvar","title":"Fit a model for mean and variance — fit_meanvar","text":"Fit model mean variance","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/fit_meanvar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit a model for mean and variance — fit_meanvar","text":"","code":"fit_meanvar(x, tau, ...)"},{"path":"https://beanumber.github.io/tidychangepoint/reference/fit_meanvar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit a model for mean and variance — fit_meanvar","text":"x time series tau set indices representing changepoint set ... arguments passed stats::lm()","code":""},{"path":[]},{"path":"https://beanumber.github.io/tidychangepoint/reference/fit_meanvar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit a model for mean and variance — fit_meanvar","text":"","code":"fit_meanvar(CET, tau = c(42, 330)) #> List of 6 #>  $ data         : Time-Series [1:362] from 1 to 362: 8.87 9.1 9.78 9.52 8.63 9.34 8.29 9.86 8.52 9.51 ... #>  $ tau          : num [1:2] 42 330 #>  $ region_params: tibble [3 × 3] (S3: tbl_df/tbl/data.frame) #>   ..$ region           : chr [1:3] \"[0,42)\" \"[42,330)\" \"[330,362]\" #>   ..$ param_mu         : num [1:3] 8.68 9.25 10.25 #>   ..$ param_sigma_hatsq: Named num [1:3] 0.389 0.335 0.238 #>   .. ..- attr(*, \"names\")= chr [1:3] \"[0,42)\" \"[42,330)\" \"[330,362]\" #>  $ model_params : NULL #>  $ fitted_values: num [1:362] 8.68 8.68 8.68 8.68 8.68 ... #>  $ model_name   : chr \"meanvar\" #>  - attr(*, \"class\")= chr \"mod_cpt\""},{"path":"https://beanumber.github.io/tidychangepoint/reference/fit_nhpp.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit a non-homogeneous Poisson process model to the exceedances of a time series. — fit_nhpp_region","title":"Fit a non-homogeneous Poisson process model to the exceedances of a time series. — fit_nhpp_region","text":"times series can modeled non-homogeneous Poisson process locations exceedances mean series. function uses BMDL() criteria determine best fit parameters region defined changepoint set returned changepoints().","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/fit_nhpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit a non-homogeneous Poisson process model to the exceedances of a time series. — fit_nhpp_region","text":"","code":"fit_nhpp_region(exc, tau_left, tau_right, params = parameters_weibull(), ...)  fit_nhpp(x, tau, ...)  # S3 method for nhpp logLik(object, ...)  # S3 method for nhpp glance(x, ...)  mcdf(x, dist = \"weibull\")  # S3 method for nhpp diagnose(x, ...)  plot_intensity(x, ...)"},{"path":"https://beanumber.github.io/tidychangepoint/reference/fit_nhpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit a non-homogeneous Poisson process model to the exceedances of a time series. — fit_nhpp_region","text":"exc Output exceedances() tau_left left-changepoint tau_right right-changepoint params Output parameters_weibull() ... arguments passed stats::optim() x nhpp object tau vector changepoints. object nhpp object dist Name distribution","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/fit_nhpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit a non-homogeneous Poisson process model to the exceedances of a time series. — fit_nhpp_region","text":"tbl_df row representing one region. numeric vector length equal exceedances x","code":""},{"path":[]},{"path":"https://beanumber.github.io/tidychangepoint/reference/fit_nhpp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit a non-homogeneous Poisson process model to the exceedances of a time series. — fit_nhpp_region","text":"","code":"fit_nhpp_region(exceedances(DataCPSim), 0, 575) #> $par #> [1]  10.0000 311.8929 #>  #> $value #> [1] -545.8334 #>  #> $counts #> function gradient  #>       43       43  #>  #> $convergence #> [1] 0 #>  #> $message #> [1] \"CONVERGENCE: REL_REDUCTION_OF_F <= FACTR*EPSMCH\" #>  #> $logLik #> [1] 1488.061 #>  fit_nhpp(DataCPSim, tau = 826) #> List of 6 #>  $ data         : Time-Series [1:1096] from 1 to 1096: 35.5 29 35.6 33 29.5 ... #>  $ tau          : num 826 #>  $ region_params: tibble [2 × 5] (S3: tbl_df/tbl/data.frame) #>   ..$ region     : chr [1:2] \"[0,826)\" \"[826,1.1e+03]\" #>   ..$ param_alpha: num [1:2] 0.949 0.78 #>   ..$ param_beta : num [1:2] 5.055 0.116 #>   ..$ logPost    : num [1:2] -353 -271 #>   ..$ logLik     : num [1:2] -337 -270 #>  $ model_params : Named num 63.2 #>   ..- attr(*, \"names\")= chr \"threshold\" #>  $ fitted_values: Named num [1:1096] 43.2 43.2 43.2 43.2 43.2 ... #>   ..- attr(*, \"names\")= chr [1:1096] \"[0,826)\" \"[0,826)\" \"[0,826)\" \"[0,826)\" ... #>  $ model_name   : chr \"nhpp\" #>  - attr(*, \"class\")= chr [1:2] \"nhpp\" \"mod_cpt\" fit_nhpp(DataCPSim, tau = 826, threshold = 20) #> List of 6 #>  $ data         : Time-Series [1:1096] from 1 to 1096: 35.5 29 35.6 33 29.5 ... #>  $ tau          : num 826 #>  $ region_params: tibble [2 × 5] (S3: tbl_df/tbl/data.frame) #>   ..$ region     : chr [1:2] \"[0,826)\" \"[826,1.1e+03]\" #>   ..$ param_alpha: num [1:2] 0.983 0.764 #>   ..$ param_beta : num [1:2] 0.9202 0.0841 #>   ..$ logPost    : num [1:2] -830 -272 #>   ..$ logLik     : num [1:2] -826 -270 #>  $ model_params : Named num 20 #>   ..- attr(*, \"names\")= chr \"threshold\" #>  $ fitted_values: Named num [1:1096] 43.2 43.2 43.2 43.2 43.2 ... #>   ..- attr(*, \"names\")= chr [1:1096] \"[0,826)\" \"[0,826)\" \"[0,826)\" \"[0,826)\" ... #>  $ model_name   : chr \"nhpp\" #>  - attr(*, \"class\")= chr [1:2] \"nhpp\" \"mod_cpt\" fit_nhpp(DataCPSim, tau = 826, threshold = 200) #> List of 6 #>  $ data         : Time-Series [1:1096] from 1 to 1096: 35.5 29 35.6 33 29.5 ... #>  $ tau          : num 826 #>  $ region_params: tibble [2 × 5] (S3: tbl_df/tbl/data.frame) #>   ..$ region     : chr [1:2] \"[0,826)\" \"[826,1.1e+03]\" #>   ..$ param_alpha: num [1:2] 0.0605 0.5417 #>   ..$ param_beta : num [1:2] 0.101 0.106 #>   ..$ logPost    : num [1:2] -5.35 -77.25 #>   ..$ logLik     : num [1:2] -1.72 -75.33 #>  $ model_params : Named num 200 #>   ..- attr(*, \"names\")= chr \"threshold\" #>  $ fitted_values: Named num [1:1096] 43.2 43.2 43.2 43.2 43.2 ... #>   ..- attr(*, \"names\")= chr [1:1096] \"[0,826)\" \"[0,826)\" \"[0,826)\" \"[0,826)\" ... #>  $ model_name   : chr \"nhpp\" #>  - attr(*, \"class\")= chr [1:2] \"nhpp\" \"mod_cpt\" fit_nhpp(DataCPSim, tau = changepoints(segment(DataCPSim, method = \"pelt\"))) #> List of 6 #>  $ data         : Time-Series [1:1096] from 1 to 1096: 35.5 29 35.6 33 29.5 ... #>  $ tau          : int [1:3] 547 822 972 #>  $ region_params: tibble [4 × 5] (S3: tbl_df/tbl/data.frame) #>   ..$ region     : chr [1:4] \"[0,547)\" \"[547,822)\" \"[822,972)\" \"[972,1.1e+03]\" #>   ..$ param_alpha: num [1:4] 0.362 0.657 0.738 0.758 #>   ..$ param_beta : num [1:4] 0.3922 0.0883 0.073 0.0749 #>   ..$ logPost    : num [1:4] -60.1 -197.9 -150.2 -125.8 #>   ..$ logLik     : num [1:4] -57.4 -196.1 -148.4 -124 #>  $ model_params : Named num 63.2 #>   ..- attr(*, \"names\")= chr \"threshold\" #>  $ fitted_values: Named num [1:1096] 35.3 35.3 35.3 35.3 35.3 ... #>   ..- attr(*, \"names\")= chr [1:1096] \"[0,547)\" \"[0,547)\" \"[0,547)\" \"[0,547)\" ... #>  $ model_name   : chr \"nhpp\" #>  - attr(*, \"class\")= chr [1:2] \"nhpp\" \"mod_cpt\" nhpp <- fit_nhpp(DataCPSim, tau = 826) mcdf(nhpp) #>   [1]   3.686770   8.959924  10.453459  36.009425  36.781826  37.861718 #>   [7]  43.696179  49.336684  56.301163  65.465988  76.343633  85.221032 #>  [13]  85.958484  86.400791  86.548199  87.137697  87.285038  87.874266 #>  [19]  88.610501  89.199250  90.081980  90.376119  91.258226  91.405198 #>  [25]  92.286767  92.580522  93.461485  93.608268  94.195277  94.782087 #>  [31]  94.928759  95.075419  95.515324  95.661935  95.955120  96.248256 #>  [37]  96.980886  97.127376  97.713217  97.859647  99.030665  99.469603 #>  [43]  99.615892  99.762170 100.054690 100.785790 100.931975 101.078149 #>  [49] 101.224311 101.516602 102.101046 102.539261 102.831347 103.269393 #>  [55] 103.415386 104.145184 104.291110 104.582929 104.728822 105.603950 #>  [61] 105.749767 106.624437 107.061626 107.207335 108.081360 108.226993 #>  [67] 108.372616 108.663831 109.100573 109.391681 109.828266 109.973773 #>  [73] 110.264757 110.701154 111.137458 111.428275 111.573669 111.719052 #>  [79] 112.300483 113.027042 113.462856 114.189011 114.479403 114.624585 #>  [85] 115.205210 115.495463 116.365985 116.656081 116.946138 117.381150 #>  [91] 117.816074 118.250912 118.685663 119.120328 119.699748 119.844579 #>  [97] 120.568594 120.713368 120.858133 121.147635 121.726527 122.449933 #> [103] 123.317714 123.462312 123.896052 124.474243 125.196777 125.341257 #> [109] 125.485728 125.630189 125.774642 127.688330 129.601003 130.556960 #> [115] 131.512664 132.468117 133.423317 135.332965 136.287412 137.241609 #> [121] 138.195557 139.149254 140.102703 141.055902 142.008853 142.961556 #> [127] 143.914012 144.866219 146.769894 147.721362 148.672583 149.623559 #> [133] 150.574290 151.524776 152.475017 154.374767 155.324276 156.273542 #> [139] 157.222566 158.171347 159.119885 160.068182 161.016238 161.964052 #> [145] 162.911626 163.858959 164.806051 165.752905 167.645893 168.592029 #> [151] 169.537926 172.374190 173.319137 174.263847 175.208321 176.152559 #> [157] 177.096560 178.040326 178.983858 179.927154 180.870216 181.813043 #> [163] 182.755637 183.697997 184.640124 185.582018 186.523680 187.465109 #> [169] 188.406306 189.347272 190.288007 191.228510 192.168783 193.108825 #> [175] 194.048638 194.988220 195.927574 196.866698 198.744260 199.682699 #> [181] 200.620910 202.496649 203.434178 205.308556 206.245406 207.182030 #> [187] 209.054603 209.990552 210.926276 212.797052 213.732105 214.666934 #> [193] 215.601540 217.470085 218.404023 220.271235 222.137563 223.070395 #> [199] 224.003007 224.935398 225.867570 226.799523 227.731256 228.662770 #> [205] 229.594066 230.525143 231.456002 232.386643 233.317066 234.247272 #> [211] 236.107034 237.036590 237.965930 238.895054 239.823963 240.752656 #> [217] 241.681134 242.609398 243.537447 245.392902 246.320309 247.247503 #> [223] 249.101251 250.954149 251.880280 252.806199 253.731906 254.657403 #> [229] 255.582688 257.432627 258.357281 259.281725 260.205960 261.129985 #> [235] 262.053801 262.977408 263.900807 264.823997 265.746979 266.669754 #> [241] 267.592321 268.514680 269.436833 270.358779 271.280518 272.202051 #> [247] 273.123378 274.044500 274.965416 275.886126 276.806632 277.726933 #> [253] 278.647029 279.566922 280.486610 281.406095 282.325376 283.244454 #> [259] 284.163328 285.082001 286.000470 286.918738 287.836804 288.754667 #> [265] 289.672330 290.589791 291.507051 292.424110 293.340969 294.257628 #> [271] 295.174086 296.090345 297.006404 297.922264 298.837925 299.753387 #> [277] 300.668651 301.583716 302.498583 303.413253 304.327724 305.241999 #> [283] 306.156076 307.069956 307.983639 308.897127 309.810417 310.723512 #> [289] 311.636412 312.549115 313.461624 314.373937 315.286056 316.197980 #> [295] 317.109709 318.021245 318.932586 319.843734 320.754689 321.665450 #> [301] 322.576019 323.486394 324.396577 325.306568 326.216367 327.125974 #> [307] 328.035389 328.944613 329.853645 330.762487 331.671138 332.579599 #> [313] 333.487869 334.395949 335.303839 336.211540 337.119051 338.026373 #> [319] 338.933506 339.840451 340.747207 341.653774 342.560154 343.466345 #> [325] 344.372349 345.278166 346.183795 347.089237 347.994492 348.899561 #> [331] 349.804444 350.709140 351.613650 352.517975 353.422114 354.326068 #> [337] 355.229837 356.133420 357.036819 357.940034 358.843064 359.745911 #> [343] 360.648573 361.551052 362.453347 363.355460 364.257389 365.159135 #> [349] 366.060699 366.962080 367.863279 368.764296 369.665132 370.565786 #> [355] 371.466258 372.366549 373.266659 374.166589 375.066338 375.965906 nhpp <- fit_nhpp(DataCPSim, tau = 826, threshold = 200) mcdf(nhpp) #>  [1] 12.04806 13.61487 14.31512 14.78032 15.55279 15.62984 15.93769 16.24498 #>  [9] 17.08715 18.15300 18.22888 18.68344 18.83469 19.43837 19.88975 20.11500 #> [17] 20.56462 20.71423 21.01308 22.27750 22.42565 diagnose(fit_nhpp(DataCPSim, tau = 826))  diagnose(fit_nhpp(DataCPSim, tau = 826, threshold = 200))  plot_intensity(fit_nhpp(DataCPSim, tau = 826))  mod <- segment(bogota_pm, method = \"pelt\") plot_intensity(fit_nhpp(bogota_pm, tau = changepoints(mod)))"},{"path":"https://beanumber.github.io/tidychangepoint/reference/fitness.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve the optimal fitness (or objective function) value used by an algorithm — fitness.seg_basket","title":"Retrieve the optimal fitness (or objective function) value used by an algorithm — fitness.seg_basket","text":"Retrieve optimal fitness (objective function) value used algorithm","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/fitness.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve the optimal fitness (or objective function) value used by an algorithm — fitness.seg_basket","text":"","code":"# S3 method for seg_basket fitness(object, ...)  # S3 method for seg_cpt fitness(object, ...)  # S3 method for tidycpt fitness(object, ...)  fitness(object, ...)  # S3 method for ga fitness(object, ...)  # S3 method for cpt fitness(object, ...)  # S3 method for wbs fitness(object, ...)"},{"path":"https://beanumber.github.io/tidychangepoint/reference/fitness.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve the optimal fitness (or objective function) value used by an algorithm — fitness.seg_basket","text":"object segmenter object, typically returned segment() ... currently ignored","code":""},{"path":[]},{"path":"https://beanumber.github.io/tidychangepoint/reference/fitness.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve the optimal fitness (or objective function) value used by an algorithm — fitness.seg_basket","text":"","code":"x <- segment(DataCPSim, method = \"ga\", maxiter = 10) fitness(x) #>      BIC  #> 16387.59   x <- segment(DataCPSim, method = \"wbs\") fitness(x) #> MBIC  #>    0"},{"path":"https://beanumber.github.io/tidychangepoint/reference/ga-generics.html","id":null,"dir":"Reference","previous_headings":"","what":"Compatibility layer for GA — ga-generics","title":"Compatibility layer for GA — ga-generics","text":"Methods generic functions applied ga objects","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/ga-generics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compatibility layer for GA — ga-generics","text":"","code":"# S3 method for ga as.seg_cpt(object, ...)  # S3 method for ga as.ts(x, ...)  # S3 method for ga nobs(object, ...)  # S3 method for ga seg_params(x, ...)"},{"path":"https://beanumber.github.io/tidychangepoint/reference/ga-generics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compatibility layer for GA — ga-generics","text":"object ga object. ... arguments passed methods x GA object returned GA::ga()","code":""},{"path":[]},{"path":"https://beanumber.github.io/tidychangepoint/reference/ga-generics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compatibility layer for GA — ga-generics","text":"","code":"cpts <- segment(DataCPSim, method = \"ga\", maxiter = 10) x <- as.segmenter(cpts) class(x) #> [1] \"tidyga\" #> attr(,\"package\") #> [1] \"tidychangepoint\" as.seg_cpt(x) #> List of 8 #>  $ data        : Time-Series [1:1096] from 1 to 1096: 35.5 29 35.6 33 29.5 ... #>  $ pkg         : chr \"GA\" #>  $ algorithm   : chr \"Genetic\" #>  $ changepoints: Named int [1:524] 5 6 7 8 11 12 14 15 17 20 ... #>   ..- attr(*, \"names\")= chr [1:524] \"x5\" \"x6\" \"x7\" \"x8\" ... #>  $ fitness     : Named num 16555 #>   ..- attr(*, \"names\")= chr \"BIC\" #>  $ seg_params  :List of 1 #>   ..$ :List of 6 #>   .. ..$ popSize      : num 50 #>   .. ..$ iter         : int 10 #>   .. ..$ elitism      : int 2 #>   .. ..$ pcrossover   : num 0.8 #>   .. ..$ pmutation    : num 0.1 #>   .. ..$ model_fn_args:List of 2 #>   .. .. ..$ model_fn  : chr \"meanshift_norm\" #>   .. .. ..$ penalty_fn: chr \"BIC\" #>  $ model_name  : chr \"meanshift_norm\" #>  $ penalty     : chr \"BIC\" #>  - attr(*, \"class\")= chr \"seg_cpt\" as.ts(x)  #> Time Series: #> Start = 1  #> End = 1096  #> Frequency = 1  #>    [1]  35.50961  29.00292  35.63508  32.98452  29.53557  25.40781  28.82497 #>    [8]  50.31157  24.93185  58.88063  30.35777  33.66315  32.58653  42.78788 #>   [15]  45.23963  23.66417  20.00954  31.64746  34.65507  68.49028  43.53948 #>   [22]  25.29938  57.19244  39.51995  23.79025  27.81451  42.00712  36.09812 #>   [29]  32.74664  34.73679  60.20919  55.52211  33.92043  32.48948  22.66494 #>   [36]  24.16119  27.05582  16.09789  31.69439  27.22202  20.64027  33.97673 #>   [43]  46.71000  25.28389  24.88207  41.75347  36.50448  35.98297  31.39612 #>   [50]  44.14153  67.82557  26.81619  27.55292  30.77449  51.17371  51.34317 #>   [57]  23.10056  22.92962  29.39409  73.67531  23.46017  35.36286  29.45083 #>   [64]  54.18062  25.04895  27.47914  51.41767  32.30387  43.17916  30.11288 #>   [71]  22.45535  33.70278  34.16720  44.64931  22.60994  50.26498  50.28394 #>   [78]  33.24944  38.73890  36.75336  52.38881  36.62906  16.68155  35.12389 #>   [85]  35.89239  61.81050  47.85419  30.26446  36.93150  54.81053  30.32479 #>   [92]  37.46579  49.93442  46.01734  24.86685  35.88435  42.25720  37.78741 #>   [99]  46.26335  38.52976  47.99867  44.28395  51.05976  50.99393  36.01026 #>  [106]  37.44409  16.77029  31.05583  22.40344  27.22149  28.31583  58.06805 #>  [113]  38.30690  47.26490  31.55811  47.63268  23.38334  33.30157  46.75618 #>  [120]  30.46511  23.17060  31.52724  38.55479  35.54940  49.63486  38.85458 #>  [127]  35.80205  24.50227  20.49025  31.59546  33.84992  30.02572  23.84156 #>  [134]  27.92167  28.04857  55.54324  23.82133  46.27102  35.95369  47.65766 #>  [141]  31.37265  37.43892  26.73598  39.78209  37.23990  38.69749  25.74961 #>  [148]  15.00954  41.03282  35.55822  28.20253  34.25572  36.72560  25.87219 #>  [155]  34.25647  41.05718  45.99951  35.09617  30.10936  56.29692  21.62607 #>  [162]  32.16878  48.08144  27.56512  24.86829  23.20973  23.35380  24.87480 #>  [169]  41.98302  43.00026  42.37708  57.59545  28.58172  35.77870  28.82814 #>  [176]  35.31054  45.07452  19.92057  49.94871  42.05699  45.69919  40.55247 #>  [183]  28.77050  34.25098  39.57524  27.14581  44.69057  36.14965  49.50564 #>  [190]  49.79043  17.99559  39.65697  44.97010  18.31935  31.24522  31.07475 #>  [197]  21.61906  40.06484  34.99030  21.94425  37.44403  40.21178  38.23743 #>  [204]  31.80890  34.61897  47.81524  34.58307  30.49509  45.29616  49.07757 #>  [211]  24.17640  35.64875  17.63070  21.61867  32.29813  26.41488  28.31542 #>  [218]  25.02318  20.23520  28.13247  63.69313  42.52417  29.03129  54.03181 #>  [225]  25.60167  66.22389  26.02854  43.94607  39.26708  21.90635  33.10292 #>  [232]  31.36953  68.74632  49.57971  36.77692  62.23430  33.17239  34.70213 #>  [239]  29.33086  40.40664  20.51693  56.48982  47.57652  18.78920  39.83695 #>  [246]  23.57444  32.90584  23.97282  29.16350  33.94278  33.32760  40.39087 #>  [253]  37.08789  34.55488  28.07540  34.55889  32.50873  30.26050  31.61021 #>  [260]  29.22609  21.66017  39.99861  31.54268  54.66244  28.83481  50.43102 #>  [267]  41.57023  36.52691  41.74322  29.88869  65.63664  28.92781  31.62743 #>  [274]  60.02248  23.41874  30.41566  49.28914  30.75073  41.08489  35.95343 #>  [281]  26.30653  30.42233  35.58619  27.11696  41.07739  32.16801  54.22658 #>  [288]  30.58481  32.75808  40.14170  38.59850  34.62828  26.92407  32.65613 #>  [295]  21.12857  21.76199  31.72514  32.81883  39.57492  29.56246  26.52171 #>  [302]  33.16808  30.46846  26.71148  20.12177  28.85316  25.85809  73.07025 #>  [309]  50.11722  55.60337  42.62562  53.62811  40.37492  36.09093  54.15097 #>  [316]  52.48111  28.21508  44.33563  15.14660  31.77283  28.02836  42.85488 #>  [323]  30.07936  32.42728  33.91356  17.04858  29.01530  31.04799  24.28621 #>  [330]  35.50456  45.96182  21.99371  38.45540  25.78633  45.07985  27.04933 #>  [337]  50.03548  29.92024  26.27057  24.47919  59.13347  35.87683  42.14550 #>  [344]  29.36456  44.58931  30.97851  21.83860  46.47922  39.71751  20.74531 #>  [351]  21.96494  27.95186  40.64999  65.79466  34.95445  33.87721  27.41981 #>  [358]  19.67562  39.39982  45.69528  22.18879  37.54553  23.15847  28.45508 #>  [365]  25.23477  33.00227  27.16574  34.19212  38.82416  17.26278  38.40626 #>  [372]  57.01508  40.28032  27.15082  32.21021  41.59108  44.75365  31.57659 #>  [379]  44.49800  41.11233  35.23455  24.47634  45.13415  37.24519  42.85021 #>  [386]  32.84645  37.01077  38.96790  40.08106  43.99265  32.24746  27.24075 #>  [393]  31.66613  34.98403  27.29397  34.99001  31.25752  30.07230  27.18477 #>  [400]  37.36462  34.40921  27.16085  37.36703  47.98335  43.48091  23.31231 #>  [407]  20.68531  40.72063  13.66989  27.99689  25.61063  27.89089  17.93238 #>  [414]  23.25505  69.87353  20.53952  38.76444  45.53784  43.99368  25.86236 #>  [421]  23.02465  26.68788  51.99475  31.49945  39.98303  25.96329  18.68290 #>  [428]  45.39740  41.85522  40.88774  33.13019  36.51401  43.93668  28.72223 #>  [435]  17.36850  29.80030  29.36764  33.21636  30.98314  44.00905  49.96474 #>  [442]  32.63317  34.95938  42.09920  25.98961  26.13540  40.91752  27.13926 #>  [449]  23.93415  44.34438  24.80069  39.56627  34.17161  29.33848  51.51685 #>  [456]  38.10154  17.89906  29.84155  20.73680  17.94649  20.14526  30.60828 #>  [463]  37.05229  26.99159  48.47064  29.63704  30.29811  29.44919  50.20743 #>  [470]  25.22852  19.31610  49.49408  31.13921  45.04409  26.36500  21.37141 #>  [477]  33.60464  39.82629  23.44417  50.85233  35.55273  31.42400  52.78349 #>  [484]  46.42078  32.84158  41.58214  37.57874  92.79539  21.87917  35.86701 #>  [491]  44.63170  23.67373  49.57926  37.82632  28.51937  54.19448  25.42921 #>  [498]  31.42047  45.75800  26.14005  32.43037  30.31998  60.34780  35.38384 #>  [505]  17.65934  49.95322  48.97623  24.37608  62.05997  17.90258  35.04199 #>  [512]  25.02686  37.13100  27.42116  46.56513  14.44667  18.13457  30.41839 #>  [519]  40.06058  33.26711  58.99535  23.18483  36.67044  24.95331  27.19064 #>  [526]  26.76947  37.48431  37.13503  22.80870  32.98376  16.45626  25.22453 #>  [533]  35.59700  24.01433  58.24541  34.09432  31.09085  29.28524  20.65437 #>  [540]  24.52000  61.00638  33.59970  19.62836  30.89483  27.49646  47.74031 #>  [547]  38.48854  79.28284  49.83587  41.20827  60.84168  58.74430  73.74234 #>  [554]  62.99021  44.73661  66.14946  78.63431  58.85001  56.29965  49.76806 #>  [561]  66.31184  77.24626  30.20323  34.36305  40.14230 115.76308  53.35118 #>  [568]  56.61291  54.02821  30.86656  64.91494  51.47610  58.02405  46.19877 #>  [575]  75.46288  62.38693  62.12430  29.65914  48.83256  48.45711  87.84555 #>  [582]  48.89591  79.45862  45.43495  61.17216  44.15376  40.81283  28.66775 #>  [589] 100.81542  80.80345  59.82787  60.46746  61.44131  33.23726  52.19624 #>  [596]  83.51128  53.55938  63.91426  43.91224  55.36213  54.68760  56.36276 #>  [603]  50.26803  63.36135  71.84053  44.01963  54.90876  48.05082  73.33604 #>  [610]  40.86609  53.14413  59.74683  74.13609  72.72819  73.80368  46.35780 #>  [617]  39.46049  69.37131  69.23278  39.48316  65.63175  50.51306  79.59284 #>  [624]  43.27989  29.25963  53.94132  47.30325  89.88726  64.49022  53.12747 #>  [631]  51.61317  47.72412 102.46424  79.80996  51.62739  45.94677  44.20380 #>  [638]  62.47154  56.71323  45.20940  33.56516  93.76083  56.27748  43.03061 #>  [645]  86.12136  66.81985 103.73717  45.81972  66.39085  43.21773  56.16747 #>  [652]  59.28413  50.73493  65.26301 107.46498  68.39817  77.53655  63.00234 #>  [659] 100.37694  50.08347  51.31859  47.84582  73.28803  56.60291  49.47953 #>  [666]  74.14721  51.88331  72.97605  37.36928  50.55296  94.49818  85.63369 #>  [673]  47.21940  51.29463  30.87699  40.99069  65.22233  84.18339  36.97547 #>  [680]  67.67693 130.27515  56.50564  52.08214  36.62894  50.17403  43.98132 #>  [687]  63.78818  69.71901  58.66280  34.25625  40.01212  38.51369  31.93027 #>  [694]  70.08009  60.78508  51.19670  65.45439  70.13630  38.38639  46.42615 #>  [701]  59.55314  49.09690  60.75484  66.66783  70.41840  77.79466  57.57120 #>  [708]  66.27876  40.41878  51.19402  90.55426  28.21335  67.71025  52.72485 #>  [715]  37.34428  72.43783  92.29608  55.59297  69.66448  58.30077  50.26778 #>  [722]  74.61613  50.92561  51.97960  99.50324  47.12665  87.80435 119.15289 #>  [729]  96.67512  27.20912  42.35955  51.36019  66.15466  50.99965  31.33727 #>  [736]  29.62981  55.37496  72.04834  44.82771  46.57539  64.62869  38.82131 #>  [743]  53.86127  30.62108  27.37893  85.39840  55.85290  64.89730  94.68730 #>  [750]  35.15146  37.51919  45.72001  89.69830  46.13428  66.35095  37.41977 #>  [757]  43.10677  40.13555  43.13188  24.73451  76.52571  36.36566  71.17790 #>  [764]  56.44084  63.19831  38.86127  56.54947  83.05808  41.66112  60.14119 #>  [771]  73.36839  36.83335  46.99687  68.72470  48.02621  37.04922  67.67630 #>  [778]  46.78206  43.38829  79.76107  43.42811  34.89142  46.70848  85.92108 #>  [785]  65.54841  39.49996  41.09837  47.97916  62.31907  75.42977  83.27070 #>  [792]  73.13176  58.56810  75.03824  37.08341  57.11212  62.88590  80.01578 #>  [799]  31.43220  50.27634  20.52318  57.18749  65.93147  42.64495  60.78448 #>  [806]  42.12619  44.69412  58.64844  68.76875 163.36185  59.30573  44.16434 #>  [813]  74.02857  42.16594  47.80402  46.06946  68.13544  58.27459  44.44837 #>  [820]  49.71347  41.92370  65.10552 190.42879 100.55114  84.73240  95.19440 #>  [827]  62.62765  81.34105  62.84927 119.41128  97.69586 103.24047 132.04779 #>  [834]  63.94897  61.11686  68.83021  80.70128 118.36174  69.88491  75.67939 #>  [841]  97.87433  84.47204 167.57416 119.33953 112.87803  94.60966  54.52644 #>  [848] 134.89541  80.76840 100.86500 125.36064  80.85360  81.27602 102.14881 #>  [855]  62.87013  89.81105  90.54166  77.87923 154.26053 104.44530  89.99370 #>  [862] 137.11783 108.63313  81.65888  91.76187 153.53548  93.17887 131.28943 #>  [869]  58.95745  63.59264  86.73104 159.01308  56.48464  53.76414  79.36095 #>  [876] 104.17268  82.69108  75.47191  80.10494 123.34176 117.11018  82.67987 #>  [883]  87.24288  77.92377 105.19438  75.47461  73.26672 103.96131  88.69445 #>  [890]  67.40834 115.24510 107.64339  93.11673 129.87959 126.03289 118.21727 #>  [897] 101.24318  85.84310  83.24171  94.37437  95.52714  58.18705  70.93290 #>  [904] 135.64519 122.17646  47.94730  81.90610  71.29312  59.56557  90.96883 #>  [911] 105.27981  68.10784  62.24482 118.12494  89.29744 104.93346  54.31292 #>  [918] 118.22755  85.99992  68.28882 116.87775  59.89081  88.51994 124.96078 #>  [925]  48.99528  83.42296  39.21350 104.91602  96.76956 112.59752  71.12703 #>  [932]  88.73937  68.98548  70.70640  93.68761 131.72255  82.59086  81.56980 #>  [939]  80.12171 160.72231 130.68852  61.65840 175.64769 103.14938 133.32521 #>  [946] 160.15746  97.61800 119.62046 125.04584 120.67301 110.96952  62.16252 #>  [953] 215.10540  81.98616 110.52191  53.11782  83.00635  59.01162 167.43096 #>  [960] 146.43115 136.73301  93.53995  92.63548  98.56852  59.88143 101.45146 #>  [967] 102.84065 115.38549 110.87331  96.65850  70.26512  73.19904 204.44288 #>  [974] 120.52524 148.47584 176.52242  72.50633  98.01507  85.07589 122.09749 #>  [981] 173.47087 272.06243 114.84247 194.43547 182.95500  99.70758 155.32184 #>  [988] 234.90205 149.08372 129.43951  92.17400 150.30666 127.34289  95.56536 #>  [995] 183.85856 173.20963 119.36203 298.97556 239.90785 149.72990 145.83624 #> [1002] 199.97769 221.71715 124.50443 127.57657 126.63670 224.84161 193.52027 #> [1009]  67.17684 193.24399 163.77183 115.04808 139.80491 194.08049 142.56183 #> [1016] 150.05278 112.32713 229.27074 123.95988 146.80726 185.69923 111.44768 #> [1023] 148.97687 122.53709 127.37003  92.55487 106.25934 151.61132 166.55049 #> [1030] 166.27216  89.84812 285.64838 210.83361 119.86280 120.26534 166.67314 #> [1037] 128.77576 128.26908 203.90985 124.66021 285.09853 111.19870 185.07644 #> [1044]  88.79945  97.17543 121.60783 183.18550 113.42228 234.66441 148.81920 #> [1051] 127.67544 144.30028 183.15017 180.80073 212.84778  81.80066 156.28369 #> [1058] 217.85070 136.70053 196.65904 155.49179 120.33784 123.21350 293.16047 #> [1065] 141.29326 286.30265 137.11341 191.99534 155.88733 232.83108 141.37831 #> [1072] 114.62536 154.08698 129.56200 197.71852 143.31929 155.63173 166.92790 #> [1079] 151.48311 133.67364 183.79864 134.72402 108.41123 113.01052 145.28928 #> [1086]  85.79995 220.96699 127.18015 215.14311 190.93505 156.44133 164.06449 #> [1093] 164.81190  85.39927 179.14410 135.09159 changepoints(x) #>    x5    x6    x7    x8   x11   x12   x14   x15   x17   x20   x21   x23   x24  #>     5     6     7     8    11    12    14    15    17    20    21    23    24  #>   x25   x27   x28   x29   x30   x31   x33   x35   x36   x38   x41   x42   x43  #>    25    27    28    29    30    31    33    35    36    38    41    42    43  #>   x46   x47   x49   x51   x52   x54   x57   x59   x60   x65   x69   x71   x74  #>    46    47    49    51    52    54    57    59    60    65    69    71    74  #>   x76   x78   x80   x86   x87   x88   x90   x92   x94   x96   x97  x103  x104  #>    76    78    80    86    87    88    90    92    94    96    97   103   104  #>  x106  x107  x108  x109  x110  x111  x113  x115  x120  x122  x126  x127  x128  #>   106   107   108   109   110   111   113   115   120   122   126   127   128  #>  x129  x130  x131  x132  x134  x135  x137  x138  x139  x140  x141  x144  x146  #>   129   130   131   132   134   135   137   138   139   140   141   144   146  #>  x147  x150  x153  x155  x158  x161  x166  x167  x169  x170  x171  x172  x173  #>   147   150   153   155   158   161   166   167   169   170   171   172   173  #>  x174  x175  x178  x179  x180  x182  x183  x184  x190  x192  x196  x197  x202  #>   174   175   178   179   180   182   183   184   190   192   196   197   202  #>  x203  x204  x205  x210  x211  x213  x216  x219  x220  x222  x229  x234  x235  #>   203   204   205   210   211   213   216   219   220   222   229   234   235  #>  x239  x241  x245  x247  x249  x250  x253  x255  x259  x262  x264  x266  x267  #>   239   241   245   247   249   250   253   255   259   262   264   266   267  #>  x268  x273  x275  x276  x277  x280  x282  x285  x286  x288  x290  x291  x293  #>   268   273   275   276   277   280   282   285   286   288   290   291   293  #>  x295  x300  x304  x308  x309  x310  x313  x314  x316  x325  x326  x328  x334  #>   295   300   304   308   309   310   313   314   316   325   326   328   334  #>  x335  x336  x338  x339  x340  x344  x345  x347  x348  x349  x351  x352  x354  #>   335   336   338   339   340   344   345   347   348   349   351   352   354  #>  x355  x356  x368  x369  x370  x371  x372  x374  x375  x378  x379  x383  x385  #>   355   356   368   369   370   371   372   374   375   378   379   383   385  #>  x389  x390  x397  x402  x404  x405  x408  x410  x415  x419  x420  x421  x422  #>   389   390   397   402   404   405   408   410   415   419   420   421   422  #>  x427  x429  x430  x431  x432  x435  x436  x442  x444  x446  x449  x450  x454  #>   427   429   430   431   432   435   436   442   444   446   449   450   454  #>  x455  x461  x463  x464  x466  x468  x469  x470  x473  x474  x476  x477  x478  #>   455   461   463   464   466   468   469   470   473   474   476   477   478  #>  x482  x484  x485  x488  x490  x492  x493  x497  x498  x501  x502  x503  x504  #>   482   484   485   488   490   492   493   497   498   501   502   503   504  #>  x508  x511  x512  x514  x515  x516  x519  x521  x522  x523  x525  x526  x528  #>   508   511   512   514   515   516   519   521   522   523   525   526   528  #>  x529  x530  x531  x533  x535  x539  x544  x545  x547  x549  x551  x552  x556  #>   529   530   531   533   535   539   544   545   547   549   551   552   556  #>  x562  x564  x565  x568  x569  x571  x572  x575  x577  x583  x584  x585  x586  #>   562   564   565   568   569   571   572   575   577   583   584   585   586  #>  x587  x588  x592  x593  x594  x597  x598  x599  x603  x606  x607  x609  x610  #>   587   588   592   593   594   597   598   599   603   606   607   609   610  #>  x615  x618  x619  x620  x622  x625  x626  x627  x630  x632  x634  x635  x637  #>   615   618   619   620   622   625   626   627   630   632   634   635   637  #>  x639  x646  x647  x649  x654  x657  x663  x665  x667  x670  x671  x672  x677  #>   639   646   647   649   654   657   663   665   667   670   671   672   677  #>  x679  x680  x683  x687  x688  x691  x693  x694  x695  x696  x701  x702  x703  #>   679   680   683   687   688   691   693   694   695   696   701   702   703  #>  x704  x705  x706  x709  x710  x711  x712  x713  x714  x715  x716  x717  x718  #>   704   705   706   709   710   711   712   713   714   715   716   717   718  #>  x722  x723  x726  x727  x728  x730  x732  x733  x736  x737  x738  x739  x745  #>   722   723   726   727   728   730   732   733   736   737   738   739   745  #>  x746  x750  x753  x754  x757  x760  x761  x762  x764  x771  x772  x773  x775  #>   746   750   753   754   757   760   761   762   764   771   772   773   775  #>  x776  x778  x783  x784  x785  x786  x787  x796  x799  x800  x801  x802  x803  #>   776   778   783   784   785   786   787   796   799   800   801   802   803  #>  x807  x810  x811  x816  x819  x820  x824  x826  x827  x828  x830  x831  x833  #>   807   810   811   816   819   820   824   826   827   828   830   831   833  #>  x834  x835  x838  x839  x840  x841  x843  x844  x847  x849  x852  x857  x858  #>   834   835   838   839   840   841   843   844   847   849   852   857   858  #>  x865  x866  x867  x873  x874  x876  x881  x882  x883  x884  x886  x887  x889  #>   865   866   867   873   874   876   881   882   883   884   886   887   889  #>  x894  x896  x898  x899  x901  x904  x906  x908  x909  x910  x912  x914  x915  #>   894   896   898   899   901   904   906   908   909   910   912   914   915  #>  x916  x918  x920  x922  x923  x925  x926  x928  x931  x933  x938  x939  x940  #>   916   918   920   922   923   925   926   928   931   933   938   939   940  #>  x942  x944  x945  x948  x950  x952  x953  x954  x956  x957  x959  x961  x962  #>   942   944   945   948   950   952   953   954   956   957   959   961   962  #>  x963  x965  x967  x968  x973  x975  x977  x978  x979  x981  x982  x983  x986  #>   963   965   967   968   973   975   977   978   979   981   982   983   986  #>  x987  x994  x996  x997  x998  x999 x1008 x1009 x1010 x1012 x1013 x1014 x1016  #>   987   994   996   997   998   999  1008  1009  1010  1012  1013  1014  1016  #> x1018 x1019 x1021 x1022 x1024 x1026 x1027 x1030 x1031 x1033 x1035 x1036 x1041  #>  1018  1019  1021  1022  1024  1026  1027  1030  1031  1033  1035  1036  1041  #> x1042 x1049 x1052 x1054 x1056 x1058 x1059 x1061 x1063 x1065 x1066 x1068 x1069  #>  1042  1049  1052  1054  1056  1058  1059  1061  1063  1065  1066  1068  1069  #> x1072 x1073 x1074 x1075 x1077 x1078 x1079 x1081 x1083 x1084 x1085 x1086 x1089  #>  1072  1073  1074  1075  1077  1078  1079  1081  1083  1084  1085  1086  1089  #> x1090 x1093 x1094 x1095  #>  1090  1093  1094  1095  fitness(x) #>      BIC  #> 16555.02  model_name(x) #> [1] \"meanshift_norm\" model_args(x) #> $model_fn #> [1] \"meanshift_norm\" #>  #> $penalty_fn #> [1] \"BIC\" #>  nobs(x) #> [1] 1096 seg_params(x) #> $popSize #> [1] 50 #>  #> $iter #> [1] 10 #>  #> $elitism #> [1] 2 #>  #> $pcrossover #> [1] 0.8 #>  #> $pmutation #> [1] 0.1 #>  #> $model_fn_args #> $model_fn_args$model_fn #> [1] \"meanshift_norm\" #>  #> $model_fn_args$penalty_fn #> [1] \"BIC\" #>  #>  cpts <- segment(DataCPSim, method = \"ga\", maxiter = 5) as.ts(cpts) #> Time Series: #> Start = 1  #> End = 1096  #> Frequency = 1  #>    [1]  35.50961  29.00292  35.63508  32.98452  29.53557  25.40781  28.82497 #>    [8]  50.31157  24.93185  58.88063  30.35777  33.66315  32.58653  42.78788 #>   [15]  45.23963  23.66417  20.00954  31.64746  34.65507  68.49028  43.53948 #>   [22]  25.29938  57.19244  39.51995  23.79025  27.81451  42.00712  36.09812 #>   [29]  32.74664  34.73679  60.20919  55.52211  33.92043  32.48948  22.66494 #>   [36]  24.16119  27.05582  16.09789  31.69439  27.22202  20.64027  33.97673 #>   [43]  46.71000  25.28389  24.88207  41.75347  36.50448  35.98297  31.39612 #>   [50]  44.14153  67.82557  26.81619  27.55292  30.77449  51.17371  51.34317 #>   [57]  23.10056  22.92962  29.39409  73.67531  23.46017  35.36286  29.45083 #>   [64]  54.18062  25.04895  27.47914  51.41767  32.30387  43.17916  30.11288 #>   [71]  22.45535  33.70278  34.16720  44.64931  22.60994  50.26498  50.28394 #>   [78]  33.24944  38.73890  36.75336  52.38881  36.62906  16.68155  35.12389 #>   [85]  35.89239  61.81050  47.85419  30.26446  36.93150  54.81053  30.32479 #>   [92]  37.46579  49.93442  46.01734  24.86685  35.88435  42.25720  37.78741 #>   [99]  46.26335  38.52976  47.99867  44.28395  51.05976  50.99393  36.01026 #>  [106]  37.44409  16.77029  31.05583  22.40344  27.22149  28.31583  58.06805 #>  [113]  38.30690  47.26490  31.55811  47.63268  23.38334  33.30157  46.75618 #>  [120]  30.46511  23.17060  31.52724  38.55479  35.54940  49.63486  38.85458 #>  [127]  35.80205  24.50227  20.49025  31.59546  33.84992  30.02572  23.84156 #>  [134]  27.92167  28.04857  55.54324  23.82133  46.27102  35.95369  47.65766 #>  [141]  31.37265  37.43892  26.73598  39.78209  37.23990  38.69749  25.74961 #>  [148]  15.00954  41.03282  35.55822  28.20253  34.25572  36.72560  25.87219 #>  [155]  34.25647  41.05718  45.99951  35.09617  30.10936  56.29692  21.62607 #>  [162]  32.16878  48.08144  27.56512  24.86829  23.20973  23.35380  24.87480 #>  [169]  41.98302  43.00026  42.37708  57.59545  28.58172  35.77870  28.82814 #>  [176]  35.31054  45.07452  19.92057  49.94871  42.05699  45.69919  40.55247 #>  [183]  28.77050  34.25098  39.57524  27.14581  44.69057  36.14965  49.50564 #>  [190]  49.79043  17.99559  39.65697  44.97010  18.31935  31.24522  31.07475 #>  [197]  21.61906  40.06484  34.99030  21.94425  37.44403  40.21178  38.23743 #>  [204]  31.80890  34.61897  47.81524  34.58307  30.49509  45.29616  49.07757 #>  [211]  24.17640  35.64875  17.63070  21.61867  32.29813  26.41488  28.31542 #>  [218]  25.02318  20.23520  28.13247  63.69313  42.52417  29.03129  54.03181 #>  [225]  25.60167  66.22389  26.02854  43.94607  39.26708  21.90635  33.10292 #>  [232]  31.36953  68.74632  49.57971  36.77692  62.23430  33.17239  34.70213 #>  [239]  29.33086  40.40664  20.51693  56.48982  47.57652  18.78920  39.83695 #>  [246]  23.57444  32.90584  23.97282  29.16350  33.94278  33.32760  40.39087 #>  [253]  37.08789  34.55488  28.07540  34.55889  32.50873  30.26050  31.61021 #>  [260]  29.22609  21.66017  39.99861  31.54268  54.66244  28.83481  50.43102 #>  [267]  41.57023  36.52691  41.74322  29.88869  65.63664  28.92781  31.62743 #>  [274]  60.02248  23.41874  30.41566  49.28914  30.75073  41.08489  35.95343 #>  [281]  26.30653  30.42233  35.58619  27.11696  41.07739  32.16801  54.22658 #>  [288]  30.58481  32.75808  40.14170  38.59850  34.62828  26.92407  32.65613 #>  [295]  21.12857  21.76199  31.72514  32.81883  39.57492  29.56246  26.52171 #>  [302]  33.16808  30.46846  26.71148  20.12177  28.85316  25.85809  73.07025 #>  [309]  50.11722  55.60337  42.62562  53.62811  40.37492  36.09093  54.15097 #>  [316]  52.48111  28.21508  44.33563  15.14660  31.77283  28.02836  42.85488 #>  [323]  30.07936  32.42728  33.91356  17.04858  29.01530  31.04799  24.28621 #>  [330]  35.50456  45.96182  21.99371  38.45540  25.78633  45.07985  27.04933 #>  [337]  50.03548  29.92024  26.27057  24.47919  59.13347  35.87683  42.14550 #>  [344]  29.36456  44.58931  30.97851  21.83860  46.47922  39.71751  20.74531 #>  [351]  21.96494  27.95186  40.64999  65.79466  34.95445  33.87721  27.41981 #>  [358]  19.67562  39.39982  45.69528  22.18879  37.54553  23.15847  28.45508 #>  [365]  25.23477  33.00227  27.16574  34.19212  38.82416  17.26278  38.40626 #>  [372]  57.01508  40.28032  27.15082  32.21021  41.59108  44.75365  31.57659 #>  [379]  44.49800  41.11233  35.23455  24.47634  45.13415  37.24519  42.85021 #>  [386]  32.84645  37.01077  38.96790  40.08106  43.99265  32.24746  27.24075 #>  [393]  31.66613  34.98403  27.29397  34.99001  31.25752  30.07230  27.18477 #>  [400]  37.36462  34.40921  27.16085  37.36703  47.98335  43.48091  23.31231 #>  [407]  20.68531  40.72063  13.66989  27.99689  25.61063  27.89089  17.93238 #>  [414]  23.25505  69.87353  20.53952  38.76444  45.53784  43.99368  25.86236 #>  [421]  23.02465  26.68788  51.99475  31.49945  39.98303  25.96329  18.68290 #>  [428]  45.39740  41.85522  40.88774  33.13019  36.51401  43.93668  28.72223 #>  [435]  17.36850  29.80030  29.36764  33.21636  30.98314  44.00905  49.96474 #>  [442]  32.63317  34.95938  42.09920  25.98961  26.13540  40.91752  27.13926 #>  [449]  23.93415  44.34438  24.80069  39.56627  34.17161  29.33848  51.51685 #>  [456]  38.10154  17.89906  29.84155  20.73680  17.94649  20.14526  30.60828 #>  [463]  37.05229  26.99159  48.47064  29.63704  30.29811  29.44919  50.20743 #>  [470]  25.22852  19.31610  49.49408  31.13921  45.04409  26.36500  21.37141 #>  [477]  33.60464  39.82629  23.44417  50.85233  35.55273  31.42400  52.78349 #>  [484]  46.42078  32.84158  41.58214  37.57874  92.79539  21.87917  35.86701 #>  [491]  44.63170  23.67373  49.57926  37.82632  28.51937  54.19448  25.42921 #>  [498]  31.42047  45.75800  26.14005  32.43037  30.31998  60.34780  35.38384 #>  [505]  17.65934  49.95322  48.97623  24.37608  62.05997  17.90258  35.04199 #>  [512]  25.02686  37.13100  27.42116  46.56513  14.44667  18.13457  30.41839 #>  [519]  40.06058  33.26711  58.99535  23.18483  36.67044  24.95331  27.19064 #>  [526]  26.76947  37.48431  37.13503  22.80870  32.98376  16.45626  25.22453 #>  [533]  35.59700  24.01433  58.24541  34.09432  31.09085  29.28524  20.65437 #>  [540]  24.52000  61.00638  33.59970  19.62836  30.89483  27.49646  47.74031 #>  [547]  38.48854  79.28284  49.83587  41.20827  60.84168  58.74430  73.74234 #>  [554]  62.99021  44.73661  66.14946  78.63431  58.85001  56.29965  49.76806 #>  [561]  66.31184  77.24626  30.20323  34.36305  40.14230 115.76308  53.35118 #>  [568]  56.61291  54.02821  30.86656  64.91494  51.47610  58.02405  46.19877 #>  [575]  75.46288  62.38693  62.12430  29.65914  48.83256  48.45711  87.84555 #>  [582]  48.89591  79.45862  45.43495  61.17216  44.15376  40.81283  28.66775 #>  [589] 100.81542  80.80345  59.82787  60.46746  61.44131  33.23726  52.19624 #>  [596]  83.51128  53.55938  63.91426  43.91224  55.36213  54.68760  56.36276 #>  [603]  50.26803  63.36135  71.84053  44.01963  54.90876  48.05082  73.33604 #>  [610]  40.86609  53.14413  59.74683  74.13609  72.72819  73.80368  46.35780 #>  [617]  39.46049  69.37131  69.23278  39.48316  65.63175  50.51306  79.59284 #>  [624]  43.27989  29.25963  53.94132  47.30325  89.88726  64.49022  53.12747 #>  [631]  51.61317  47.72412 102.46424  79.80996  51.62739  45.94677  44.20380 #>  [638]  62.47154  56.71323  45.20940  33.56516  93.76083  56.27748  43.03061 #>  [645]  86.12136  66.81985 103.73717  45.81972  66.39085  43.21773  56.16747 #>  [652]  59.28413  50.73493  65.26301 107.46498  68.39817  77.53655  63.00234 #>  [659] 100.37694  50.08347  51.31859  47.84582  73.28803  56.60291  49.47953 #>  [666]  74.14721  51.88331  72.97605  37.36928  50.55296  94.49818  85.63369 #>  [673]  47.21940  51.29463  30.87699  40.99069  65.22233  84.18339  36.97547 #>  [680]  67.67693 130.27515  56.50564  52.08214  36.62894  50.17403  43.98132 #>  [687]  63.78818  69.71901  58.66280  34.25625  40.01212  38.51369  31.93027 #>  [694]  70.08009  60.78508  51.19670  65.45439  70.13630  38.38639  46.42615 #>  [701]  59.55314  49.09690  60.75484  66.66783  70.41840  77.79466  57.57120 #>  [708]  66.27876  40.41878  51.19402  90.55426  28.21335  67.71025  52.72485 #>  [715]  37.34428  72.43783  92.29608  55.59297  69.66448  58.30077  50.26778 #>  [722]  74.61613  50.92561  51.97960  99.50324  47.12665  87.80435 119.15289 #>  [729]  96.67512  27.20912  42.35955  51.36019  66.15466  50.99965  31.33727 #>  [736]  29.62981  55.37496  72.04834  44.82771  46.57539  64.62869  38.82131 #>  [743]  53.86127  30.62108  27.37893  85.39840  55.85290  64.89730  94.68730 #>  [750]  35.15146  37.51919  45.72001  89.69830  46.13428  66.35095  37.41977 #>  [757]  43.10677  40.13555  43.13188  24.73451  76.52571  36.36566  71.17790 #>  [764]  56.44084  63.19831  38.86127  56.54947  83.05808  41.66112  60.14119 #>  [771]  73.36839  36.83335  46.99687  68.72470  48.02621  37.04922  67.67630 #>  [778]  46.78206  43.38829  79.76107  43.42811  34.89142  46.70848  85.92108 #>  [785]  65.54841  39.49996  41.09837  47.97916  62.31907  75.42977  83.27070 #>  [792]  73.13176  58.56810  75.03824  37.08341  57.11212  62.88590  80.01578 #>  [799]  31.43220  50.27634  20.52318  57.18749  65.93147  42.64495  60.78448 #>  [806]  42.12619  44.69412  58.64844  68.76875 163.36185  59.30573  44.16434 #>  [813]  74.02857  42.16594  47.80402  46.06946  68.13544  58.27459  44.44837 #>  [820]  49.71347  41.92370  65.10552 190.42879 100.55114  84.73240  95.19440 #>  [827]  62.62765  81.34105  62.84927 119.41128  97.69586 103.24047 132.04779 #>  [834]  63.94897  61.11686  68.83021  80.70128 118.36174  69.88491  75.67939 #>  [841]  97.87433  84.47204 167.57416 119.33953 112.87803  94.60966  54.52644 #>  [848] 134.89541  80.76840 100.86500 125.36064  80.85360  81.27602 102.14881 #>  [855]  62.87013  89.81105  90.54166  77.87923 154.26053 104.44530  89.99370 #>  [862] 137.11783 108.63313  81.65888  91.76187 153.53548  93.17887 131.28943 #>  [869]  58.95745  63.59264  86.73104 159.01308  56.48464  53.76414  79.36095 #>  [876] 104.17268  82.69108  75.47191  80.10494 123.34176 117.11018  82.67987 #>  [883]  87.24288  77.92377 105.19438  75.47461  73.26672 103.96131  88.69445 #>  [890]  67.40834 115.24510 107.64339  93.11673 129.87959 126.03289 118.21727 #>  [897] 101.24318  85.84310  83.24171  94.37437  95.52714  58.18705  70.93290 #>  [904] 135.64519 122.17646  47.94730  81.90610  71.29312  59.56557  90.96883 #>  [911] 105.27981  68.10784  62.24482 118.12494  89.29744 104.93346  54.31292 #>  [918] 118.22755  85.99992  68.28882 116.87775  59.89081  88.51994 124.96078 #>  [925]  48.99528  83.42296  39.21350 104.91602  96.76956 112.59752  71.12703 #>  [932]  88.73937  68.98548  70.70640  93.68761 131.72255  82.59086  81.56980 #>  [939]  80.12171 160.72231 130.68852  61.65840 175.64769 103.14938 133.32521 #>  [946] 160.15746  97.61800 119.62046 125.04584 120.67301 110.96952  62.16252 #>  [953] 215.10540  81.98616 110.52191  53.11782  83.00635  59.01162 167.43096 #>  [960] 146.43115 136.73301  93.53995  92.63548  98.56852  59.88143 101.45146 #>  [967] 102.84065 115.38549 110.87331  96.65850  70.26512  73.19904 204.44288 #>  [974] 120.52524 148.47584 176.52242  72.50633  98.01507  85.07589 122.09749 #>  [981] 173.47087 272.06243 114.84247 194.43547 182.95500  99.70758 155.32184 #>  [988] 234.90205 149.08372 129.43951  92.17400 150.30666 127.34289  95.56536 #>  [995] 183.85856 173.20963 119.36203 298.97556 239.90785 149.72990 145.83624 #> [1002] 199.97769 221.71715 124.50443 127.57657 126.63670 224.84161 193.52027 #> [1009]  67.17684 193.24399 163.77183 115.04808 139.80491 194.08049 142.56183 #> [1016] 150.05278 112.32713 229.27074 123.95988 146.80726 185.69923 111.44768 #> [1023] 148.97687 122.53709 127.37003  92.55487 106.25934 151.61132 166.55049 #> [1030] 166.27216  89.84812 285.64838 210.83361 119.86280 120.26534 166.67314 #> [1037] 128.77576 128.26908 203.90985 124.66021 285.09853 111.19870 185.07644 #> [1044]  88.79945  97.17543 121.60783 183.18550 113.42228 234.66441 148.81920 #> [1051] 127.67544 144.30028 183.15017 180.80073 212.84778  81.80066 156.28369 #> [1058] 217.85070 136.70053 196.65904 155.49179 120.33784 123.21350 293.16047 #> [1065] 141.29326 286.30265 137.11341 191.99534 155.88733 232.83108 141.37831 #> [1072] 114.62536 154.08698 129.56200 197.71852 143.31929 155.63173 166.92790 #> [1079] 151.48311 133.67364 183.79864 134.72402 108.41123 113.01052 145.28928 #> [1086]  85.79995 220.96699 127.18015 215.14311 190.93505 156.44133 164.06449 #> [1093] 164.81190  85.39927 179.14410 135.09159  cpts <- segment(DataCPSim, method = \"ga\", maxiter = 5) nobs(cpts$segmenter) #> [1] 1096"},{"path":"https://beanumber.github.io/tidychangepoint/reference/imusaokomoto.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluanción de rate function (la derivada de la mean) — imusaokomoto","title":"Evaluanción de rate function (la derivada de la mean) — imusaokomoto","text":"Evaluanción de rate function (la derivada de la mean)","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/imusaokomoto.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluanción de rate function (la derivada de la mean) — imusaokomoto","text":"","code":"imusaokomoto(t, theta)  mmusaokomoto(t, theta)  log_likelihood_region_musaokomoto(t, tau_left, tau_right, theta)  log_prior_region_musaokomoto(theta, hyperparameters)  D_log_prior_region_musaokomoto(theta, hyperparameters)  D_log_likelihood_region_musaokomoto(   vec_d_i,   tau1,   tau2,   theta,   nhpp_dist = \"W\" )"},{"path":"https://beanumber.github.io/tidychangepoint/reference/imusaokomoto.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluanción de rate function (la derivada de la mean) — imusaokomoto","text":"t valor evaluar (real) theta vector de parámetros de verosimilitud del NHPP tau_left valor del primer punto de cambio tau_right valor del segundo punto de cambio hyperparameters Hyperparameters vec_d_i vector de días en los que hubo revases entre el los puntos de cambio tau1 y tau2 tau1 valor del primer punto de cambio tau2 valor del segundo punto de cambio nhpp_dist nombre de tasa de NHPP","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/imusaokomoto.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluanción de rate function (la derivada de la mean) — imusaokomoto","text":"regresa la evaluación regresa la evaluación","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/imusaokomoto.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluanción de rate function (la derivada de la mean) — imusaokomoto","text":"","code":"t <- c(1.4, 2.8) theta <- c(1.2, 2.1, 3.2)  imusaokomoto(t, theta) #> [1] 0.8076923 0.5250000  t <- c(1.4, 2.8) theta <- c(1.2, 2.1, 3.2) mmusaokomoto(t, theta) #> [1] 1.623699 2.528343  log_likelihood_region_musaokomoto(DataCPSim, 0, 575, theta = c(0.5, 0.5)) #> [1] -2576.488  hyper <- data.frame(   hyperprior_shape = c(1, 3),   hyperprior_scale = c(2, 1.2) ) log_prior_region_musaokomoto(theta = c(0.5, 0.5), hyper) #> [1] -2.831777"},{"path":"https://beanumber.github.io/tidychangepoint/reference/iweibull.html","id":null,"dir":"Reference","previous_headings":"","what":"Weibull distribution functions — iweibull","title":"Weibull distribution functions — iweibull","text":"Weibull distribution functions","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/iweibull.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Weibull distribution functions — iweibull","text":"","code":"iweibull(x, shape, scale = 1)  mweibull(x, shape, scale = 1)  parameters_weibull(...)  log_likelihood_region_weibull(t, tau_left, tau_right, theta)  log_prior_region_weibull(theta, params = parameters_weibull())  D_log_prior_region_weibull(theta, params = parameters_weibull())  D_log_likelihood_region_weibull(t, tau_left, tau_right, theta)"},{"path":"https://beanumber.github.io/tidychangepoint/reference/iweibull.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Weibull distribution functions — iweibull","text":"x numeric vector shape Shape parameter Weibull distribution. See stats::dweibull(). scale Scale parameter Weibull distribution. See stats::dweibull(). ... currently ignored t vector exceedances tau_left valor del primer punto de cambio tau_right valor del segundo punto de cambio theta vector de parámetros de verosimilitud del NHPP params Possibly modified output parameters_weibull()","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/iweibull.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Weibull distribution functions — iweibull","text":"regresa la evaluación regresa la evaluación","code":""},{"path":[]},{"path":"https://beanumber.github.io/tidychangepoint/reference/iweibull.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Weibull distribution functions — iweibull","text":"","code":"iweibull(1, shape = 1, scale = 1) #> [1] 1 plot(x = 1:10, y = iweibull(1:10, shape = 2, scale = 2))  mweibull(1, shape = 1, scale = 1) #> [1] 1 plot(x = 1:10, y = mweibull(1:10, shape = 1, scale = 1))  plot(x = 1:10, y = mweibull(1:10, shape = 1, scale = 2))  plot(x = 1:10, y = mweibull(1:10, shape = 0.5, scale = 2))  plot(x = 1:10, y = mweibull(1:10, shape = 0.5, scale = 100))  plot(x = 1:10, y = mweibull(1:10, shape = 2, scale = 2))  plot(x = 1:10, y = mweibull(1:10, shape = 2, scale = 100))   log_likelihood_region_weibull(DataCPSim, 0, 575, theta = c(0.5, 2)) #> [1] -3319.222  log_prior_region_weibull(theta = c(0.5, 2)) #> [1] -7.054518 D_log_prior_region_weibull(theta = c(0.5, 2)) #> [1]  1.0 -2.9  D_log_likelihood_region_weibull(DataCPSim, 0, 575, theta = c(0.5, 2)) #> [1] 5661.784 -269.761"},{"path":"https://beanumber.github.io/tidychangepoint/reference/mde_rain.html","id":null,"dir":"Reference","previous_headings":"","what":"Rainfall in Medellín, Colombia — mde_rain","title":"Rainfall in Medellín, Colombia — mde_rain","text":"Rainfall Medellín, Colombia","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/mde_rain.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rainfall in Medellín, Colombia — mde_rain","text":"","code":"mde_rain  mde_rain_monthly"},{"path":"https://beanumber.github.io/tidychangepoint/reference/mde_rain.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Rainfall in Medellín, Colombia — mde_rain","text":"object class spec_tbl_df (inherits tbl_df, tbl, data.frame) 185705 rows 8 columns. object class xts (inherits zoo) 444 rows 1 columns.","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/mde_rain.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Rainfall in Medellín, Colombia — mde_rain","text":"Daily rainfall measurements 13 different weather stations positioned around Medellín, Colombia. Variables: station_id: lat, long: latitude longitude weather station date, year, month, day: date variables rainfall: daily rainfall (cubic centimeters) measured weather station mean_rainfall: average rainfall across weather stations","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/mde_rain.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Rainfall in Medellín, Colombia — mde_rain","text":"OpenStreetMap","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/mlb_hrs.html","id":null,"dir":"Reference","previous_headings":"","what":"Differences between leagues in Major League Baseball — mlb_hrs","title":"Differences between leagues in Major League Baseball — mlb_hrs","text":"difference home runs hit per plate appearance American League National League 1925 2022.","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/mlb_hrs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differences between leagues in Major League Baseball — mlb_hrs","text":"","code":"mlb_hrs"},{"path":"https://beanumber.github.io/tidychangepoint/reference/mlb_hrs.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Differences between leagues in Major League Baseball — mlb_hrs","text":"object class xts (inherits zoo) 98 rows 1 columns.","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/mod_cpt-generics.html","id":null,"dir":"Reference","previous_headings":"","what":"Methods for mod_cpt objects — mod_cpt-generics","title":"Methods for mod_cpt objects — mod_cpt-generics","text":"Methods generic functions applied mod_cpt() objects","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/mod_cpt-generics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Methods for mod_cpt objects — mod_cpt-generics","text":"","code":"# S3 method for mod_cpt as.ts(x, ...)  # S3 method for mod_cpt nobs(object, ...)  # S3 method for mod_cpt logLik(object, ...)  # S3 method for mod_cpt fitted(object, ...)  # S3 method for mod_cpt residuals(object, ...)  model_variance(object, ...)  # S3 method for mod_cpt coef(object, ...)  # S3 method for mod_cpt augment(x, ...)  # S3 method for mod_cpt tidy(x, ...)  # S3 method for mod_cpt glance(x, ...)  # S3 method for mod_cpt plot(x, ...)  # S3 method for mod_cpt print(x, ...)"},{"path":"https://beanumber.github.io/tidychangepoint/reference/mod_cpt-generics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Methods for mod_cpt objects — mod_cpt-generics","text":"x mod_cpt object, typically output one fit_*() functions .model() ... methods generic function require additional    arguments. object object log-likelihood value,    contribution log-likelihood value, can extracted.","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/mod_cpt-generics.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Methods for mod_cpt objects — mod_cpt-generics","text":"changepoint detection models inherit class-mod_cpt: base class changepoint detection models. models created one fit_*() functions, .model(). methods documented work objects.","code":""},{"path":[]},{"path":"https://beanumber.github.io/tidychangepoint/reference/mod_cpt-generics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Methods for mod_cpt objects — mod_cpt-generics","text":"","code":"cpts <- fit_meanshift_norm(DataCPSim, tau = 365) as.ts(cpts) #> Time Series: #> Start = 1  #> End = 1096  #> Frequency = 1  #>    [1]  35.50961  29.00292  35.63508  32.98452  29.53557  25.40781  28.82497 #>    [8]  50.31157  24.93185  58.88063  30.35777  33.66315  32.58653  42.78788 #>   [15]  45.23963  23.66417  20.00954  31.64746  34.65507  68.49028  43.53948 #>   [22]  25.29938  57.19244  39.51995  23.79025  27.81451  42.00712  36.09812 #>   [29]  32.74664  34.73679  60.20919  55.52211  33.92043  32.48948  22.66494 #>   [36]  24.16119  27.05582  16.09789  31.69439  27.22202  20.64027  33.97673 #>   [43]  46.71000  25.28389  24.88207  41.75347  36.50448  35.98297  31.39612 #>   [50]  44.14153  67.82557  26.81619  27.55292  30.77449  51.17371  51.34317 #>   [57]  23.10056  22.92962  29.39409  73.67531  23.46017  35.36286  29.45083 #>   [64]  54.18062  25.04895  27.47914  51.41767  32.30387  43.17916  30.11288 #>   [71]  22.45535  33.70278  34.16720  44.64931  22.60994  50.26498  50.28394 #>   [78]  33.24944  38.73890  36.75336  52.38881  36.62906  16.68155  35.12389 #>   [85]  35.89239  61.81050  47.85419  30.26446  36.93150  54.81053  30.32479 #>   [92]  37.46579  49.93442  46.01734  24.86685  35.88435  42.25720  37.78741 #>   [99]  46.26335  38.52976  47.99867  44.28395  51.05976  50.99393  36.01026 #>  [106]  37.44409  16.77029  31.05583  22.40344  27.22149  28.31583  58.06805 #>  [113]  38.30690  47.26490  31.55811  47.63268  23.38334  33.30157  46.75618 #>  [120]  30.46511  23.17060  31.52724  38.55479  35.54940  49.63486  38.85458 #>  [127]  35.80205  24.50227  20.49025  31.59546  33.84992  30.02572  23.84156 #>  [134]  27.92167  28.04857  55.54324  23.82133  46.27102  35.95369  47.65766 #>  [141]  31.37265  37.43892  26.73598  39.78209  37.23990  38.69749  25.74961 #>  [148]  15.00954  41.03282  35.55822  28.20253  34.25572  36.72560  25.87219 #>  [155]  34.25647  41.05718  45.99951  35.09617  30.10936  56.29692  21.62607 #>  [162]  32.16878  48.08144  27.56512  24.86829  23.20973  23.35380  24.87480 #>  [169]  41.98302  43.00026  42.37708  57.59545  28.58172  35.77870  28.82814 #>  [176]  35.31054  45.07452  19.92057  49.94871  42.05699  45.69919  40.55247 #>  [183]  28.77050  34.25098  39.57524  27.14581  44.69057  36.14965  49.50564 #>  [190]  49.79043  17.99559  39.65697  44.97010  18.31935  31.24522  31.07475 #>  [197]  21.61906  40.06484  34.99030  21.94425  37.44403  40.21178  38.23743 #>  [204]  31.80890  34.61897  47.81524  34.58307  30.49509  45.29616  49.07757 #>  [211]  24.17640  35.64875  17.63070  21.61867  32.29813  26.41488  28.31542 #>  [218]  25.02318  20.23520  28.13247  63.69313  42.52417  29.03129  54.03181 #>  [225]  25.60167  66.22389  26.02854  43.94607  39.26708  21.90635  33.10292 #>  [232]  31.36953  68.74632  49.57971  36.77692  62.23430  33.17239  34.70213 #>  [239]  29.33086  40.40664  20.51693  56.48982  47.57652  18.78920  39.83695 #>  [246]  23.57444  32.90584  23.97282  29.16350  33.94278  33.32760  40.39087 #>  [253]  37.08789  34.55488  28.07540  34.55889  32.50873  30.26050  31.61021 #>  [260]  29.22609  21.66017  39.99861  31.54268  54.66244  28.83481  50.43102 #>  [267]  41.57023  36.52691  41.74322  29.88869  65.63664  28.92781  31.62743 #>  [274]  60.02248  23.41874  30.41566  49.28914  30.75073  41.08489  35.95343 #>  [281]  26.30653  30.42233  35.58619  27.11696  41.07739  32.16801  54.22658 #>  [288]  30.58481  32.75808  40.14170  38.59850  34.62828  26.92407  32.65613 #>  [295]  21.12857  21.76199  31.72514  32.81883  39.57492  29.56246  26.52171 #>  [302]  33.16808  30.46846  26.71148  20.12177  28.85316  25.85809  73.07025 #>  [309]  50.11722  55.60337  42.62562  53.62811  40.37492  36.09093  54.15097 #>  [316]  52.48111  28.21508  44.33563  15.14660  31.77283  28.02836  42.85488 #>  [323]  30.07936  32.42728  33.91356  17.04858  29.01530  31.04799  24.28621 #>  [330]  35.50456  45.96182  21.99371  38.45540  25.78633  45.07985  27.04933 #>  [337]  50.03548  29.92024  26.27057  24.47919  59.13347  35.87683  42.14550 #>  [344]  29.36456  44.58931  30.97851  21.83860  46.47922  39.71751  20.74531 #>  [351]  21.96494  27.95186  40.64999  65.79466  34.95445  33.87721  27.41981 #>  [358]  19.67562  39.39982  45.69528  22.18879  37.54553  23.15847  28.45508 #>  [365]  25.23477  33.00227  27.16574  34.19212  38.82416  17.26278  38.40626 #>  [372]  57.01508  40.28032  27.15082  32.21021  41.59108  44.75365  31.57659 #>  [379]  44.49800  41.11233  35.23455  24.47634  45.13415  37.24519  42.85021 #>  [386]  32.84645  37.01077  38.96790  40.08106  43.99265  32.24746  27.24075 #>  [393]  31.66613  34.98403  27.29397  34.99001  31.25752  30.07230  27.18477 #>  [400]  37.36462  34.40921  27.16085  37.36703  47.98335  43.48091  23.31231 #>  [407]  20.68531  40.72063  13.66989  27.99689  25.61063  27.89089  17.93238 #>  [414]  23.25505  69.87353  20.53952  38.76444  45.53784  43.99368  25.86236 #>  [421]  23.02465  26.68788  51.99475  31.49945  39.98303  25.96329  18.68290 #>  [428]  45.39740  41.85522  40.88774  33.13019  36.51401  43.93668  28.72223 #>  [435]  17.36850  29.80030  29.36764  33.21636  30.98314  44.00905  49.96474 #>  [442]  32.63317  34.95938  42.09920  25.98961  26.13540  40.91752  27.13926 #>  [449]  23.93415  44.34438  24.80069  39.56627  34.17161  29.33848  51.51685 #>  [456]  38.10154  17.89906  29.84155  20.73680  17.94649  20.14526  30.60828 #>  [463]  37.05229  26.99159  48.47064  29.63704  30.29811  29.44919  50.20743 #>  [470]  25.22852  19.31610  49.49408  31.13921  45.04409  26.36500  21.37141 #>  [477]  33.60464  39.82629  23.44417  50.85233  35.55273  31.42400  52.78349 #>  [484]  46.42078  32.84158  41.58214  37.57874  92.79539  21.87917  35.86701 #>  [491]  44.63170  23.67373  49.57926  37.82632  28.51937  54.19448  25.42921 #>  [498]  31.42047  45.75800  26.14005  32.43037  30.31998  60.34780  35.38384 #>  [505]  17.65934  49.95322  48.97623  24.37608  62.05997  17.90258  35.04199 #>  [512]  25.02686  37.13100  27.42116  46.56513  14.44667  18.13457  30.41839 #>  [519]  40.06058  33.26711  58.99535  23.18483  36.67044  24.95331  27.19064 #>  [526]  26.76947  37.48431  37.13503  22.80870  32.98376  16.45626  25.22453 #>  [533]  35.59700  24.01433  58.24541  34.09432  31.09085  29.28524  20.65437 #>  [540]  24.52000  61.00638  33.59970  19.62836  30.89483  27.49646  47.74031 #>  [547]  38.48854  79.28284  49.83587  41.20827  60.84168  58.74430  73.74234 #>  [554]  62.99021  44.73661  66.14946  78.63431  58.85001  56.29965  49.76806 #>  [561]  66.31184  77.24626  30.20323  34.36305  40.14230 115.76308  53.35118 #>  [568]  56.61291  54.02821  30.86656  64.91494  51.47610  58.02405  46.19877 #>  [575]  75.46288  62.38693  62.12430  29.65914  48.83256  48.45711  87.84555 #>  [582]  48.89591  79.45862  45.43495  61.17216  44.15376  40.81283  28.66775 #>  [589] 100.81542  80.80345  59.82787  60.46746  61.44131  33.23726  52.19624 #>  [596]  83.51128  53.55938  63.91426  43.91224  55.36213  54.68760  56.36276 #>  [603]  50.26803  63.36135  71.84053  44.01963  54.90876  48.05082  73.33604 #>  [610]  40.86609  53.14413  59.74683  74.13609  72.72819  73.80368  46.35780 #>  [617]  39.46049  69.37131  69.23278  39.48316  65.63175  50.51306  79.59284 #>  [624]  43.27989  29.25963  53.94132  47.30325  89.88726  64.49022  53.12747 #>  [631]  51.61317  47.72412 102.46424  79.80996  51.62739  45.94677  44.20380 #>  [638]  62.47154  56.71323  45.20940  33.56516  93.76083  56.27748  43.03061 #>  [645]  86.12136  66.81985 103.73717  45.81972  66.39085  43.21773  56.16747 #>  [652]  59.28413  50.73493  65.26301 107.46498  68.39817  77.53655  63.00234 #>  [659] 100.37694  50.08347  51.31859  47.84582  73.28803  56.60291  49.47953 #>  [666]  74.14721  51.88331  72.97605  37.36928  50.55296  94.49818  85.63369 #>  [673]  47.21940  51.29463  30.87699  40.99069  65.22233  84.18339  36.97547 #>  [680]  67.67693 130.27515  56.50564  52.08214  36.62894  50.17403  43.98132 #>  [687]  63.78818  69.71901  58.66280  34.25625  40.01212  38.51369  31.93027 #>  [694]  70.08009  60.78508  51.19670  65.45439  70.13630  38.38639  46.42615 #>  [701]  59.55314  49.09690  60.75484  66.66783  70.41840  77.79466  57.57120 #>  [708]  66.27876  40.41878  51.19402  90.55426  28.21335  67.71025  52.72485 #>  [715]  37.34428  72.43783  92.29608  55.59297  69.66448  58.30077  50.26778 #>  [722]  74.61613  50.92561  51.97960  99.50324  47.12665  87.80435 119.15289 #>  [729]  96.67512  27.20912  42.35955  51.36019  66.15466  50.99965  31.33727 #>  [736]  29.62981  55.37496  72.04834  44.82771  46.57539  64.62869  38.82131 #>  [743]  53.86127  30.62108  27.37893  85.39840  55.85290  64.89730  94.68730 #>  [750]  35.15146  37.51919  45.72001  89.69830  46.13428  66.35095  37.41977 #>  [757]  43.10677  40.13555  43.13188  24.73451  76.52571  36.36566  71.17790 #>  [764]  56.44084  63.19831  38.86127  56.54947  83.05808  41.66112  60.14119 #>  [771]  73.36839  36.83335  46.99687  68.72470  48.02621  37.04922  67.67630 #>  [778]  46.78206  43.38829  79.76107  43.42811  34.89142  46.70848  85.92108 #>  [785]  65.54841  39.49996  41.09837  47.97916  62.31907  75.42977  83.27070 #>  [792]  73.13176  58.56810  75.03824  37.08341  57.11212  62.88590  80.01578 #>  [799]  31.43220  50.27634  20.52318  57.18749  65.93147  42.64495  60.78448 #>  [806]  42.12619  44.69412  58.64844  68.76875 163.36185  59.30573  44.16434 #>  [813]  74.02857  42.16594  47.80402  46.06946  68.13544  58.27459  44.44837 #>  [820]  49.71347  41.92370  65.10552 190.42879 100.55114  84.73240  95.19440 #>  [827]  62.62765  81.34105  62.84927 119.41128  97.69586 103.24047 132.04779 #>  [834]  63.94897  61.11686  68.83021  80.70128 118.36174  69.88491  75.67939 #>  [841]  97.87433  84.47204 167.57416 119.33953 112.87803  94.60966  54.52644 #>  [848] 134.89541  80.76840 100.86500 125.36064  80.85360  81.27602 102.14881 #>  [855]  62.87013  89.81105  90.54166  77.87923 154.26053 104.44530  89.99370 #>  [862] 137.11783 108.63313  81.65888  91.76187 153.53548  93.17887 131.28943 #>  [869]  58.95745  63.59264  86.73104 159.01308  56.48464  53.76414  79.36095 #>  [876] 104.17268  82.69108  75.47191  80.10494 123.34176 117.11018  82.67987 #>  [883]  87.24288  77.92377 105.19438  75.47461  73.26672 103.96131  88.69445 #>  [890]  67.40834 115.24510 107.64339  93.11673 129.87959 126.03289 118.21727 #>  [897] 101.24318  85.84310  83.24171  94.37437  95.52714  58.18705  70.93290 #>  [904] 135.64519 122.17646  47.94730  81.90610  71.29312  59.56557  90.96883 #>  [911] 105.27981  68.10784  62.24482 118.12494  89.29744 104.93346  54.31292 #>  [918] 118.22755  85.99992  68.28882 116.87775  59.89081  88.51994 124.96078 #>  [925]  48.99528  83.42296  39.21350 104.91602  96.76956 112.59752  71.12703 #>  [932]  88.73937  68.98548  70.70640  93.68761 131.72255  82.59086  81.56980 #>  [939]  80.12171 160.72231 130.68852  61.65840 175.64769 103.14938 133.32521 #>  [946] 160.15746  97.61800 119.62046 125.04584 120.67301 110.96952  62.16252 #>  [953] 215.10540  81.98616 110.52191  53.11782  83.00635  59.01162 167.43096 #>  [960] 146.43115 136.73301  93.53995  92.63548  98.56852  59.88143 101.45146 #>  [967] 102.84065 115.38549 110.87331  96.65850  70.26512  73.19904 204.44288 #>  [974] 120.52524 148.47584 176.52242  72.50633  98.01507  85.07589 122.09749 #>  [981] 173.47087 272.06243 114.84247 194.43547 182.95500  99.70758 155.32184 #>  [988] 234.90205 149.08372 129.43951  92.17400 150.30666 127.34289  95.56536 #>  [995] 183.85856 173.20963 119.36203 298.97556 239.90785 149.72990 145.83624 #> [1002] 199.97769 221.71715 124.50443 127.57657 126.63670 224.84161 193.52027 #> [1009]  67.17684 193.24399 163.77183 115.04808 139.80491 194.08049 142.56183 #> [1016] 150.05278 112.32713 229.27074 123.95988 146.80726 185.69923 111.44768 #> [1023] 148.97687 122.53709 127.37003  92.55487 106.25934 151.61132 166.55049 #> [1030] 166.27216  89.84812 285.64838 210.83361 119.86280 120.26534 166.67314 #> [1037] 128.77576 128.26908 203.90985 124.66021 285.09853 111.19870 185.07644 #> [1044]  88.79945  97.17543 121.60783 183.18550 113.42228 234.66441 148.81920 #> [1051] 127.67544 144.30028 183.15017 180.80073 212.84778  81.80066 156.28369 #> [1058] 217.85070 136.70053 196.65904 155.49179 120.33784 123.21350 293.16047 #> [1065] 141.29326 286.30265 137.11341 191.99534 155.88733 232.83108 141.37831 #> [1072] 114.62536 154.08698 129.56200 197.71852 143.31929 155.63173 166.92790 #> [1079] 151.48311 133.67364 183.79864 134.72402 108.41123 113.01052 145.28928 #> [1086]  85.79995 220.96699 127.18015 215.14311 190.93505 156.44133 164.06449 #> [1093] 164.81190  85.39927 179.14410 135.09159 nobs(cpts) #> [1] 1096 logLik(cpts) #> 'log Lik.' -5636.419 (df=4) fitted(cpts) #>    [1] 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 #>    [9] 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 #>   [17] 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 #>   [25] 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 #>   [33] 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 #>   [41] 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 #>   [49] 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 #>   [57] 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 #>   [65] 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 #>   [73] 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 #>   [81] 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 #>   [89] 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 #>   [97] 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 #>  [105] 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 #>  [113] 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 #>  [121] 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 #>  [129] 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 #>  [137] 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 #>  [145] 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 #>  [153] 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 #>  [161] 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 #>  [169] 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 #>  [177] 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 #>  [185] 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 #>  [193] 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 #>  [201] 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 #>  [209] 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 #>  [217] 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 #>  [225] 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 #>  [233] 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 #>  [241] 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 #>  [249] 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 #>  [257] 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 #>  [265] 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 #>  [273] 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 #>  [281] 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 #>  [289] 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 #>  [297] 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 #>  [305] 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 #>  [313] 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 #>  [321] 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 #>  [329] 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 #>  [337] 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 #>  [345] 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 #>  [353] 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 35.75550 #>  [361] 35.75550 35.75550 35.75550 35.75550 76.79424 76.79424 76.79424 76.79424 #>  [369] 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 #>  [377] 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 #>  [385] 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 #>  [393] 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 #>  [401] 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 #>  [409] 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 #>  [417] 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 #>  [425] 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 #>  [433] 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 #>  [441] 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 #>  [449] 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 #>  [457] 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 #>  [465] 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 #>  [473] 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 #>  [481] 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 #>  [489] 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 #>  [497] 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 #>  [505] 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 #>  [513] 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 #>  [521] 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 #>  [529] 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 #>  [537] 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 #>  [545] 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 #>  [553] 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 #>  [561] 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 #>  [569] 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 #>  [577] 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 #>  [585] 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 #>  [593] 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 #>  [601] 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 #>  [609] 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 #>  [617] 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 #>  [625] 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 #>  [633] 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 #>  [641] 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 #>  [649] 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 #>  [657] 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 #>  [665] 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 #>  [673] 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 #>  [681] 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 #>  [689] 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 #>  [697] 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 #>  [705] 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 #>  [713] 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 #>  [721] 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 #>  [729] 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 #>  [737] 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 #>  [745] 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 #>  [753] 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 #>  [761] 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 #>  [769] 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 #>  [777] 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 #>  [785] 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 #>  [793] 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 #>  [801] 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 #>  [809] 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 #>  [817] 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 #>  [825] 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 #>  [833] 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 #>  [841] 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 #>  [849] 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 #>  [857] 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 #>  [865] 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 #>  [873] 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 #>  [881] 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 #>  [889] 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 #>  [897] 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 #>  [905] 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 #>  [913] 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 #>  [921] 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 #>  [929] 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 #>  [937] 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 #>  [945] 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 #>  [953] 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 #>  [961] 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 #>  [969] 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 #>  [977] 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 #>  [985] 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 #>  [993] 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 #> [1001] 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 #> [1009] 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 #> [1017] 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 #> [1025] 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 #> [1033] 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 #> [1041] 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 #> [1049] 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 #> [1057] 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 #> [1065] 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 #> [1073] 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 #> [1081] 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 #> [1089] 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 76.79424 residuals(cpts) #> Time Series: #> Start = 1  #> End = 1096  #> Frequency = 1  #>    [1]  -0.24589590  -6.75258255  -0.12041859  -2.77097920  -6.21992881 #>    [6] -10.34769245  -6.93053431  14.55606567 -10.82365503  23.12513076 #>   [11]  -5.39772954  -2.09235538  -3.16897330   7.03237942   9.48412273 #>   [16] -12.09132952 -15.74596568  -4.10804719  -1.10043760  32.73477373 #>   [21]   7.78397890 -10.45611907  21.43693326   3.76444458 -11.96525470 #>   [26]  -7.94098829   6.25161648   0.34261639  -3.00886394  -1.01871331 #>   [31]  24.45368752  19.76660663  -1.83507529  -3.26601837 -13.09055963 #>   [36] -11.59431452  -8.69968026 -19.65761215  -4.06111144  -8.53348500 #>   [41] -15.11523674  -1.77877706  10.95449795 -10.47161054 -10.87343300 #>   [46]   5.99797123   0.74897881   0.22746599  -4.35938729   8.38602316 #>   [51]  32.07007013  -8.93931562  -8.20258378  -4.98101596  15.41821173 #>   [56]  15.58766431 -12.65494077 -12.82588625  -6.36140820  37.91981181 #>   [61] -12.29532797  -0.39264661  -6.30467633  18.42511963 -10.70655447 #>   [66]  -8.27636790  15.66217009  -3.45163280   7.42365752  -5.64262392 #>   [71] -13.30015134  -2.05272528  -1.58830527   8.89380531 -13.14556697 #>   [76]  14.50947264  14.52844033  -2.50606598   2.98339944   0.99786203 #>   [81]  16.63330416   0.87355922 -19.07395592  -0.63160939   0.13688343 #>   [86]  26.05500072  12.09868720  -5.49104512   1.17599721  19.05502876 #>   [91]  -5.43071441   1.71029129  14.17891773  10.26183513 -10.88865391 #>   [96]   0.12884350   6.50169513   2.03191014  10.50784754   2.77425595 #>  [101]  12.24316474   8.52844213  15.30425561  15.23842998   0.25475217 #>  [106]   1.68858777 -18.98521000  -4.69966812 -13.35206445  -8.53401484 #>  [111]  -7.43967749  22.31254794   2.55139918  11.50940058  -4.19739319 #>  [116]  11.87717934 -12.37216228  -2.45393652  11.00068003  -5.29039254 #>  [121] -12.58490721  -4.22826527   2.79928764  -0.20610496  13.87935556 #>  [126]   3.09907819   0.04654593 -11.25322808 -15.26525168  -4.16004136 #>  [131]  -1.90557931  -5.72978418 -11.91394344  -7.83382923  -7.70693290 #>  [136]  19.78773253 -11.93417567  10.51551407   0.19818518  11.90215438 #>  [141]  -4.38285115   1.68341305  -9.01952306   4.02658962   1.48439665 #>  [146]   2.94198210 -10.00589672 -20.74596365   5.27731259  -0.19728225 #>  [151]  -7.55297715  -1.49977970   0.97009832  -9.88330861  -1.49903274 #>  [156]   5.30167833  10.24400524  -0.65933070  -5.64614414  20.54142158 #>  [161] -14.12943339  -3.58672159  12.32593428  -8.19038568 -10.88720897 #>  [166] -12.54577623 -12.40170302 -10.88070560   6.22751231   7.24475475 #>  [171]   6.62157688  21.83994818  -7.17378155   0.02320074  -6.92736437 #>  [176]  -0.44496768   9.31901505 -15.83493252  14.19320390   6.30148659 #>  [181]   9.94368432   4.79696638  -6.98500608  -1.50452019   3.81974007 #>  [186]  -8.60969114   8.93506699   0.39415031  13.75013505  14.03493016 #>  [191] -17.75991374   3.90147122   9.21460078 -17.43614966  -4.51028148 #>  [196]  -4.68075511 -14.13643946   4.30933910  -0.76520348 -13.81125567 #>  [201]   1.68853027   4.45627592   2.48192923  -3.94660457  -1.13652887 #>  [206]  12.05974030  -1.17243136  -5.26041615   9.54065948  13.32206649 #>  [211] -11.57910628  -0.10674906 -18.12480086 -14.13683300  -3.45737448 #>  [216]  -9.34062484  -7.44008132 -10.73232287 -15.52030168  -7.62303495 #>  [221]  27.93762528   6.76867139  -6.72421674  18.27630926 -10.15382939 #>  [226]  30.46839057  -9.72696035   8.19056423   3.51158047 -13.84915693 #>  [231]  -2.65258661  -4.38596911  32.99082030  13.82420239   1.02141356 #>  [236]  26.47879476  -2.58311265  -1.05336815  -6.42464472   4.65114159 #>  [241] -15.23857378  20.73431749  11.82101982 -16.96630692   4.08144457 #>  [246] -12.18106281  -2.84966411 -11.78268583  -6.59200763  -1.81272030 #>  [251]  -2.42790631   4.63536230   1.33238966  -1.20062113  -7.68010434 #>  [256]  -1.19661271  -3.24677706  -5.49500100  -4.14529332  -6.52941130 #>  [261] -14.09533743   4.24310505  -4.21282482  18.90693470  -6.92069142 #>  [266]  14.67551289   5.81473017   0.77140952   5.98771608  -5.86680920 #>  [271]  29.88113631  -6.82769235  -4.12807093  24.26697869 -12.33676011 #>  [276]  -5.33984535  13.53363445  -5.00477363   5.32938635   0.19792405 #>  [281]  -9.44897134  -5.33316947  -0.16931389  -8.63854413   5.32188833 #>  [286]  -3.58749322  18.47107684  -5.17069291  -2.99742303   4.38619527 #>  [291]   2.84299310  -1.12722393  -8.83143092  -3.09937196 -14.62693417 #>  [296] -13.99351733  -4.03036110  -2.93667579   3.81941267  -6.19303859 #>  [301]  -9.23378861  -2.58741966  -5.28704779  -9.04402216 -15.63373035 #>  [306]  -6.90234786  -9.89741009  37.31474672  14.36171249  19.84786773 #>  [311]   6.87011283  17.87260893   4.61942203   0.33542310  18.39546926 #>  [316]  16.72561160  -7.54042352   8.58012484 -20.60890338  -3.98267241 #>  [321]  -7.72713961   7.09937559  -5.67614176  -3.32822147  -1.84194762 #>  [326] -18.70692079  -6.74020129  -4.70751699 -11.46929044  -0.25094087 #>  [331]  10.20631523 -13.76179142   2.69990053  -9.96917196   9.32434324 #>  [336]  -8.70617609  14.27998032  -5.83525963  -9.48493420 -11.27631524 #>  [341]  23.37796600   0.12132937   6.38999379  -6.39093888   8.83380916 #>  [346]  -4.77698825 -13.91690700  10.72371241   3.96200445 -15.01019573 #>  [351] -13.79056588  -7.80364074   4.89448714  30.03916057  -0.80105495 #>  [356]  -1.87828879  -8.33569420 -16.07988138   3.64432091   9.93977593 #>  [361] -13.56671476   1.79002919 -12.59703734  -7.30042717 -51.55947102 #>  [366] -43.79196812 -49.62849933 -42.60211980 -37.97008515 -59.53146366 #>  [371] -38.38798059 -19.77916149 -36.51391992 -49.64342590 -44.58402857 #>  [376] -35.20316786 -32.04059045 -45.21765513 -32.29624361 -35.68190809 #>  [381] -41.55969318 -52.31790154 -31.66009447 -39.54904997 -33.94402853 #>  [386] -43.94779211 -39.78346921 -37.82634723 -36.71318458 -32.80159501 #>  [391] -44.54678519 -49.55349122 -45.12810883 -41.81021725 -49.50026980 #>  [396] -41.80423064 -45.53672646 -46.72194488 -49.60947699 -39.42962413 #>  [401] -42.38503136 -49.63339477 -39.42721563 -28.81088993 -33.31333763 #>  [406] -53.48193277 -56.10893199 -36.07361466 -63.12435456 -48.79734824 #>  [411] -51.18361659 -48.90335231 -58.86186458 -53.53918882  -6.92070822 #>  [416] -56.25472371 -38.02979966 -31.25640171 -32.80056066 -50.93188501 #>  [421] -53.76958909 -50.10635846 -24.79949522 -45.29479088 -36.81121008 #>  [426] -50.83095693 -58.11133914 -31.39684570 -34.93901966 -35.90650345 #>  [431] -43.66405674 -40.28023447 -32.85756753 -48.07201286 -59.42574790 #>  [436] -46.99394104 -47.42660775 -43.57788264 -45.81109965 -32.78519449 #>  [441] -26.82950413 -44.16107069 -41.83486734 -34.69503822 -50.80462795 #>  [446] -50.65884713 -35.87672005 -49.65498515 -52.86008918 -32.44985913 #>  [451] -51.99354952 -37.22797635 -42.62263365 -47.45576107 -25.27738833 #>  [456] -38.69270512 -58.89518695 -46.95269390 -56.05744305 -58.84775512 #>  [461] -56.64898048 -46.18595817 -39.74195635 -49.80265107 -28.32360423 #>  [466] -47.15720588 -46.49613753 -47.34505621 -26.58681229 -51.56572517 #>  [471] -57.47814231 -27.30016267 -45.65503348 -31.75015699 -50.42924113 #>  [476] -55.42283544 -43.18960301 -36.96795341 -53.35007355 -25.94191727 #>  [481] -41.24151142 -45.37024783 -24.01074853 -30.37346700 -43.95266084 #>  [486] -35.21210717 -39.21550691  16.00114275 -54.91507777 -40.92723238 #>  [491] -32.16254157 -53.12051507 -27.21498080 -38.96792317 -48.27487750 #>  [496] -22.59976713 -51.36502854 -45.37377215 -31.03624251 -50.65419649 #>  [501] -44.36386847 -46.47426173 -16.44644711 -41.41040568 -59.13490262 #>  [506] -26.84102548 -27.81801193 -52.41815928 -14.73426833 -58.89166514 #>  [511] -41.75225072 -51.76738453 -39.66324250 -49.37308650 -30.22910815 #>  [516] -62.34756838 -58.65967375 -46.37585665 -36.73365852 -43.52713718 #>  [521] -17.79888974 -53.60941693 -40.12380689 -51.84093554 -49.60360042 #>  [526] -50.02477757 -39.30992946 -39.65921079 -53.98553956 -43.81048113 #>  [531] -60.33797886 -51.56971746 -41.19723903 -52.77991203 -18.54883013 #>  [536] -42.69992679 -45.70339759 -47.50900617 -56.13987270 -52.27424595 #>  [541] -15.78786528 -43.19454706 -57.16587889 -45.89941712 -49.29777878 #>  [546] -29.05393316 -38.30569868   2.48859466 -26.95836839 -35.58597238 #>  [551] -15.95256253 -18.04994189  -3.05190281 -13.80403026 -32.05763333 #>  [556] -10.64477832   1.84006230 -17.94423563 -20.49459748 -27.02618548 #>  [561] -10.48240790   0.45201225 -46.59101495 -42.43119227 -36.65194666 #>  [566]  38.96883571 -23.44306075 -20.18133495 -22.76603174 -45.92768494 #>  [571] -11.87930227 -25.31814667 -18.77018883 -30.59547454  -1.33136752 #>  [576] -14.40731614 -14.66994470 -47.13510039 -27.96168792 -28.33713763 #>  [581]  11.05130390 -27.89833452   2.66437496 -31.35928841 -15.62208238 #>  [586] -32.64048720 -35.98141310 -48.12648867  24.02117572   4.00920558 #>  [591] -16.96637599 -16.32678694 -15.35293131 -43.55698556 -24.59800425 #>  [596]   6.71703331 -23.23486683 -12.87998530 -32.88200023 -21.43211175 #>  [601] -22.10664243 -20.43147969 -26.52621071 -13.43289393  -4.95371738 #>  [606] -32.77461156 -21.88548724 -28.74342028  -3.45820249 -35.92814918 #>  [611] -23.65010830 -17.04740898  -2.65815140  -4.06605667  -2.99056585 #>  [616] -30.43644794 -37.33374968  -7.42293318  -7.56146732 -37.31108576 #>  [621] -11.16249471 -26.28118670   2.79859946 -33.51435328 -47.53461044 #>  [626] -22.85292473 -29.49099185  13.09302087 -12.30402209 -23.66677018 #>  [631] -25.18107586 -29.07011915  25.66999379   3.01571959 -25.16685227 #>  [636] -30.84747044 -32.59044098 -14.32270395 -20.08101004 -31.58484732 #>  [641] -43.22908012  16.96658986 -20.51676012 -33.76363761   9.32711566 #>  [646]  -9.97438802  26.94292332 -30.97452319 -10.40339387 -33.57651531 #>  [651] -20.62676813 -17.51011200 -26.05930807 -11.53123315  30.67074013 #>  [656]  -8.39607584   0.74231129 -13.79190650  23.58269449 -26.71077098 #>  [661] -25.47565783 -28.94842444  -3.50621736 -20.19133643 -27.31471251 #>  [666]  -2.64703306 -24.91093608  -3.81819709 -39.42495825 -26.24128393 #>  [671]  17.70393680   8.83944427 -29.57484494 -25.49961223 -45.91725028 #>  [676] -35.80355387 -11.57191675   7.38915148 -39.81877118  -9.11731200 #>  [681]  53.48090876 -20.28860338 -24.71209935 -40.16530320 -26.62020898 #>  [686] -32.81292151 -13.00606328  -7.07523680 -18.13144148 -42.53799510 #>  [691] -36.78212147 -38.28055414 -44.86397029  -6.71415414 -16.00916139 #>  [696] -25.59754141 -11.33985110  -6.65794077 -38.40785248 -30.36808840 #>  [701] -17.24110446 -27.69734539 -16.03939907 -10.12641391  -6.37584743 #>  [706]   1.00042183 -19.22304203 -10.51548199 -36.37545816 -25.60022126 #>  [711]  13.76001616 -48.58089310  -9.08399504 -24.06939414 -39.44996477 #>  [716]  -4.35641152  15.50183772 -21.20127723  -7.12975851 -18.49347198 #>  [721] -26.52646778  -2.17811137 -25.86863282 -24.81464475  22.70899369 #>  [726] -29.66759589  11.01010926  42.35864636  19.88087238 -49.58512298 #>  [731] -34.43469655 -25.43405606 -10.63958772 -25.79459133 -45.45697506 #>  [736] -47.16443466 -21.41928431  -4.74589970 -31.96653582 -30.21885620 #>  [741] -12.16555031 -37.97292939 -22.93297102 -46.17315915 -49.41530968 #>  [746]   8.60415698 -20.94133935 -11.89693914  17.89305893 -41.64278161 #>  [751] -39.27505729 -31.07423390  12.90406129 -30.65996246 -10.44328895 #>  [756] -39.37447181 -33.68747198 -36.65869540 -33.66236487 -52.05973476 #>  [761]  -0.26853386 -40.42857865  -5.61633860 -20.35339950 -13.59593565 #>  [766] -37.93297070 -20.24477522   6.26383843 -35.13311902 -16.65305196 #>  [771]  -3.42585368 -39.96089231 -29.79737560  -8.06954434 -28.76803214 #>  [776] -39.74501878  -9.11794753 -30.01218787 -33.40595681   2.96682620 #>  [781] -33.36613189 -41.90282485 -30.08575972   9.12683594 -11.24583625 #>  [786] -37.29428160 -35.69587701 -28.81508586 -14.47516902  -1.36447263 #>  [791]   6.47645434  -3.66247955 -18.22614676  -1.75599841 -39.71083471 #>  [796] -19.68212242 -13.90834113   3.22154201 -45.36204675 -26.51790190 #>  [801] -56.27106107 -19.60675475 -10.86276819 -34.14929655 -16.00976053 #>  [806] -34.66804797 -32.10012412 -18.14580038  -8.02549173  86.56761123 #>  [811] -17.48851785 -32.62990572  -2.76567020 -34.62830033 -28.99022611 #>  [816] -30.72478538  -8.65880565 -18.51965523 -32.34587127 -27.08077428 #>  [821] -34.87054697 -11.68872332 113.63454910  23.75689223   7.93815597 #>  [826]  18.40016173 -14.16658811   4.54681059 -13.94497178  42.61703433 #>  [831]  20.90161575  26.44622816  55.25355022 -12.84527660 -15.67738336 #>  [836]  -7.96403689   3.90703985  41.56750158  -6.90933767  -1.11485046 #>  [841]  21.08008223   7.67779701  90.77991363  42.54528396  36.08379116 #>  [846]  17.81541277 -22.26780525  58.10116347   3.97415820  24.07075670 #>  [851]  48.56639758   4.05935955   4.48177525  25.35456348 -13.92411316 #>  [856]  13.01680785  13.74742110   1.08498729  77.46628875  27.65105674 #>  [861]  13.19945647  60.32358765  31.83888559   4.86464085  14.96762518 #>  [866]  76.74124055  16.38462727  54.49518580 -17.83679065 -13.20160450 #>  [871]   9.93679271  82.21884203 -20.30960500 -23.03010261   2.56670780 #>  [876]  27.37843979   5.89683816  -1.32233380   3.31069334  46.54751458 #>  [881]  40.31594027   5.88563187  10.44863598   1.12953135  28.40014133 #>  [886]  -1.31963272  -3.52751835  27.16706565  11.90020397  -9.38589917 #>  [891]  38.45085572  30.84915029  16.32248948  53.08534922  49.23864964 #>  [896]  41.42302922  24.44893764   9.04885579   6.44746522  17.58012874 #>  [901]  18.73289567 -18.60719379  -5.86134370  58.85094374  45.38221278 #>  [906] -28.84694547   5.11185246  -5.50112642 -17.22867460  14.17458549 #>  [911]  28.48556799  -8.68639962 -14.54941894  41.33069399  12.50319599 #>  [916]  28.13921732 -22.48132077  41.43330965   9.20568079  -8.50542360 #>  [921]  40.08350680 -16.90343759  11.72569595  48.16653282 -27.79896512 #>  [926]   6.62872022 -37.58074466  28.12177844  19.97531318  35.80327941 #>  [931]  -5.66721733  11.94513129  -7.80876601  -6.08784058  16.89336881 #>  [936]  54.92831049   5.79661360   4.77555902   3.32746820  83.92806710 #>  [941]  53.89428063 -15.13584635  98.85344467  26.35513317  56.53096983 #>  [946]  83.36321802  20.82375659  42.82621331  48.25160108  43.87876767 #>  [951]  34.17527246 -14.63172294 138.31116142   5.19191513  33.72767193 #>  [956] -23.67642375   6.21210778 -17.78262640  90.63671446  69.63690522 #>  [961]  59.93877056  16.74571190  15.84123809  21.77428006 -16.91281562 #>  [966]  24.65721445  26.04640930  38.59124308  34.07906225  19.86425870 #>  [971]  -6.52912547  -3.59520401 127.64863798  43.73099721  71.68159438 #>  [976]  99.72817928  -4.28791645  21.22082839   8.28164701  45.30324281 #>  [981]  96.67663127 195.26818760  38.04822789 117.64123035 106.16075991 #>  [986]  22.91333277  78.52759458 158.10780987  72.28947812  52.64526362 #>  [991]  15.37976008  73.51241813  50.54864948  18.77111314 107.06432034 #>  [996]  96.41538686  42.56778410 222.18132153 163.11360726  72.93565842 #> [1001]  69.04199587 123.18344640 144.92290884  47.71019035  50.78232269 #> [1006]  49.84245555 148.04736261 116.72602820  -9.61739854 116.44974861 #> [1011]  86.97758367  38.25383504  63.01066527 117.28624478  65.76758452 #> [1016]  73.25853533  35.53288784 152.47649508  47.16563695  70.01302177 #> [1021] 108.90498367  34.65343556  72.18262934  45.74285133  50.57578378 #> [1026]  15.76062569  29.46509401  74.81708052  89.75625024  89.47791815 #> [1031]  13.05388178 208.85413246 134.03936527  43.06855330  43.47110131 #> [1036]  89.87889496  51.98152147  51.47483512 127.11560536  47.86596782 #> [1041] 208.30428880  34.40445650 108.28219280  12.00520399  20.38118290 #> [1046]  44.81358450 106.39126095  36.62803211 157.87016886  72.02495660 #> [1051]  50.88119421  67.50603277 106.35592779 104.00648805 136.05354151 #> [1056]   5.00642032  79.48945204 141.05645784  59.90628362 119.86479656 #> [1061]  78.69754218  43.54359926  46.41925233 216.36622708  64.49901556 #> [1066] 209.50840908  60.31916524 115.20109429  79.09308622 156.03683379 #> [1071]  64.58406980  37.83111238  77.29273754  52.76775460 120.92427573 #> [1076]  66.52504365  78.83748829  90.13366197  74.68886895  56.87940024 #> [1081] 107.00439830  57.92977853  31.61699079  36.21627468  68.49503669 #> [1086]   9.00571116 144.17274296  50.38590801 138.34886486 114.14081154 #> [1091]  79.64708283  87.27024637  88.01765363   8.60502728 102.34985316 #> [1096]  58.29734714 changepoints(cpts) #> [1] 365 augment(cpts) #> # A tsibble: 1,096 x 5 [1] #> # Groups:    region [2] #>    index     y region  .fitted  .resid #>    <int> <dbl> <fct>     <dbl>   <dbl> #>  1     1  35.5 [0,365)    35.8  -0.246 #>  2     2  29.0 [0,365)    35.8  -6.75  #>  3     3  35.6 [0,365)    35.8  -0.120 #>  4     4  33.0 [0,365)    35.8  -2.77  #>  5     5  29.5 [0,365)    35.8  -6.22  #>  6     6  25.4 [0,365)    35.8 -10.3   #>  7     7  28.8 [0,365)    35.8  -6.93  #>  8     8  50.3 [0,365)    35.8  14.6   #>  9     9  24.9 [0,365)    35.8 -10.8   #> 10    10  58.9 [0,365)    35.8  23.1   #> # ℹ 1,086 more rows tidy(cpts) #> # A tibble: 2 × 9 #>   region        num_obs   min   max  mean    sd begin   end param_mu #>   <chr>           <int> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>    <dbl> #> 1 [0,365)           364  15.0  73.7  35.8  11.2     0   365     35.8 #> 2 [365,1.1e+03]     732  13.7 299.   76.8  50.1   365  1096     76.8 glance(cpts) #> # A tibble: 1 × 11 #>   pkg        version algorithm params num_cpts  rmse logLik    AIC    BIC   MBIC #>   <chr>      <pckg_> <chr>     <list>    <int> <dbl>  <dbl>  <dbl>  <dbl>  <dbl> #> 1 tidychang… 0.0.1   meanshif… <dbl>         1  41.4 -5636. 11281. 11301. 11292. #> # ℹ 1 more variable: MDL <dbl> plot(fit_meanshift_norm(CET, tau = 330))  plot(fit_trendshift(CET, tau = 330))  plot(fit_lmshift(CET, tau = 330, deg_poly = 2))  plot(fit_lmshift(CET, tau = 330, deg_poly = 10))"},{"path":"https://beanumber.github.io/tidychangepoint/reference/model_args.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve the arguments that a model-fitting function used — model_args.seg_cpt","title":"Retrieve the arguments that a model-fitting function used — model_args.seg_cpt","text":"Retrieve arguments model-fitting function used","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/model_args.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve the arguments that a model-fitting function used — model_args.seg_cpt","text":"","code":"# S3 method for seg_cpt model_args(object, ...)  model_args(object, ...)  # S3 method for default model_args(object, ...)  # S3 method for ga model_args(object, ...)  # S3 method for cpt model_args(object, ...)  # S3 method for wbs model_args(object, ...)"},{"path":"https://beanumber.github.io/tidychangepoint/reference/model_args.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve the arguments that a model-fitting function used — model_args.seg_cpt","text":"object segmenter object, typically returned segment() ... currently ignored","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/model_args.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve the arguments that a model-fitting function used — model_args.seg_cpt","text":"model_args(): named list arguments, NULL","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/model_args.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve the arguments that a model-fitting function used — model_args.seg_cpt","text":"Every segmenter uses model-fitting function, functions sometimes take arguments. model_args() recovers arguments passed model fitting function called. especially important using genetic algorithm.","code":""},{"path":[]},{"path":"https://beanumber.github.io/tidychangepoint/reference/model_args.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve the arguments that a model-fitting function used — model_args.seg_cpt","text":"","code":"x <- segment(CET, method = \"ga-coen\", maxiter = 3) #> Seeding initial population with probability: 0.0276243093922652 model_args(x$segmenter) #> $model_fn #> [1] \"nhpp\" #>  #> $penalty_fn #> [1] \"BMDL\" #>"},{"path":"https://beanumber.github.io/tidychangepoint/reference/model_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve the name of the model that a segmenter or model used — model_name.mod_cpt","title":"Retrieve the name of the model that a segmenter or model used — model_name.mod_cpt","text":"Retrieve name model segmenter model used","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/model_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve the name of the model that a segmenter or model used — model_name.mod_cpt","text":"","code":"# S3 method for mod_cpt model_name(object, ...)  # S3 method for seg_basket model_name(object, ...)  # S3 method for seg_cpt model_name(object, ...)  # S3 method for tidycpt model_name(object, ...)  model_name(object, ...)  # S3 method for default model_name(object, ...)  # S3 method for character model_name(object, ...)  # S3 method for ga model_name(object, ...)  # S3 method for cpt model_name(object, ...)  # S3 method for wbs model_name(object, ...)"},{"path":"https://beanumber.github.io/tidychangepoint/reference/model_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve the name of the model that a segmenter or model used — model_name.mod_cpt","text":"object segmenter object, typically returned segment() ... currently ignored","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/model_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve the name of the model that a segmenter or model used — model_name.mod_cpt","text":"model_name(): character vector length 1.","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/model_name.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve the name of the model that a segmenter or model used — model_name.mod_cpt","text":"Every segmenter works fitting model data. model_name() returns name model can passed whomademe() retrieve model fitting function. functions must begin prefix fit_. Note model fitting functions exist tidychangepoint necessarily actual functions used segmenter. Models also implement model_name().","code":""},{"path":[]},{"path":"https://beanumber.github.io/tidychangepoint/reference/model_name.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve the name of the model that a segmenter or model used — model_name.mod_cpt","text":"","code":"x <- segment(CET, method = \"pelt\") model_name(x$segmenter) #> [1] \"meanvar\" whomademe(model_name(x)) #> function (x, tau, ...)  #> { #>     if (!is_valid_tau(tau, length(x))) { #>         stop(\"Invalid changepoint set\") #>     } #>     else { #>         tau <- unique(tau) #>     } #>     regions <- split_by_tau(as.ts(x), tau) #>     region_mods <- purrr::map(regions, ~fit_meanshift_norm(.x,  #>         tau = NULL)) #>     fitted_values <- purrr::list_c(purrr::map(region_mods, ~c(fitted(.x)))) #>     region_params <- dplyr::mutate(purrr::list_rbind(purrr::map(region_mods,  #>         purrr::pluck(\"region_params\"))), region = names(regions)) #>     region_params$param_sigma_hatsq <- purrr::map_dbl(region_mods,  #>         model_variance) #>     mod_cpt(x <- as.ts(x), tau = tau, region_params = region_params,  #>         model_params = c(), fitted_values = fitted_values, model_name = \"meanvar\") #> } #> <bytecode: 0x556cea46bb98> #> <environment: namespace:tidychangepoint> #> attr(,\"model_name\") #> [1] \"meanvar\" #> attr(,\"class\") #> [1] \"fun_cpt\" model_name(x$segmenter) #> [1] \"meanvar\" model_name(x$model) #> [1] \"meanvar\""},{"path":"https://beanumber.github.io/tidychangepoint/reference/new_fun_cpt.html","id":null,"dir":"Reference","previous_headings":"","what":"Class for model-fitting functions — new_fun_cpt","title":"Class for model-fitting functions — new_fun_cpt","text":"Class model-fitting functions","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/new_fun_cpt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Class for model-fitting functions — new_fun_cpt","text":"","code":"new_fun_cpt(x, ...)  validate_fun_cpt(x)  fun_cpt(x, ...)  whomademe(x, ...)"},{"path":"https://beanumber.github.io/tidychangepoint/reference/new_fun_cpt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class for model-fitting functions — new_fun_cpt","text":"x character giving name model. Typically result model_name(). ... currently ignored","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/new_fun_cpt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Class for model-fitting functions — new_fun_cpt","text":"whomademe(): function","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/new_fun_cpt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Class for model-fitting functions — new_fun_cpt","text":"model-fitting functions must take least three arguments: x (time series), tau (set changepoint indices), dots .... See fit_meanshift_norm(),","code":""},{"path":[]},{"path":"https://beanumber.github.io/tidychangepoint/reference/new_fun_cpt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class for model-fitting functions — new_fun_cpt","text":"","code":"f <- fun_cpt(\"fit_meanvar\") str(f) #> function (x, tau, ...)   #>  - attr(*, \"model_name\")= chr \"meanvar\" #>  - attr(*, \"class\")= chr \"fun_cpt\" f(CET, 42) #> List of 6 #>  $ data         : Time-Series [1:362] from 1 to 362: 8.87 9.1 9.78 9.52 8.63 9.34 8.29 9.86 8.52 9.51 ... #>  $ tau          : num 42 #>  $ region_params: tibble [2 × 3] (S3: tbl_df/tbl/data.frame) #>   ..$ region           : chr [1:2] \"[0,42)\" \"[42,362]\" #>   ..$ param_mu         : num [1:2] 8.68 9.35 #>   ..$ param_sigma_hatsq: Named num [1:2] 0.389 0.418 #>   .. ..- attr(*, \"names\")= chr [1:2] \"[0,42)\" \"[42,362]\" #>  $ model_params : NULL #>  $ fitted_values: num [1:362] 8.68 8.68 8.68 8.68 8.68 ... #>  $ model_name   : chr \"meanvar\" #>  - attr(*, \"class\")= chr \"mod_cpt\" f <- whomademe(fit_meanshift_norm(CET, tau = 42)) str(f) #> function (x, tau, ...)   #>  - attr(*, \"model_name\")= chr \"meanshift_norm\" #>  - attr(*, \"class\")= chr \"fun_cpt\""},{"path":"https://beanumber.github.io/tidychangepoint/reference/new_seg_basket.html","id":null,"dir":"Reference","previous_headings":"","what":"Default class for candidate changepoint sets — new_seg_basket","title":"Default class for candidate changepoint sets — new_seg_basket","text":"Default class candidate changepoint sets","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/new_seg_basket.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default class for candidate changepoint sets — new_seg_basket","text":"","code":"new_seg_basket(   x = numeric(),   algorithm = NA,   cpt_list = list(),   seg_params = list(),   model_name = \"meanshift_norm\",   penalty = \"BIC\",   ... )  validate_seg_basket(x)  seg_basket(x, ...)  # S3 method for seg_basket evaluate_cpts(x, ...)  # S3 method for list evaluate_cpts(x, .data, model_fn, ...)  # S3 method for tbl_df evaluate_cpts(x, .data, model_fn, ...)  evaluate_cpts(x, ...)"},{"path":"https://beanumber.github.io/tidychangepoint/reference/new_seg_basket.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default class for candidate changepoint sets — new_seg_basket","text":"x numeric vector coercible ts object algorithm Algorithm used find changepoints cpt_list possibly empty list() candidate changepoints seg_params possibly empty list() segmenter parameters model_name character indicating model used find changepoints. penalty character indicating name penalty function used find changepoints. ... currently ignored .data time series model_fn Name function fit model. See, examples, fit_meanshift().","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/new_seg_basket.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Default class for candidate changepoint sets — new_seg_basket","text":"","code":"seg <- seg_basket(DataCPSim, cpt_list = list(c(365), c(330, 839))) str(seg) #> List of 6 #>  $ data      : Time-Series [1:1096] from 1 to 1096: 35.5 29 35.6 33 29.5 ... #>  $ algorithm : logi NA #>  $ basket    : tibble [2 × 7] (S3: tbl_df/tbl/data.frame) #>   ..$ changepoints:List of 2 #>   .. ..$ : num 365 #>   .. ..$ : num [1:2] 330 839 #>   ..$ model       :List of 2 #>   .. ..$ :List of 6 #>   .. .. ..$ data         : Time-Series [1:1096] from 1 to 1096: 35.5 29 35.6 33 29.5 ... #>   .. .. ..$ tau          : num 365 #>   .. .. ..$ region_params: tibble [2 × 2] (S3: tbl_df/tbl/data.frame) #>   .. .. .. ..$ region  : chr [1:2] \"[0,365)\" \"[365,1.1e+03]\" #>   .. .. .. ..$ param_mu: num [1:2] 35.8 76.8 #>   .. .. ..$ model_params : Named num 1716 #>   .. .. .. ..- attr(*, \"names\")= chr \"sigma_hatsq\" #>   .. .. ..$ fitted_values: num [1:1096] 35.8 35.8 35.8 35.8 35.8 ... #>   .. .. ..$ model_name   : chr \"meanshift_norm\" #>   .. .. ..- attr(*, \"class\")= chr \"mod_cpt\" #>   .. ..$ :List of 6 #>   .. .. ..$ data         : Time-Series [1:1096] from 1 to 1096: 35.5 29 35.6 33 29.5 ... #>   .. .. ..$ tau          : num [1:2] 330 839 #>   .. .. ..$ region_params: tibble [3 × 2] (S3: tbl_df/tbl/data.frame) #>   .. .. .. ..$ region  : chr [1:3] \"[0,330)\" \"[330,839)\" \"[839,1.1e+03]\" #>   .. .. .. ..$ param_mu: num [1:3] 35.9 49.2 125.6 #>   .. .. ..$ model_params : Named num 858 #>   .. .. .. ..- attr(*, \"names\")= chr \"sigma_hatsq\" #>   .. .. ..$ fitted_values: num [1:1096] 35.9 35.9 35.9 35.9 35.9 ... #>   .. .. ..$ model_name   : chr \"meanshift_norm\" #>   .. .. ..- attr(*, \"class\")= chr \"mod_cpt\" #>   ..$ logLik      : num [1:2] -5636 -5256 #>   ..$ AIC         : num [1:2] 11281 10525 #>   ..$ BIC         : num [1:2] 11301 10555 #>   ..$ MBIC        : num [1:2] 11292 10551 #>   ..$ MDL         : num [1:2] 11306 10566 #>  $ seg_params: list() #>  $ model_name: chr \"meanshift_norm\" #>  $ penalty   : chr \"BIC\" #>  - attr(*, \"class\")= chr \"seg_basket\" as.ts(seg) #> Time Series: #> Start = 1  #> End = 1096  #> Frequency = 1  #>    [1]  35.50961  29.00292  35.63508  32.98452  29.53557  25.40781  28.82497 #>    [8]  50.31157  24.93185  58.88063  30.35777  33.66315  32.58653  42.78788 #>   [15]  45.23963  23.66417  20.00954  31.64746  34.65507  68.49028  43.53948 #>   [22]  25.29938  57.19244  39.51995  23.79025  27.81451  42.00712  36.09812 #>   [29]  32.74664  34.73679  60.20919  55.52211  33.92043  32.48948  22.66494 #>   [36]  24.16119  27.05582  16.09789  31.69439  27.22202  20.64027  33.97673 #>   [43]  46.71000  25.28389  24.88207  41.75347  36.50448  35.98297  31.39612 #>   [50]  44.14153  67.82557  26.81619  27.55292  30.77449  51.17371  51.34317 #>   [57]  23.10056  22.92962  29.39409  73.67531  23.46017  35.36286  29.45083 #>   [64]  54.18062  25.04895  27.47914  51.41767  32.30387  43.17916  30.11288 #>   [71]  22.45535  33.70278  34.16720  44.64931  22.60994  50.26498  50.28394 #>   [78]  33.24944  38.73890  36.75336  52.38881  36.62906  16.68155  35.12389 #>   [85]  35.89239  61.81050  47.85419  30.26446  36.93150  54.81053  30.32479 #>   [92]  37.46579  49.93442  46.01734  24.86685  35.88435  42.25720  37.78741 #>   [99]  46.26335  38.52976  47.99867  44.28395  51.05976  50.99393  36.01026 #>  [106]  37.44409  16.77029  31.05583  22.40344  27.22149  28.31583  58.06805 #>  [113]  38.30690  47.26490  31.55811  47.63268  23.38334  33.30157  46.75618 #>  [120]  30.46511  23.17060  31.52724  38.55479  35.54940  49.63486  38.85458 #>  [127]  35.80205  24.50227  20.49025  31.59546  33.84992  30.02572  23.84156 #>  [134]  27.92167  28.04857  55.54324  23.82133  46.27102  35.95369  47.65766 #>  [141]  31.37265  37.43892  26.73598  39.78209  37.23990  38.69749  25.74961 #>  [148]  15.00954  41.03282  35.55822  28.20253  34.25572  36.72560  25.87219 #>  [155]  34.25647  41.05718  45.99951  35.09617  30.10936  56.29692  21.62607 #>  [162]  32.16878  48.08144  27.56512  24.86829  23.20973  23.35380  24.87480 #>  [169]  41.98302  43.00026  42.37708  57.59545  28.58172  35.77870  28.82814 #>  [176]  35.31054  45.07452  19.92057  49.94871  42.05699  45.69919  40.55247 #>  [183]  28.77050  34.25098  39.57524  27.14581  44.69057  36.14965  49.50564 #>  [190]  49.79043  17.99559  39.65697  44.97010  18.31935  31.24522  31.07475 #>  [197]  21.61906  40.06484  34.99030  21.94425  37.44403  40.21178  38.23743 #>  [204]  31.80890  34.61897  47.81524  34.58307  30.49509  45.29616  49.07757 #>  [211]  24.17640  35.64875  17.63070  21.61867  32.29813  26.41488  28.31542 #>  [218]  25.02318  20.23520  28.13247  63.69313  42.52417  29.03129  54.03181 #>  [225]  25.60167  66.22389  26.02854  43.94607  39.26708  21.90635  33.10292 #>  [232]  31.36953  68.74632  49.57971  36.77692  62.23430  33.17239  34.70213 #>  [239]  29.33086  40.40664  20.51693  56.48982  47.57652  18.78920  39.83695 #>  [246]  23.57444  32.90584  23.97282  29.16350  33.94278  33.32760  40.39087 #>  [253]  37.08789  34.55488  28.07540  34.55889  32.50873  30.26050  31.61021 #>  [260]  29.22609  21.66017  39.99861  31.54268  54.66244  28.83481  50.43102 #>  [267]  41.57023  36.52691  41.74322  29.88869  65.63664  28.92781  31.62743 #>  [274]  60.02248  23.41874  30.41566  49.28914  30.75073  41.08489  35.95343 #>  [281]  26.30653  30.42233  35.58619  27.11696  41.07739  32.16801  54.22658 #>  [288]  30.58481  32.75808  40.14170  38.59850  34.62828  26.92407  32.65613 #>  [295]  21.12857  21.76199  31.72514  32.81883  39.57492  29.56246  26.52171 #>  [302]  33.16808  30.46846  26.71148  20.12177  28.85316  25.85809  73.07025 #>  [309]  50.11722  55.60337  42.62562  53.62811  40.37492  36.09093  54.15097 #>  [316]  52.48111  28.21508  44.33563  15.14660  31.77283  28.02836  42.85488 #>  [323]  30.07936  32.42728  33.91356  17.04858  29.01530  31.04799  24.28621 #>  [330]  35.50456  45.96182  21.99371  38.45540  25.78633  45.07985  27.04933 #>  [337]  50.03548  29.92024  26.27057  24.47919  59.13347  35.87683  42.14550 #>  [344]  29.36456  44.58931  30.97851  21.83860  46.47922  39.71751  20.74531 #>  [351]  21.96494  27.95186  40.64999  65.79466  34.95445  33.87721  27.41981 #>  [358]  19.67562  39.39982  45.69528  22.18879  37.54553  23.15847  28.45508 #>  [365]  25.23477  33.00227  27.16574  34.19212  38.82416  17.26278  38.40626 #>  [372]  57.01508  40.28032  27.15082  32.21021  41.59108  44.75365  31.57659 #>  [379]  44.49800  41.11233  35.23455  24.47634  45.13415  37.24519  42.85021 #>  [386]  32.84645  37.01077  38.96790  40.08106  43.99265  32.24746  27.24075 #>  [393]  31.66613  34.98403  27.29397  34.99001  31.25752  30.07230  27.18477 #>  [400]  37.36462  34.40921  27.16085  37.36703  47.98335  43.48091  23.31231 #>  [407]  20.68531  40.72063  13.66989  27.99689  25.61063  27.89089  17.93238 #>  [414]  23.25505  69.87353  20.53952  38.76444  45.53784  43.99368  25.86236 #>  [421]  23.02465  26.68788  51.99475  31.49945  39.98303  25.96329  18.68290 #>  [428]  45.39740  41.85522  40.88774  33.13019  36.51401  43.93668  28.72223 #>  [435]  17.36850  29.80030  29.36764  33.21636  30.98314  44.00905  49.96474 #>  [442]  32.63317  34.95938  42.09920  25.98961  26.13540  40.91752  27.13926 #>  [449]  23.93415  44.34438  24.80069  39.56627  34.17161  29.33848  51.51685 #>  [456]  38.10154  17.89906  29.84155  20.73680  17.94649  20.14526  30.60828 #>  [463]  37.05229  26.99159  48.47064  29.63704  30.29811  29.44919  50.20743 #>  [470]  25.22852  19.31610  49.49408  31.13921  45.04409  26.36500  21.37141 #>  [477]  33.60464  39.82629  23.44417  50.85233  35.55273  31.42400  52.78349 #>  [484]  46.42078  32.84158  41.58214  37.57874  92.79539  21.87917  35.86701 #>  [491]  44.63170  23.67373  49.57926  37.82632  28.51937  54.19448  25.42921 #>  [498]  31.42047  45.75800  26.14005  32.43037  30.31998  60.34780  35.38384 #>  [505]  17.65934  49.95322  48.97623  24.37608  62.05997  17.90258  35.04199 #>  [512]  25.02686  37.13100  27.42116  46.56513  14.44667  18.13457  30.41839 #>  [519]  40.06058  33.26711  58.99535  23.18483  36.67044  24.95331  27.19064 #>  [526]  26.76947  37.48431  37.13503  22.80870  32.98376  16.45626  25.22453 #>  [533]  35.59700  24.01433  58.24541  34.09432  31.09085  29.28524  20.65437 #>  [540]  24.52000  61.00638  33.59970  19.62836  30.89483  27.49646  47.74031 #>  [547]  38.48854  79.28284  49.83587  41.20827  60.84168  58.74430  73.74234 #>  [554]  62.99021  44.73661  66.14946  78.63431  58.85001  56.29965  49.76806 #>  [561]  66.31184  77.24626  30.20323  34.36305  40.14230 115.76308  53.35118 #>  [568]  56.61291  54.02821  30.86656  64.91494  51.47610  58.02405  46.19877 #>  [575]  75.46288  62.38693  62.12430  29.65914  48.83256  48.45711  87.84555 #>  [582]  48.89591  79.45862  45.43495  61.17216  44.15376  40.81283  28.66775 #>  [589] 100.81542  80.80345  59.82787  60.46746  61.44131  33.23726  52.19624 #>  [596]  83.51128  53.55938  63.91426  43.91224  55.36213  54.68760  56.36276 #>  [603]  50.26803  63.36135  71.84053  44.01963  54.90876  48.05082  73.33604 #>  [610]  40.86609  53.14413  59.74683  74.13609  72.72819  73.80368  46.35780 #>  [617]  39.46049  69.37131  69.23278  39.48316  65.63175  50.51306  79.59284 #>  [624]  43.27989  29.25963  53.94132  47.30325  89.88726  64.49022  53.12747 #>  [631]  51.61317  47.72412 102.46424  79.80996  51.62739  45.94677  44.20380 #>  [638]  62.47154  56.71323  45.20940  33.56516  93.76083  56.27748  43.03061 #>  [645]  86.12136  66.81985 103.73717  45.81972  66.39085  43.21773  56.16747 #>  [652]  59.28413  50.73493  65.26301 107.46498  68.39817  77.53655  63.00234 #>  [659] 100.37694  50.08347  51.31859  47.84582  73.28803  56.60291  49.47953 #>  [666]  74.14721  51.88331  72.97605  37.36928  50.55296  94.49818  85.63369 #>  [673]  47.21940  51.29463  30.87699  40.99069  65.22233  84.18339  36.97547 #>  [680]  67.67693 130.27515  56.50564  52.08214  36.62894  50.17403  43.98132 #>  [687]  63.78818  69.71901  58.66280  34.25625  40.01212  38.51369  31.93027 #>  [694]  70.08009  60.78508  51.19670  65.45439  70.13630  38.38639  46.42615 #>  [701]  59.55314  49.09690  60.75484  66.66783  70.41840  77.79466  57.57120 #>  [708]  66.27876  40.41878  51.19402  90.55426  28.21335  67.71025  52.72485 #>  [715]  37.34428  72.43783  92.29608  55.59297  69.66448  58.30077  50.26778 #>  [722]  74.61613  50.92561  51.97960  99.50324  47.12665  87.80435 119.15289 #>  [729]  96.67512  27.20912  42.35955  51.36019  66.15466  50.99965  31.33727 #>  [736]  29.62981  55.37496  72.04834  44.82771  46.57539  64.62869  38.82131 #>  [743]  53.86127  30.62108  27.37893  85.39840  55.85290  64.89730  94.68730 #>  [750]  35.15146  37.51919  45.72001  89.69830  46.13428  66.35095  37.41977 #>  [757]  43.10677  40.13555  43.13188  24.73451  76.52571  36.36566  71.17790 #>  [764]  56.44084  63.19831  38.86127  56.54947  83.05808  41.66112  60.14119 #>  [771]  73.36839  36.83335  46.99687  68.72470  48.02621  37.04922  67.67630 #>  [778]  46.78206  43.38829  79.76107  43.42811  34.89142  46.70848  85.92108 #>  [785]  65.54841  39.49996  41.09837  47.97916  62.31907  75.42977  83.27070 #>  [792]  73.13176  58.56810  75.03824  37.08341  57.11212  62.88590  80.01578 #>  [799]  31.43220  50.27634  20.52318  57.18749  65.93147  42.64495  60.78448 #>  [806]  42.12619  44.69412  58.64844  68.76875 163.36185  59.30573  44.16434 #>  [813]  74.02857  42.16594  47.80402  46.06946  68.13544  58.27459  44.44837 #>  [820]  49.71347  41.92370  65.10552 190.42879 100.55114  84.73240  95.19440 #>  [827]  62.62765  81.34105  62.84927 119.41128  97.69586 103.24047 132.04779 #>  [834]  63.94897  61.11686  68.83021  80.70128 118.36174  69.88491  75.67939 #>  [841]  97.87433  84.47204 167.57416 119.33953 112.87803  94.60966  54.52644 #>  [848] 134.89541  80.76840 100.86500 125.36064  80.85360  81.27602 102.14881 #>  [855]  62.87013  89.81105  90.54166  77.87923 154.26053 104.44530  89.99370 #>  [862] 137.11783 108.63313  81.65888  91.76187 153.53548  93.17887 131.28943 #>  [869]  58.95745  63.59264  86.73104 159.01308  56.48464  53.76414  79.36095 #>  [876] 104.17268  82.69108  75.47191  80.10494 123.34176 117.11018  82.67987 #>  [883]  87.24288  77.92377 105.19438  75.47461  73.26672 103.96131  88.69445 #>  [890]  67.40834 115.24510 107.64339  93.11673 129.87959 126.03289 118.21727 #>  [897] 101.24318  85.84310  83.24171  94.37437  95.52714  58.18705  70.93290 #>  [904] 135.64519 122.17646  47.94730  81.90610  71.29312  59.56557  90.96883 #>  [911] 105.27981  68.10784  62.24482 118.12494  89.29744 104.93346  54.31292 #>  [918] 118.22755  85.99992  68.28882 116.87775  59.89081  88.51994 124.96078 #>  [925]  48.99528  83.42296  39.21350 104.91602  96.76956 112.59752  71.12703 #>  [932]  88.73937  68.98548  70.70640  93.68761 131.72255  82.59086  81.56980 #>  [939]  80.12171 160.72231 130.68852  61.65840 175.64769 103.14938 133.32521 #>  [946] 160.15746  97.61800 119.62046 125.04584 120.67301 110.96952  62.16252 #>  [953] 215.10540  81.98616 110.52191  53.11782  83.00635  59.01162 167.43096 #>  [960] 146.43115 136.73301  93.53995  92.63548  98.56852  59.88143 101.45146 #>  [967] 102.84065 115.38549 110.87331  96.65850  70.26512  73.19904 204.44288 #>  [974] 120.52524 148.47584 176.52242  72.50633  98.01507  85.07589 122.09749 #>  [981] 173.47087 272.06243 114.84247 194.43547 182.95500  99.70758 155.32184 #>  [988] 234.90205 149.08372 129.43951  92.17400 150.30666 127.34289  95.56536 #>  [995] 183.85856 173.20963 119.36203 298.97556 239.90785 149.72990 145.83624 #> [1002] 199.97769 221.71715 124.50443 127.57657 126.63670 224.84161 193.52027 #> [1009]  67.17684 193.24399 163.77183 115.04808 139.80491 194.08049 142.56183 #> [1016] 150.05278 112.32713 229.27074 123.95988 146.80726 185.69923 111.44768 #> [1023] 148.97687 122.53709 127.37003  92.55487 106.25934 151.61132 166.55049 #> [1030] 166.27216  89.84812 285.64838 210.83361 119.86280 120.26534 166.67314 #> [1037] 128.77576 128.26908 203.90985 124.66021 285.09853 111.19870 185.07644 #> [1044]  88.79945  97.17543 121.60783 183.18550 113.42228 234.66441 148.81920 #> [1051] 127.67544 144.30028 183.15017 180.80073 212.84778  81.80066 156.28369 #> [1058] 217.85070 136.70053 196.65904 155.49179 120.33784 123.21350 293.16047 #> [1065] 141.29326 286.30265 137.11341 191.99534 155.88733 232.83108 141.37831 #> [1072] 114.62536 154.08698 129.56200 197.71852 143.31929 155.63173 166.92790 #> [1079] 151.48311 133.67364 183.79864 134.72402 108.41123 113.01052 145.28928 #> [1086]  85.79995 220.96699 127.18015 215.14311 190.93505 156.44133 164.06449 #> [1093] 164.81190  85.39927 179.14410 135.09159 changepoints(seg) #> [1] 330 839 fitness(seg) #>      BIC  #> 10554.84"},{"path":"https://beanumber.github.io/tidychangepoint/reference/new_seg_cpt.html","id":null,"dir":"Reference","previous_headings":"","what":"Base class for segmenters — new_seg_cpt","title":"Base class for segmenters — new_seg_cpt","text":"Base class segmenters","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/new_seg_cpt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Base class for segmenters — new_seg_cpt","text":"","code":"new_seg_cpt(   x = numeric(),   pkg = character(),   algorithm = NA,   changepoints = integer(),   fitness = double(),   seg_params = list(),   model_name = \"meanshift_norm\",   penalty = \"BIC\",   ... )  validate_seg_cpt(x)  seg_cpt(x, ...)"},{"path":"https://beanumber.github.io/tidychangepoint/reference/new_seg_cpt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Base class for segmenters — new_seg_cpt","text":"x numeric vector coercible ts object pkg name package providing segmenter algorithm Algorithm used find changepoints changepoints possibly empty list() candidate changepoints fitness named double vector whose name reflects penalty applied seg_params possibly empty list() segmenter parameters model_name character indicating model used find changepoints. penalty character indicating name penalty function used find changepoints. ... currently ignored","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/new_seg_cpt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Base class for segmenters — new_seg_cpt","text":"","code":"x <- seg_cpt(DataCPSim, pkg = \"tidychangepoint\", changepoints = c(330)) str(x) #> List of 8 #>  $ data        : Time-Series [1:1096] from 1 to 1096: 35.5 29 35.6 33 29.5 ... #>  $ pkg         : chr \"tidychangepoint\" #>  $ algorithm   : logi NA #>  $ changepoints: num 330 #>  $ fitness     : num(0)  #>  $ seg_params  : list() #>  $ model_name  : chr \"meanshift_norm\" #>  $ penalty     : NULL #>  - attr(*, \"class\")= chr \"seg_cpt\" as.ts(x) #> Time Series: #> Start = 1  #> End = 1096  #> Frequency = 1  #>    [1]  35.50961  29.00292  35.63508  32.98452  29.53557  25.40781  28.82497 #>    [8]  50.31157  24.93185  58.88063  30.35777  33.66315  32.58653  42.78788 #>   [15]  45.23963  23.66417  20.00954  31.64746  34.65507  68.49028  43.53948 #>   [22]  25.29938  57.19244  39.51995  23.79025  27.81451  42.00712  36.09812 #>   [29]  32.74664  34.73679  60.20919  55.52211  33.92043  32.48948  22.66494 #>   [36]  24.16119  27.05582  16.09789  31.69439  27.22202  20.64027  33.97673 #>   [43]  46.71000  25.28389  24.88207  41.75347  36.50448  35.98297  31.39612 #>   [50]  44.14153  67.82557  26.81619  27.55292  30.77449  51.17371  51.34317 #>   [57]  23.10056  22.92962  29.39409  73.67531  23.46017  35.36286  29.45083 #>   [64]  54.18062  25.04895  27.47914  51.41767  32.30387  43.17916  30.11288 #>   [71]  22.45535  33.70278  34.16720  44.64931  22.60994  50.26498  50.28394 #>   [78]  33.24944  38.73890  36.75336  52.38881  36.62906  16.68155  35.12389 #>   [85]  35.89239  61.81050  47.85419  30.26446  36.93150  54.81053  30.32479 #>   [92]  37.46579  49.93442  46.01734  24.86685  35.88435  42.25720  37.78741 #>   [99]  46.26335  38.52976  47.99867  44.28395  51.05976  50.99393  36.01026 #>  [106]  37.44409  16.77029  31.05583  22.40344  27.22149  28.31583  58.06805 #>  [113]  38.30690  47.26490  31.55811  47.63268  23.38334  33.30157  46.75618 #>  [120]  30.46511  23.17060  31.52724  38.55479  35.54940  49.63486  38.85458 #>  [127]  35.80205  24.50227  20.49025  31.59546  33.84992  30.02572  23.84156 #>  [134]  27.92167  28.04857  55.54324  23.82133  46.27102  35.95369  47.65766 #>  [141]  31.37265  37.43892  26.73598  39.78209  37.23990  38.69749  25.74961 #>  [148]  15.00954  41.03282  35.55822  28.20253  34.25572  36.72560  25.87219 #>  [155]  34.25647  41.05718  45.99951  35.09617  30.10936  56.29692  21.62607 #>  [162]  32.16878  48.08144  27.56512  24.86829  23.20973  23.35380  24.87480 #>  [169]  41.98302  43.00026  42.37708  57.59545  28.58172  35.77870  28.82814 #>  [176]  35.31054  45.07452  19.92057  49.94871  42.05699  45.69919  40.55247 #>  [183]  28.77050  34.25098  39.57524  27.14581  44.69057  36.14965  49.50564 #>  [190]  49.79043  17.99559  39.65697  44.97010  18.31935  31.24522  31.07475 #>  [197]  21.61906  40.06484  34.99030  21.94425  37.44403  40.21178  38.23743 #>  [204]  31.80890  34.61897  47.81524  34.58307  30.49509  45.29616  49.07757 #>  [211]  24.17640  35.64875  17.63070  21.61867  32.29813  26.41488  28.31542 #>  [218]  25.02318  20.23520  28.13247  63.69313  42.52417  29.03129  54.03181 #>  [225]  25.60167  66.22389  26.02854  43.94607  39.26708  21.90635  33.10292 #>  [232]  31.36953  68.74632  49.57971  36.77692  62.23430  33.17239  34.70213 #>  [239]  29.33086  40.40664  20.51693  56.48982  47.57652  18.78920  39.83695 #>  [246]  23.57444  32.90584  23.97282  29.16350  33.94278  33.32760  40.39087 #>  [253]  37.08789  34.55488  28.07540  34.55889  32.50873  30.26050  31.61021 #>  [260]  29.22609  21.66017  39.99861  31.54268  54.66244  28.83481  50.43102 #>  [267]  41.57023  36.52691  41.74322  29.88869  65.63664  28.92781  31.62743 #>  [274]  60.02248  23.41874  30.41566  49.28914  30.75073  41.08489  35.95343 #>  [281]  26.30653  30.42233  35.58619  27.11696  41.07739  32.16801  54.22658 #>  [288]  30.58481  32.75808  40.14170  38.59850  34.62828  26.92407  32.65613 #>  [295]  21.12857  21.76199  31.72514  32.81883  39.57492  29.56246  26.52171 #>  [302]  33.16808  30.46846  26.71148  20.12177  28.85316  25.85809  73.07025 #>  [309]  50.11722  55.60337  42.62562  53.62811  40.37492  36.09093  54.15097 #>  [316]  52.48111  28.21508  44.33563  15.14660  31.77283  28.02836  42.85488 #>  [323]  30.07936  32.42728  33.91356  17.04858  29.01530  31.04799  24.28621 #>  [330]  35.50456  45.96182  21.99371  38.45540  25.78633  45.07985  27.04933 #>  [337]  50.03548  29.92024  26.27057  24.47919  59.13347  35.87683  42.14550 #>  [344]  29.36456  44.58931  30.97851  21.83860  46.47922  39.71751  20.74531 #>  [351]  21.96494  27.95186  40.64999  65.79466  34.95445  33.87721  27.41981 #>  [358]  19.67562  39.39982  45.69528  22.18879  37.54553  23.15847  28.45508 #>  [365]  25.23477  33.00227  27.16574  34.19212  38.82416  17.26278  38.40626 #>  [372]  57.01508  40.28032  27.15082  32.21021  41.59108  44.75365  31.57659 #>  [379]  44.49800  41.11233  35.23455  24.47634  45.13415  37.24519  42.85021 #>  [386]  32.84645  37.01077  38.96790  40.08106  43.99265  32.24746  27.24075 #>  [393]  31.66613  34.98403  27.29397  34.99001  31.25752  30.07230  27.18477 #>  [400]  37.36462  34.40921  27.16085  37.36703  47.98335  43.48091  23.31231 #>  [407]  20.68531  40.72063  13.66989  27.99689  25.61063  27.89089  17.93238 #>  [414]  23.25505  69.87353  20.53952  38.76444  45.53784  43.99368  25.86236 #>  [421]  23.02465  26.68788  51.99475  31.49945  39.98303  25.96329  18.68290 #>  [428]  45.39740  41.85522  40.88774  33.13019  36.51401  43.93668  28.72223 #>  [435]  17.36850  29.80030  29.36764  33.21636  30.98314  44.00905  49.96474 #>  [442]  32.63317  34.95938  42.09920  25.98961  26.13540  40.91752  27.13926 #>  [449]  23.93415  44.34438  24.80069  39.56627  34.17161  29.33848  51.51685 #>  [456]  38.10154  17.89906  29.84155  20.73680  17.94649  20.14526  30.60828 #>  [463]  37.05229  26.99159  48.47064  29.63704  30.29811  29.44919  50.20743 #>  [470]  25.22852  19.31610  49.49408  31.13921  45.04409  26.36500  21.37141 #>  [477]  33.60464  39.82629  23.44417  50.85233  35.55273  31.42400  52.78349 #>  [484]  46.42078  32.84158  41.58214  37.57874  92.79539  21.87917  35.86701 #>  [491]  44.63170  23.67373  49.57926  37.82632  28.51937  54.19448  25.42921 #>  [498]  31.42047  45.75800  26.14005  32.43037  30.31998  60.34780  35.38384 #>  [505]  17.65934  49.95322  48.97623  24.37608  62.05997  17.90258  35.04199 #>  [512]  25.02686  37.13100  27.42116  46.56513  14.44667  18.13457  30.41839 #>  [519]  40.06058  33.26711  58.99535  23.18483  36.67044  24.95331  27.19064 #>  [526]  26.76947  37.48431  37.13503  22.80870  32.98376  16.45626  25.22453 #>  [533]  35.59700  24.01433  58.24541  34.09432  31.09085  29.28524  20.65437 #>  [540]  24.52000  61.00638  33.59970  19.62836  30.89483  27.49646  47.74031 #>  [547]  38.48854  79.28284  49.83587  41.20827  60.84168  58.74430  73.74234 #>  [554]  62.99021  44.73661  66.14946  78.63431  58.85001  56.29965  49.76806 #>  [561]  66.31184  77.24626  30.20323  34.36305  40.14230 115.76308  53.35118 #>  [568]  56.61291  54.02821  30.86656  64.91494  51.47610  58.02405  46.19877 #>  [575]  75.46288  62.38693  62.12430  29.65914  48.83256  48.45711  87.84555 #>  [582]  48.89591  79.45862  45.43495  61.17216  44.15376  40.81283  28.66775 #>  [589] 100.81542  80.80345  59.82787  60.46746  61.44131  33.23726  52.19624 #>  [596]  83.51128  53.55938  63.91426  43.91224  55.36213  54.68760  56.36276 #>  [603]  50.26803  63.36135  71.84053  44.01963  54.90876  48.05082  73.33604 #>  [610]  40.86609  53.14413  59.74683  74.13609  72.72819  73.80368  46.35780 #>  [617]  39.46049  69.37131  69.23278  39.48316  65.63175  50.51306  79.59284 #>  [624]  43.27989  29.25963  53.94132  47.30325  89.88726  64.49022  53.12747 #>  [631]  51.61317  47.72412 102.46424  79.80996  51.62739  45.94677  44.20380 #>  [638]  62.47154  56.71323  45.20940  33.56516  93.76083  56.27748  43.03061 #>  [645]  86.12136  66.81985 103.73717  45.81972  66.39085  43.21773  56.16747 #>  [652]  59.28413  50.73493  65.26301 107.46498  68.39817  77.53655  63.00234 #>  [659] 100.37694  50.08347  51.31859  47.84582  73.28803  56.60291  49.47953 #>  [666]  74.14721  51.88331  72.97605  37.36928  50.55296  94.49818  85.63369 #>  [673]  47.21940  51.29463  30.87699  40.99069  65.22233  84.18339  36.97547 #>  [680]  67.67693 130.27515  56.50564  52.08214  36.62894  50.17403  43.98132 #>  [687]  63.78818  69.71901  58.66280  34.25625  40.01212  38.51369  31.93027 #>  [694]  70.08009  60.78508  51.19670  65.45439  70.13630  38.38639  46.42615 #>  [701]  59.55314  49.09690  60.75484  66.66783  70.41840  77.79466  57.57120 #>  [708]  66.27876  40.41878  51.19402  90.55426  28.21335  67.71025  52.72485 #>  [715]  37.34428  72.43783  92.29608  55.59297  69.66448  58.30077  50.26778 #>  [722]  74.61613  50.92561  51.97960  99.50324  47.12665  87.80435 119.15289 #>  [729]  96.67512  27.20912  42.35955  51.36019  66.15466  50.99965  31.33727 #>  [736]  29.62981  55.37496  72.04834  44.82771  46.57539  64.62869  38.82131 #>  [743]  53.86127  30.62108  27.37893  85.39840  55.85290  64.89730  94.68730 #>  [750]  35.15146  37.51919  45.72001  89.69830  46.13428  66.35095  37.41977 #>  [757]  43.10677  40.13555  43.13188  24.73451  76.52571  36.36566  71.17790 #>  [764]  56.44084  63.19831  38.86127  56.54947  83.05808  41.66112  60.14119 #>  [771]  73.36839  36.83335  46.99687  68.72470  48.02621  37.04922  67.67630 #>  [778]  46.78206  43.38829  79.76107  43.42811  34.89142  46.70848  85.92108 #>  [785]  65.54841  39.49996  41.09837  47.97916  62.31907  75.42977  83.27070 #>  [792]  73.13176  58.56810  75.03824  37.08341  57.11212  62.88590  80.01578 #>  [799]  31.43220  50.27634  20.52318  57.18749  65.93147  42.64495  60.78448 #>  [806]  42.12619  44.69412  58.64844  68.76875 163.36185  59.30573  44.16434 #>  [813]  74.02857  42.16594  47.80402  46.06946  68.13544  58.27459  44.44837 #>  [820]  49.71347  41.92370  65.10552 190.42879 100.55114  84.73240  95.19440 #>  [827]  62.62765  81.34105  62.84927 119.41128  97.69586 103.24047 132.04779 #>  [834]  63.94897  61.11686  68.83021  80.70128 118.36174  69.88491  75.67939 #>  [841]  97.87433  84.47204 167.57416 119.33953 112.87803  94.60966  54.52644 #>  [848] 134.89541  80.76840 100.86500 125.36064  80.85360  81.27602 102.14881 #>  [855]  62.87013  89.81105  90.54166  77.87923 154.26053 104.44530  89.99370 #>  [862] 137.11783 108.63313  81.65888  91.76187 153.53548  93.17887 131.28943 #>  [869]  58.95745  63.59264  86.73104 159.01308  56.48464  53.76414  79.36095 #>  [876] 104.17268  82.69108  75.47191  80.10494 123.34176 117.11018  82.67987 #>  [883]  87.24288  77.92377 105.19438  75.47461  73.26672 103.96131  88.69445 #>  [890]  67.40834 115.24510 107.64339  93.11673 129.87959 126.03289 118.21727 #>  [897] 101.24318  85.84310  83.24171  94.37437  95.52714  58.18705  70.93290 #>  [904] 135.64519 122.17646  47.94730  81.90610  71.29312  59.56557  90.96883 #>  [911] 105.27981  68.10784  62.24482 118.12494  89.29744 104.93346  54.31292 #>  [918] 118.22755  85.99992  68.28882 116.87775  59.89081  88.51994 124.96078 #>  [925]  48.99528  83.42296  39.21350 104.91602  96.76956 112.59752  71.12703 #>  [932]  88.73937  68.98548  70.70640  93.68761 131.72255  82.59086  81.56980 #>  [939]  80.12171 160.72231 130.68852  61.65840 175.64769 103.14938 133.32521 #>  [946] 160.15746  97.61800 119.62046 125.04584 120.67301 110.96952  62.16252 #>  [953] 215.10540  81.98616 110.52191  53.11782  83.00635  59.01162 167.43096 #>  [960] 146.43115 136.73301  93.53995  92.63548  98.56852  59.88143 101.45146 #>  [967] 102.84065 115.38549 110.87331  96.65850  70.26512  73.19904 204.44288 #>  [974] 120.52524 148.47584 176.52242  72.50633  98.01507  85.07589 122.09749 #>  [981] 173.47087 272.06243 114.84247 194.43547 182.95500  99.70758 155.32184 #>  [988] 234.90205 149.08372 129.43951  92.17400 150.30666 127.34289  95.56536 #>  [995] 183.85856 173.20963 119.36203 298.97556 239.90785 149.72990 145.83624 #> [1002] 199.97769 221.71715 124.50443 127.57657 126.63670 224.84161 193.52027 #> [1009]  67.17684 193.24399 163.77183 115.04808 139.80491 194.08049 142.56183 #> [1016] 150.05278 112.32713 229.27074 123.95988 146.80726 185.69923 111.44768 #> [1023] 148.97687 122.53709 127.37003  92.55487 106.25934 151.61132 166.55049 #> [1030] 166.27216  89.84812 285.64838 210.83361 119.86280 120.26534 166.67314 #> [1037] 128.77576 128.26908 203.90985 124.66021 285.09853 111.19870 185.07644 #> [1044]  88.79945  97.17543 121.60783 183.18550 113.42228 234.66441 148.81920 #> [1051] 127.67544 144.30028 183.15017 180.80073 212.84778  81.80066 156.28369 #> [1058] 217.85070 136.70053 196.65904 155.49179 120.33784 123.21350 293.16047 #> [1065] 141.29326 286.30265 137.11341 191.99534 155.88733 232.83108 141.37831 #> [1072] 114.62536 154.08698 129.56200 197.71852 143.31929 155.63173 166.92790 #> [1079] 151.48311 133.67364 183.79864 134.72402 108.41123 113.01052 145.28928 #> [1086]  85.79995 220.96699 127.18015 215.14311 190.93505 156.44133 164.06449 #> [1093] 164.81190  85.39927 179.14410 135.09159 changepoints(x) #> [1] 330  y <- segment(CET, method = \"pelt\") z <- as.seg_cpt(y$segmenter) class(z) #> [1] \"seg_cpt\" fitness(x) #> numeric(0) glance(z) #> # A tibble: 1 × 7 #>   pkg         version    algorithm seg_params model_name criteria fitness #>   <chr>       <pckg_vrs> <chr>     <list>     <chr>      <chr>      <dbl> #> 1 changepoint 2.2.4      PELT      <list [1]> meanvar    MBIC        -Inf model_name(z) #> [1] \"meanvar\" model_args(z) #> [1] NA nobs(z) #> [1] 362 seg_params(z) #> [[1]] #> [[1]]$test_stat #> [1] \"Normal\" #>  #> [[1]]$num_cpts_max #> [1] Inf #>  #> [[1]]$min_seg_length #> [1] 2 #>  #>"},{"path":"https://beanumber.github.io/tidychangepoint/reference/pad_tau.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility functions — pad_tau","title":"Utility functions — pad_tau","text":"Utility functions","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/pad_tau.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility functions — pad_tau","text":"","code":"pad_tau(tau, n)  unpad_tau(padded_tau)  is_valid_tau(tau, n)  validate_tau(tau, n)  binary2tau(x)  tau2binary(tau, n)  tau2time(tau, index)  time2tau(cpts, index)  cut_inclusive(x, tau)  split_by_tau(x, tau)  regions_by_tau(n, tau)  deg_free(x)  as_year(x)"},{"path":"https://beanumber.github.io/tidychangepoint/reference/pad_tau.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility functions — pad_tau","text":"tau numeric vector changepoints n length original time series padded_tau Output pad_tau() x numeric vector index Index times, typically returned stats::time() cpts Time series observation labels converted indices","code":""},{"path":[]},{"path":"https://beanumber.github.io/tidychangepoint/reference/pad_tau.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Utility functions — pad_tau","text":"","code":"is_valid_tau(0, length(DataCPSim)) #> [1] FALSE is_valid_tau(1, length(DataCPSim)) #> [1] FALSE is_valid_tau(c(42, 42), length(DataCPSim)) #> [1] TRUE is_valid_tau(826, length(DataCPSim)) #> [1] TRUE is_valid_tau(1096, length(DataCPSim)) #> [1] FALSE is_valid_tau(1097, length(DataCPSim)) #> [1] FALSE  validate_tau(0, length(DataCPSim)) #> numeric(0) validate_tau(1, length(DataCPSim)) #> numeric(0) validate_tau(826, length(DataCPSim)) #> [1] 826 validate_tau(c(826, 826), length(DataCPSim)) #> [1] 826 validate_tau(1096, length(DataCPSim)) #> numeric(0) validate_tau(1097, length(DataCPSim)) #> numeric(0) validate_tau(c(-4, 0, 1, 4, 5, 5, 824, 1096, 1097, 182384), length(DataCPSim)) #> [1]   4   5 824  binary2tau(c(0, 0, 1, 0, 1)) #> [1] 3 5 binary2tau(round(runif(10))) #> [1]  2  4  5  7  9 10  tau2binary(c(7, 17), n = 24) #>  [1] 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 tau2binary(binary2tau(c(0, 0, 1, 1, 0, 1)), n = 6) #> [1] 0 0 1 1 0 1 tau2time(c(42, 81, 330), index = as_year(time(CET))) #> [1] \"1700\" \"1739\" \"1988\" time2tau(c(1700, 1739, 1988), index = as_year(time(CET))) #> [1]  42  81 330 split_by_tau(DataCPSim, c(365, 826)) #> $`[0,365)` #>   [1] 35.50961 29.00292 35.63508 32.98452 29.53557 25.40781 28.82497 50.31157 #>   [9] 24.93185 58.88063 30.35777 33.66315 32.58653 42.78788 45.23963 23.66417 #>  [17] 20.00954 31.64746 34.65507 68.49028 43.53948 25.29938 57.19244 39.51995 #>  [25] 23.79025 27.81451 42.00712 36.09812 32.74664 34.73679 60.20919 55.52211 #>  [33] 33.92043 32.48948 22.66494 24.16119 27.05582 16.09789 31.69439 27.22202 #>  [41] 20.64027 33.97673 46.71000 25.28389 24.88207 41.75347 36.50448 35.98297 #>  [49] 31.39612 44.14153 67.82557 26.81619 27.55292 30.77449 51.17371 51.34317 #>  [57] 23.10056 22.92962 29.39409 73.67531 23.46017 35.36286 29.45083 54.18062 #>  [65] 25.04895 27.47914 51.41767 32.30387 43.17916 30.11288 22.45535 33.70278 #>  [73] 34.16720 44.64931 22.60994 50.26498 50.28394 33.24944 38.73890 36.75336 #>  [81] 52.38881 36.62906 16.68155 35.12389 35.89239 61.81050 47.85419 30.26446 #>  [89] 36.93150 54.81053 30.32479 37.46579 49.93442 46.01734 24.86685 35.88435 #>  [97] 42.25720 37.78741 46.26335 38.52976 47.99867 44.28395 51.05976 50.99393 #> [105] 36.01026 37.44409 16.77029 31.05583 22.40344 27.22149 28.31583 58.06805 #> [113] 38.30690 47.26490 31.55811 47.63268 23.38334 33.30157 46.75618 30.46511 #> [121] 23.17060 31.52724 38.55479 35.54940 49.63486 38.85458 35.80205 24.50227 #> [129] 20.49025 31.59546 33.84992 30.02572 23.84156 27.92167 28.04857 55.54324 #> [137] 23.82133 46.27102 35.95369 47.65766 31.37265 37.43892 26.73598 39.78209 #> [145] 37.23990 38.69749 25.74961 15.00954 41.03282 35.55822 28.20253 34.25572 #> [153] 36.72560 25.87219 34.25647 41.05718 45.99951 35.09617 30.10936 56.29692 #> [161] 21.62607 32.16878 48.08144 27.56512 24.86829 23.20973 23.35380 24.87480 #> [169] 41.98302 43.00026 42.37708 57.59545 28.58172 35.77870 28.82814 35.31054 #> [177] 45.07452 19.92057 49.94871 42.05699 45.69919 40.55247 28.77050 34.25098 #> [185] 39.57524 27.14581 44.69057 36.14965 49.50564 49.79043 17.99559 39.65697 #> [193] 44.97010 18.31935 31.24522 31.07475 21.61906 40.06484 34.99030 21.94425 #> [201] 37.44403 40.21178 38.23743 31.80890 34.61897 47.81524 34.58307 30.49509 #> [209] 45.29616 49.07757 24.17640 35.64875 17.63070 21.61867 32.29813 26.41488 #> [217] 28.31542 25.02318 20.23520 28.13247 63.69313 42.52417 29.03129 54.03181 #> [225] 25.60167 66.22389 26.02854 43.94607 39.26708 21.90635 33.10292 31.36953 #> [233] 68.74632 49.57971 36.77692 62.23430 33.17239 34.70213 29.33086 40.40664 #> [241] 20.51693 56.48982 47.57652 18.78920 39.83695 23.57444 32.90584 23.97282 #> [249] 29.16350 33.94278 33.32760 40.39087 37.08789 34.55488 28.07540 34.55889 #> [257] 32.50873 30.26050 31.61021 29.22609 21.66017 39.99861 31.54268 54.66244 #> [265] 28.83481 50.43102 41.57023 36.52691 41.74322 29.88869 65.63664 28.92781 #> [273] 31.62743 60.02248 23.41874 30.41566 49.28914 30.75073 41.08489 35.95343 #> [281] 26.30653 30.42233 35.58619 27.11696 41.07739 32.16801 54.22658 30.58481 #> [289] 32.75808 40.14170 38.59850 34.62828 26.92407 32.65613 21.12857 21.76199 #> [297] 31.72514 32.81883 39.57492 29.56246 26.52171 33.16808 30.46846 26.71148 #> [305] 20.12177 28.85316 25.85809 73.07025 50.11722 55.60337 42.62562 53.62811 #> [313] 40.37492 36.09093 54.15097 52.48111 28.21508 44.33563 15.14660 31.77283 #> [321] 28.02836 42.85488 30.07936 32.42728 33.91356 17.04858 29.01530 31.04799 #> [329] 24.28621 35.50456 45.96182 21.99371 38.45540 25.78633 45.07985 27.04933 #> [337] 50.03548 29.92024 26.27057 24.47919 59.13347 35.87683 42.14550 29.36456 #> [345] 44.58931 30.97851 21.83860 46.47922 39.71751 20.74531 21.96494 27.95186 #> [353] 40.64999 65.79466 34.95445 33.87721 27.41981 19.67562 39.39982 45.69528 #> [361] 22.18879 37.54553 23.15847 28.45508 #>  #> $`[365,826)` #>   [1]  25.23477  33.00227  27.16574  34.19212  38.82416  17.26278  38.40626 #>   [8]  57.01508  40.28032  27.15082  32.21021  41.59108  44.75365  31.57659 #>  [15]  44.49800  41.11233  35.23455  24.47634  45.13415  37.24519  42.85021 #>  [22]  32.84645  37.01077  38.96790  40.08106  43.99265  32.24746  27.24075 #>  [29]  31.66613  34.98403  27.29397  34.99001  31.25752  30.07230  27.18477 #>  [36]  37.36462  34.40921  27.16085  37.36703  47.98335  43.48091  23.31231 #>  [43]  20.68531  40.72063  13.66989  27.99689  25.61063  27.89089  17.93238 #>  [50]  23.25505  69.87353  20.53952  38.76444  45.53784  43.99368  25.86236 #>  [57]  23.02465  26.68788  51.99475  31.49945  39.98303  25.96329  18.68290 #>  [64]  45.39740  41.85522  40.88774  33.13019  36.51401  43.93668  28.72223 #>  [71]  17.36850  29.80030  29.36764  33.21636  30.98314  44.00905  49.96474 #>  [78]  32.63317  34.95938  42.09920  25.98961  26.13540  40.91752  27.13926 #>  [85]  23.93415  44.34438  24.80069  39.56627  34.17161  29.33848  51.51685 #>  [92]  38.10154  17.89906  29.84155  20.73680  17.94649  20.14526  30.60828 #>  [99]  37.05229  26.99159  48.47064  29.63704  30.29811  29.44919  50.20743 #> [106]  25.22852  19.31610  49.49408  31.13921  45.04409  26.36500  21.37141 #> [113]  33.60464  39.82629  23.44417  50.85233  35.55273  31.42400  52.78349 #> [120]  46.42078  32.84158  41.58214  37.57874  92.79539  21.87917  35.86701 #> [127]  44.63170  23.67373  49.57926  37.82632  28.51937  54.19448  25.42921 #> [134]  31.42047  45.75800  26.14005  32.43037  30.31998  60.34780  35.38384 #> [141]  17.65934  49.95322  48.97623  24.37608  62.05997  17.90258  35.04199 #> [148]  25.02686  37.13100  27.42116  46.56513  14.44667  18.13457  30.41839 #> [155]  40.06058  33.26711  58.99535  23.18483  36.67044  24.95331  27.19064 #> [162]  26.76947  37.48431  37.13503  22.80870  32.98376  16.45626  25.22453 #> [169]  35.59700  24.01433  58.24541  34.09432  31.09085  29.28524  20.65437 #> [176]  24.52000  61.00638  33.59970  19.62836  30.89483  27.49646  47.74031 #> [183]  38.48854  79.28284  49.83587  41.20827  60.84168  58.74430  73.74234 #> [190]  62.99021  44.73661  66.14946  78.63431  58.85001  56.29965  49.76806 #> [197]  66.31184  77.24626  30.20323  34.36305  40.14230 115.76308  53.35118 #> [204]  56.61291  54.02821  30.86656  64.91494  51.47610  58.02405  46.19877 #> [211]  75.46288  62.38693  62.12430  29.65914  48.83256  48.45711  87.84555 #> [218]  48.89591  79.45862  45.43495  61.17216  44.15376  40.81283  28.66775 #> [225] 100.81542  80.80345  59.82787  60.46746  61.44131  33.23726  52.19624 #> [232]  83.51128  53.55938  63.91426  43.91224  55.36213  54.68760  56.36276 #> [239]  50.26803  63.36135  71.84053  44.01963  54.90876  48.05082  73.33604 #> [246]  40.86609  53.14413  59.74683  74.13609  72.72819  73.80368  46.35780 #> [253]  39.46049  69.37131  69.23278  39.48316  65.63175  50.51306  79.59284 #> [260]  43.27989  29.25963  53.94132  47.30325  89.88726  64.49022  53.12747 #> [267]  51.61317  47.72412 102.46424  79.80996  51.62739  45.94677  44.20380 #> [274]  62.47154  56.71323  45.20940  33.56516  93.76083  56.27748  43.03061 #> [281]  86.12136  66.81985 103.73717  45.81972  66.39085  43.21773  56.16747 #> [288]  59.28413  50.73493  65.26301 107.46498  68.39817  77.53655  63.00234 #> [295] 100.37694  50.08347  51.31859  47.84582  73.28803  56.60291  49.47953 #> [302]  74.14721  51.88331  72.97605  37.36928  50.55296  94.49818  85.63369 #> [309]  47.21940  51.29463  30.87699  40.99069  65.22233  84.18339  36.97547 #> [316]  67.67693 130.27515  56.50564  52.08214  36.62894  50.17403  43.98132 #> [323]  63.78818  69.71901  58.66280  34.25625  40.01212  38.51369  31.93027 #> [330]  70.08009  60.78508  51.19670  65.45439  70.13630  38.38639  46.42615 #> [337]  59.55314  49.09690  60.75484  66.66783  70.41840  77.79466  57.57120 #> [344]  66.27876  40.41878  51.19402  90.55426  28.21335  67.71025  52.72485 #> [351]  37.34428  72.43783  92.29608  55.59297  69.66448  58.30077  50.26778 #> [358]  74.61613  50.92561  51.97960  99.50324  47.12665  87.80435 119.15289 #> [365]  96.67512  27.20912  42.35955  51.36019  66.15466  50.99965  31.33727 #> [372]  29.62981  55.37496  72.04834  44.82771  46.57539  64.62869  38.82131 #> [379]  53.86127  30.62108  27.37893  85.39840  55.85290  64.89730  94.68730 #> [386]  35.15146  37.51919  45.72001  89.69830  46.13428  66.35095  37.41977 #> [393]  43.10677  40.13555  43.13188  24.73451  76.52571  36.36566  71.17790 #> [400]  56.44084  63.19831  38.86127  56.54947  83.05808  41.66112  60.14119 #> [407]  73.36839  36.83335  46.99687  68.72470  48.02621  37.04922  67.67630 #> [414]  46.78206  43.38829  79.76107  43.42811  34.89142  46.70848  85.92108 #> [421]  65.54841  39.49996  41.09837  47.97916  62.31907  75.42977  83.27070 #> [428]  73.13176  58.56810  75.03824  37.08341  57.11212  62.88590  80.01578 #> [435]  31.43220  50.27634  20.52318  57.18749  65.93147  42.64495  60.78448 #> [442]  42.12619  44.69412  58.64844  68.76875 163.36185  59.30573  44.16434 #> [449]  74.02857  42.16594  47.80402  46.06946  68.13544  58.27459  44.44837 #> [456]  49.71347  41.92370  65.10552 190.42879 100.55114  84.73240 #>  #> $`[826,1.1e+03]` #>   [1]  95.19440  62.62765  81.34105  62.84927 119.41128  97.69586 103.24047 #>   [8] 132.04779  63.94897  61.11686  68.83021  80.70128 118.36174  69.88491 #>  [15]  75.67939  97.87433  84.47204 167.57416 119.33953 112.87803  94.60966 #>  [22]  54.52644 134.89541  80.76840 100.86500 125.36064  80.85360  81.27602 #>  [29] 102.14881  62.87013  89.81105  90.54166  77.87923 154.26053 104.44530 #>  [36]  89.99370 137.11783 108.63313  81.65888  91.76187 153.53548  93.17887 #>  [43] 131.28943  58.95745  63.59264  86.73104 159.01308  56.48464  53.76414 #>  [50]  79.36095 104.17268  82.69108  75.47191  80.10494 123.34176 117.11018 #>  [57]  82.67987  87.24288  77.92377 105.19438  75.47461  73.26672 103.96131 #>  [64]  88.69445  67.40834 115.24510 107.64339  93.11673 129.87959 126.03289 #>  [71] 118.21727 101.24318  85.84310  83.24171  94.37437  95.52714  58.18705 #>  [78]  70.93290 135.64519 122.17646  47.94730  81.90610  71.29312  59.56557 #>  [85]  90.96883 105.27981  68.10784  62.24482 118.12494  89.29744 104.93346 #>  [92]  54.31292 118.22755  85.99992  68.28882 116.87775  59.89081  88.51994 #>  [99] 124.96078  48.99528  83.42296  39.21350 104.91602  96.76956 112.59752 #> [106]  71.12703  88.73937  68.98548  70.70640  93.68761 131.72255  82.59086 #> [113]  81.56980  80.12171 160.72231 130.68852  61.65840 175.64769 103.14938 #> [120] 133.32521 160.15746  97.61800 119.62046 125.04584 120.67301 110.96952 #> [127]  62.16252 215.10540  81.98616 110.52191  53.11782  83.00635  59.01162 #> [134] 167.43096 146.43115 136.73301  93.53995  92.63548  98.56852  59.88143 #> [141] 101.45146 102.84065 115.38549 110.87331  96.65850  70.26512  73.19904 #> [148] 204.44288 120.52524 148.47584 176.52242  72.50633  98.01507  85.07589 #> [155] 122.09749 173.47087 272.06243 114.84247 194.43547 182.95500  99.70758 #> [162] 155.32184 234.90205 149.08372 129.43951  92.17400 150.30666 127.34289 #> [169]  95.56536 183.85856 173.20963 119.36203 298.97556 239.90785 149.72990 #> [176] 145.83624 199.97769 221.71715 124.50443 127.57657 126.63670 224.84161 #> [183] 193.52027  67.17684 193.24399 163.77183 115.04808 139.80491 194.08049 #> [190] 142.56183 150.05278 112.32713 229.27074 123.95988 146.80726 185.69923 #> [197] 111.44768 148.97687 122.53709 127.37003  92.55487 106.25934 151.61132 #> [204] 166.55049 166.27216  89.84812 285.64838 210.83361 119.86280 120.26534 #> [211] 166.67314 128.77576 128.26908 203.90985 124.66021 285.09853 111.19870 #> [218] 185.07644  88.79945  97.17543 121.60783 183.18550 113.42228 234.66441 #> [225] 148.81920 127.67544 144.30028 183.15017 180.80073 212.84778  81.80066 #> [232] 156.28369 217.85070 136.70053 196.65904 155.49179 120.33784 123.21350 #> [239] 293.16047 141.29326 286.30265 137.11341 191.99534 155.88733 232.83108 #> [246] 141.37831 114.62536 154.08698 129.56200 197.71852 143.31929 155.63173 #> [253] 166.92790 151.48311 133.67364 183.79864 134.72402 108.41123 113.01052 #> [260] 145.28928  85.79995 220.96699 127.18015 215.14311 190.93505 156.44133 #> [267] 164.06449 164.81190  85.39927 179.14410 135.09159 #>  regions_by_tau(1096, c(365, 826)) #> [1] \"[0,365)\"       \"[365,826)\"     \"[826,1.1e+03]\" deg_free(segment(DataCPSim)$model) #> [1] 2 as_year(\"1988-01-01\") #> [1] \"1988\""},{"path":"https://beanumber.github.io/tidychangepoint/reference/plot.tidyga.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot GA information — plot.tidyga","title":"Plot GA information — plot.tidyga","text":"Plot GA information","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/plot.tidyga.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot GA information — plot.tidyga","text":"","code":"# S3 method for tidyga plot(x, ...)"},{"path":"https://beanumber.github.io/tidychangepoint/reference/plot.tidyga.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot GA information — plot.tidyga","text":"x tidyga object ... currently ignored","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/plot.tidyga.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot GA information — plot.tidyga","text":"","code":"x <- segment(DataCPSim, method = \"ga-coen\", maxiter = 5) #> Seeding initial population with probability: 0.0155109489051095 plot(x$segmenter)"},{"path":"https://beanumber.github.io/tidychangepoint/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. broom augment, glance, tidy stats AIC, BIC, .ts, coef, fitted, logLik, nobs, residuals, time vctrs vec_cast, vec_ptype2 zoo index","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/seg-basket-generics.html","id":null,"dir":"Reference","previous_headings":"","what":"Methods for seg_basket objects — seg-basket-generics","title":"Methods for seg_basket objects — seg-basket-generics","text":"Methods seg_basket objects","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/seg-basket-generics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Methods for seg_basket objects — seg-basket-generics","text":"","code":"# S3 method for seg_basket as.seg_cpt(object, ...)  # S3 method for seg_basket as.ts(x, ...)  best_cpt(x, ...)  # S3 method for seg_basket plot(x, ...)  plot_best_chromosome(x)  plot_cpt_repeated(x, i = nrow(x$basket))"},{"path":"https://beanumber.github.io/tidychangepoint/reference/seg-basket-generics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Methods for seg_basket objects — seg-basket-generics","text":"object seg_basket object ... arguments passed methods x seg_basket object index basket show","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/seg-basket-generics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Methods for seg_basket objects — seg-basket-generics","text":"","code":"if (FALSE) { x <- segment(DataCPSim, method = \"coen\", num_generations = 3) plot_best_chromosome(x$segmenter) } if (FALSE) { x <- segment(DataCPSim, method = \"coen\", num_generations = 3) plot_cpt_repeated(x$segmenter) plot_cpt_repeated(x$segmenter, 5) }"},{"path":"https://beanumber.github.io/tidychangepoint/reference/seg-cpt-generics.html","id":null,"dir":"Reference","previous_headings":"","what":"Methods for seg_cpt objects — as.seg_cpt.seg_cpt","title":"Methods for seg_cpt objects — as.seg_cpt.seg_cpt","text":"Methods seg_cpt objects","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/seg-cpt-generics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Methods for seg_cpt objects — as.seg_cpt.seg_cpt","text":"","code":"# S3 method for seg_cpt as.seg_cpt(object, ...)  # S3 method for seg_cpt as.ts(x, ...)  # S3 method for seg_cpt glance(x, ...)  # S3 method for seg_cpt nobs(object, ...)  # S3 method for seg_cpt print(x, ...)  # S3 method for seg_cpt seg_params(x, ...)"},{"path":"https://beanumber.github.io/tidychangepoint/reference/seg-cpt-generics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Methods for seg_cpt objects — as.seg_cpt.seg_cpt","text":"object seg_cpt object ... arguments passed methods x seg_cpt object","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/segment.html","id":null,"dir":"Reference","previous_headings":"","what":"Segment a time series using a variety of algorithms — segment","title":"Segment a time series using a variety of algorithms — segment","text":"wrapper function encapsulates various algorithms detecting changepoint sets univariate time series.","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/segment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Segment a time series using a variety of algorithms — segment","text":"","code":"segment(x, method = \"null\", ...)  # S3 method for tbl_ts segment(x, method = \"null\", ...)  # S3 method for xts segment(x, method = \"null\", ...)  # S3 method for numeric segment(x, method = \"null\", ...)  # S3 method for ts segment(x, method = \"null\", ...)"},{"path":"https://beanumber.github.io/tidychangepoint/reference/segment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Segment a time series using a variety of algorithms — segment","text":"x numeric vector coercible stats::ts object method character string indicating algorithm use. See Details. ... arguments passed methods","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/segment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Segment a time series using a variety of algorithms — segment","text":"object class tidycpt. Every tidycpt object contains: segmenter: object returned underlying changepoint detection algorithm. model: model object inheriting mod_cpt, created .model() called segmenter. elapsed_time: clock time passed algorithm running. time_index: available, labels time indices time series.","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/segment.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Segment a time series using a variety of algorithms — segment","text":"Currently, segment() can use following algorithms, depending value method argument: pelt: Uses PELT algorithm implemented changepoint::cpt.meanvar(). segmenter class cpt. binseg: Uses Binary Segmentation algorithm implemented changepoint::cpt.meanvar(). segmenter class cpt. segneigh: Uses Segmented Neighborhood algorithm implemented changepoint::cpt.meanvar(). segmenter class cpt. single-best: Uses AMOC criteria implemented changepoint::cpt.meanvar(). segmenter class cpt. wbs: Uses Wild Binary Segmentation algorithm implemented wbs::wbs(). segmenter class wbs. ga: Uses Genetic algorithm implemented segment_ga(), wraps GA::ga(). segmenter class tidyga. coen: Uses Coen's heuristic implemented segment_coen(). segmenter class seg_basket(). manual: Uses vector changepoints tau argument. segmenter class seg_cpt()`. null: default. Uses changepoints. segmenter class seg_cpt()`.","code":""},{"path":[]},{"path":"https://beanumber.github.io/tidychangepoint/reference/segment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Segment a time series using a variety of algorithms — segment","text":"","code":"mod_null <- segment(DataCPSim) augment(mod_null) #> # A tsibble: 1,096 x 5 [1] #> # Groups:    region [1] #>    index     y region      .fitted .resid #>    <int> <dbl> <fct>         <dbl>  <dbl> #>  1     1  35.5 [0,1.1e+03]    63.2 -27.7  #>  2     2  29.0 [0,1.1e+03]    63.2 -34.2  #>  3     3  35.6 [0,1.1e+03]    63.2 -27.5  #>  4     4  33.0 [0,1.1e+03]    63.2 -30.2  #>  5     5  29.5 [0,1.1e+03]    63.2 -33.6  #>  6     6  25.4 [0,1.1e+03]    63.2 -37.8  #>  7     7  28.8 [0,1.1e+03]    63.2 -34.3  #>  8     8  50.3 [0,1.1e+03]    63.2 -12.9  #>  9     9  24.9 [0,1.1e+03]    63.2 -38.2  #> 10    10  58.9 [0,1.1e+03]    63.2  -4.28 #> # ℹ 1,086 more rows tidy(mod_null) #> # A tibble: 1 × 9 #>   region      num_obs   min   max  mean    sd begin   end param_mu #>   <chr>         <int> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>    <dbl> #> 1 [0,1.1e+03]    1096  13.7  299.  63.2  45.7     0  1096     63.2 glance(mod_null) #> # A tibble: 1 × 8 #>   pkg      version algorithm seg_params model_name criteria fitness elapsed_time #>   <chr>    <pckg_> <chr>     <list>     <chr>      <chr>      <dbl> <drtn>       #> 1 tidycha… 0.0.1   manual    <list [0]> meanshift… BIC       11503. 0.004 secs   segment(DataCPSim, method = \"pelt\") #> A tidycpt object #> Class 'cpt' : Changepoint Object #>        ~~   : S4 class containing 12 slots with names #>               cpttype date version data.set method test.stat pen.type pen.value minseglen cpts ncpts.max param.est  #>  #> Created on  : Wed Apr 24 21:56:29 2024  #>  #> summary(.)  : #> ---------- #> Created Using changepoint version 2.2.4  #> Changepoint type      : Change in mean and variance  #> Method of analysis    : PELT  #> Test Statistic  : Normal  #> Type of penalty       : MBIC with value, 27.99769  #> Minimum Segment Length : 2  #> Maximum no. of cpts   : Inf  #> Changepoint Locations : 547 822 972  #> List of 6 #>  $ data         : Time-Series [1:1096] from 1 to 1096: 35.5 29 35.6 33 29.5 ... #>  $ tau          : int [1:3] 547 822 972 #>  $ region_params: tibble [4 × 3] (S3: tbl_df/tbl/data.frame) #>   ..$ region           : chr [1:4] \"[0,547)\" \"[547,822)\" \"[822,972)\" \"[972,1.1e+03]\" #>   ..$ param_mu         : num [1:4] 35.3 58.1 96.7 155.9 #>   ..$ param_sigma_hatsq: Named num [1:4] 127 372 924 2442 #>   .. ..- attr(*, \"names\")= chr [1:4] \"[0,547)\" \"[547,822)\" \"[822,972)\" \"[972,1.1e+03]\" #>  $ model_params : NULL #>  $ fitted_values: num [1:1096] 35.3 35.3 35.3 35.3 35.3 ... #>  $ model_name   : chr \"meanvar\" #>  - attr(*, \"class\")= chr \"mod_cpt\" segment(DataCPSim, method = \"pelt\", penalty = \"AIC\") #> A tidycpt object #> Class 'cpt' : Changepoint Object #>        ~~   : S4 class containing 12 slots with names #>               cpttype date version data.set method test.stat pen.type pen.value minseglen cpts ncpts.max param.est  #>  #> Created on  : Wed Apr 24 21:56:29 2024  #>  #> summary(.)  : #> ---------- #> Created Using changepoint version 2.2.4  #> Changepoint type      : Change in mean and variance  #> Method of analysis    : PELT  #> Test Statistic  : Normal  #> Type of penalty       : AIC with value, 6  #> Minimum Segment Length : 2  #> Maximum no. of cpts   : Inf  #> Number of changepoints: 205  #> List of 6 #>  $ data         : Time-Series [1:1096] from 1 to 1096: 35.5 29 35.6 33 29.5 ... #>  $ tau          : int [1:205] 4 7 10 13 15 17 19 27 30 32 ... #>  $ region_params: tibble [206 × 3] (S3: tbl_df/tbl/data.frame) #>   ..$ region           : chr [1:206] \"[0,4)\" \"[4,7)\" \"[7,10)\" \"[10,13)\" ... #>   ..$ param_mu         : num [1:206] 33.4 29.3 34.7 41 37.7 ... #>   ..$ param_sigma_hatsq: Named num [1:206] 9.59 9.59 124.55 162.27 26.02 ... #>   .. ..- attr(*, \"names\")= chr [1:206] \"[0,4)\" \"[4,7)\" \"[7,10)\" \"[10,13)\" ... #>  $ model_params : NULL #>  $ fitted_values: num [1:1096] 33.4 33.4 33.4 29.3 29.3 ... #>  $ model_name   : chr \"meanvar\" #>  - attr(*, \"class\")= chr \"mod_cpt\" segment(DataCPSim, method = \"binseg\", penalty = \"AIC\") #> Warning: The number of changepoints identified is Q, it is advised to increase Q to make sure changepoints have not been missed. #> A tidycpt object #> Class 'cpt' : Changepoint Object #>        ~~   : S4 class containing 14 slots with names #>               cpts.full pen.value.full data.set cpttype method test.stat pen.type pen.value minseglen cpts ncpts.max param.est date version  #>  #> Created on  : Wed Apr 24 21:56:29 2024  #>  #> summary(.)  : #> ---------- #> Created Using changepoint version 2.2.4  #> Changepoint type      : Change in mean and variance  #> Method of analysis    : BinSeg  #> Test Statistic  : Normal  #> Type of penalty       : AIC with value, 6  #> Minimum Segment Length : 2  #> Maximum no. of cpts   : 5  #> Changepoint Locations : 547 809 813 822 972  #> Range of segmentations: #>      [,1] [,2] [,3] [,4] [,5] #> [1,]  809   NA   NA   NA   NA #> [2,]  809  547   NA   NA   NA #> [3,]  809  547  972   NA   NA #> [4,]  809  547  972  822   NA #> [5,]  809  547  972  822  813 #>  #>  For penalty values: 1485.679 462.0479 160.3649 15.04514 15.04514  #> List of 6 #>  $ data         : Time-Series [1:1096] from 1 to 1096: 35.5 29 35.6 33 29.5 ... #>  $ tau          : int [1:5] 547 809 813 822 972 #>  $ region_params: tibble [6 × 3] (S3: tbl_df/tbl/data.frame) #>   ..$ region           : chr [1:6] \"[0,547)\" \"[547,809)\" \"[809,813)\" \"[813,822)\" ... #>   ..$ param_mu         : num [1:6] 35.3 57.9 83.9 52.5 96.7 ... #>   ..$ param_sigma_hatsq: Named num [1:6] 127 341 2182 122 924 ... #>   .. ..- attr(*, \"names\")= chr [1:6] \"[0,547)\" \"[547,809)\" \"[809,813)\" \"[813,822)\" ... #>  $ model_params : NULL #>  $ fitted_values: num [1:1096] 35.3 35.3 35.3 35.3 35.3 ... #>  $ model_name   : chr \"meanvar\" #>  - attr(*, \"class\")= chr \"mod_cpt\" segment(DataCPSim, method = \"segneigh\", penalty = \"BIC\") #> Warning: SegNeigh is computationally slow, use PELT instead #> A tidycpt object #> Class 'cpt' : Changepoint Object #>        ~~   : S4 class containing 14 slots with names #>               cpts.full pen.value.full data.set cpttype method test.stat pen.type pen.value minseglen cpts ncpts.max param.est date version  #>  #> Created on  : Wed Apr 24 21:56:29 2024  #>  #> summary(.)  : #> ---------- #> Created Using changepoint version 2.2.4  #> Changepoint type      : Change in mean and variance  #> Method of analysis    : SegNeigh  #> Test Statistic  : Normal  #> Type of penalty       : BIC with value, 20.99827  #> Minimum Segment Length : 2  #> Maximum no. of cpts   : 5  #> Changepoint Locations : 547 822 972  #> Range of segmentations: #>      [,1] [,2] [,3] [,4] [,5] #> [1,]  809   NA   NA   NA   NA #> [2,]  547  822   NA   NA   NA #> [3,]  547  822  972   NA   NA #> [4,]  547  822  939  980   NA #>  #>  For penalty values: 1485.679 475.6009 152.0772 15.72419  #> List of 6 #>  $ data         : Time-Series [1:1096] from 1 to 1096: 35.5 29 35.6 33 29.5 ... #>  $ tau          : int [1:3] 547 822 972 #>  $ region_params: tibble [4 × 3] (S3: tbl_df/tbl/data.frame) #>   ..$ region           : chr [1:4] \"[0,547)\" \"[547,822)\" \"[822,972)\" \"[972,1.1e+03]\" #>   ..$ param_mu         : num [1:4] 35.3 58.1 96.7 155.9 #>   ..$ param_sigma_hatsq: Named num [1:4] 127 372 924 2442 #>   .. ..- attr(*, \"names\")= chr [1:4] \"[0,547)\" \"[547,822)\" \"[822,972)\" \"[972,1.1e+03]\" #>  $ model_params : NULL #>  $ fitted_values: num [1:1096] 35.3 35.3 35.3 35.3 35.3 ... #>  $ model_name   : chr \"meanvar\" #>  - attr(*, \"class\")= chr \"mod_cpt\" segment(DataCPSim, method = \"random\") #> Seeding initial population with probability: 0.0063863343681642 #> A tidycpt object #> An object of class \"ga\" #>  #> Call: #> GA::ga(type = \"binary\", fitness = obj_fun, nBits = n, population = ..1,     maxiter = 1) #>  #> Available slots: #>  [1] \"data\"          \"model_fn_args\" \"call\"          \"type\"          #>  [5] \"lower\"         \"upper\"         \"nBits\"         \"names\"         #>  [9] \"popSize\"       \"iter\"          \"run\"           \"maxiter\"       #> [13] \"suggestions\"   \"population\"    \"elitism\"       \"pcrossover\"    #> [17] \"pmutation\"     \"optim\"         \"fitness\"       \"summary\"       #> [21] \"bestSol\"       \"fitnessValue\"  \"solution\"      #> List of 6 #>  $ data         : Time-Series [1:1096] from 1 to 1096: 35.5 29 35.6 33 29.5 ... #>  $ tau          : int [1:5] 513 638 841 968 1075 #>  $ region_params: tibble [6 × 2] (S3: tbl_df/tbl/data.frame) #>   ..$ region  : chr [1:6] \"[0,513)\" \"[513,638)\" \"[638,841)\" \"[841,968)\" ... #>   ..$ param_mu: num [1:6] 35.5 50.9 61.3 97.5 154.4 ... #>  $ model_params : Named num 604 #>   ..- attr(*, \"names\")= chr \"sigma_hatsq\" #>  $ fitted_values: num [1:1096] 35.5 35.5 35.5 35.5 35.5 ... #>  $ model_name   : chr \"meanshift_norm\" #>  - attr(*, \"class\")= chr \"mod_cpt\" segment(DataCPSim, method = \"manual\", tau = c(826)) #> A tidycpt object #> List of 8 #>  $ data        : Time-Series [1:1096] from 1 to 1096: 35.5 29 35.6 33 29.5 ... #>  $ pkg         : chr \"tidychangepoint\" #>  $ algorithm   : chr \"manual\" #>  $ changepoints: num 826 #>  $ fitness     : Named num 10571 #>   ..- attr(*, \"names\")= chr \"BIC\" #>  $ seg_params  : list() #>  $ model_name  : chr \"meanshift_norm\" #>  $ penalty     : chr \"BIC\" #>  - attr(*, \"class\")= chr \"seg_cpt\" #> List of 6 #>  $ data         : Time-Series [1:1096] from 1 to 1096: 35.5 29 35.6 33 29.5 ... #>  $ tau          : int 826 #>  $ region_params: tibble [2 × 2] (S3: tbl_df/tbl/data.frame) #>   ..$ region  : chr [1:2] \"[0,826)\" \"[826,1.1e+03]\" #>   ..$ param_mu: num [1:2] 43.2 123.8 #>  $ model_params : Named num 882 #>   ..- attr(*, \"names\")= chr \"sigma_hatsq\" #>  $ fitted_values: num [1:1096] 43.2 43.2 43.2 43.2 43.2 ... #>  $ model_name   : chr \"meanshift_norm\" #>  - attr(*, \"class\")= chr \"mod_cpt\" two_cpts <- segment(DataCPSim, method = \"manual\", tau = c(365, 826)) plot(two_cpts)  diagnose(two_cpts)  segment(bogota_pm, method = \"pelt\") #> A tidycpt object #> Class 'cpt' : Changepoint Object #>        ~~   : S4 class containing 12 slots with names #>               cpttype date version data.set method test.stat pen.type pen.value minseglen cpts ncpts.max param.est  #>  #> Created on  : Wed Apr 24 21:56:29 2024  #>  #> summary(.)  : #> ---------- #> Created Using changepoint version 2.2.4  #> Changepoint type      : Change in mean and variance  #> Method of analysis    : PELT  #> Test Statistic  : Normal  #> Type of penalty       : MBIC with value, 27.99769  #> Minimum Segment Length : 2  #> Maximum no. of cpts   : Inf  #> Changepoint Locations : 12 14 393 468 821 1023 1025  #> List of 6 #>  $ data         : Time-Series [1:1096] from 1 to 1096: 39.3 27.7 30.3 33.6 32.9 20.1 23.7 23.5 29.2 27.6 ... #>  $ tau          : int [1:7] 12 14 393 468 821 1023 1025 #>  $ region_params: tibble [8 × 3] (S3: tbl_df/tbl/data.frame) #>   ..$ region           : chr [1:8] \"[0,12)\" \"[12,14)\" \"[14,393)\" \"[393,468)\" ... #>   ..$ param_mu         : num [1:8] 28.9 16.6 28.1 44.5 30.7 ... #>   ..$ param_sigma_hatsq: Named num [1:8] 26.1 174.2 147.4 309.4 200 ... #>   .. ..- attr(*, \"names\")= chr [1:8] \"[0,12)\" \"[12,14)\" \"[14,393)\" \"[393,468)\" ... #>  $ model_params : NULL #>  $ fitted_values: num [1:1096] 28.9 28.9 28.9 28.9 28.9 ... #>  $ model_name   : chr \"meanvar\" #>  - attr(*, \"class\")= chr \"mod_cpt\" if (FALSE) { x <- segment(DataCPSim, method = \"gbmdl\", num_generations = 10) }"},{"path":"https://beanumber.github.io/tidychangepoint/reference/segment_coen.html","id":null,"dir":"Reference","previous_headings":"","what":"Algoritmo genético de Bayesian MDL a un paso — segment_coen","title":"Algoritmo genético de Bayesian MDL a un paso — segment_coen","text":"implementation deprecated. Please see segment_ga_coen()","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/segment_coen.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Algoritmo genético de Bayesian MDL a un paso — segment_coen","text":"","code":"segment_coen(   x,   num_generations = 50,   nhpp_dist = c(\"W\", \"EW\", \"GGO\", \"MO\", \"GO\")[1],   vec_dist_a_priori = c(\"Gamma\", \"Gamma\"),   mat_phi = matrix(c(1, 3, 2, 1.2), ncol = 2),   generation_size = 50,   max_num_cp = 20,   show_progress_bar = TRUE,   ... )"},{"path":"https://beanumber.github.io/tidychangepoint/reference/segment_coen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Algoritmo genético de Bayesian MDL a un paso — segment_coen","text":"x object coercible time series object via stats::.ts() num_generations Number generations evolve nhpp_dist toma valores en c(\"W\",\"EW\",\"GGO\",\"MO\",\"GO\") y es el nombre de la función de tasa del NHPP vec_dist_a_priori vector de los nobmres de las distribuciones priori que se utilizan; eg c(\"Gamma\",\"Gamma\") y c(\"Gamma\",\"Gamma\",\"Gamma\") mat_phi matriz cuyos renglones tiene los parámetros de las distribuciones priori; cada renglón tiene todos los parametros de una distribución generation_size tamaño de las generaciones max_num_cp el máximo número de rebases. Este parámetro se ocupa en particular para que todos los cromosomas quepan en una matriz. show_progress_bar show progress bar? ... arguments passed methods","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/segment_coen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Algoritmo genético de Bayesian MDL a un paso — segment_coen","text":"cpt_gbmdl object","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/segment_coen.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Algoritmo genético de Bayesian MDL a un paso — segment_coen","text":"","code":"if (FALSE) { x <- segment_coen(DataCPSim, num_generations = 10) # |> x <- segment_ga_coen(DataCPSim, maxiter = 10) }"},{"path":"https://beanumber.github.io/tidychangepoint/reference/segment_ga.html","id":null,"dir":"Reference","previous_headings":"","what":"Segment a time series using a genetic algorithm — segment_ga","title":"Segment a time series using a genetic algorithm — segment_ga","text":"Segmenting functions various genetic algorithms","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/segment_ga.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Segment a time series using a genetic algorithm — segment_ga","text":"","code":"segment_ga(   x,   model_fn = fit_meanshift_norm,   penalty_fn = BIC,   model_fn_args = list(),   ... )  segment_ga_shi(x, ...)  segment_ga_coen(x, ...)  segment_ga_random(x, ...)"},{"path":"https://beanumber.github.io/tidychangepoint/reference/segment_ga.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Segment a time series using a genetic algorithm — segment_ga","text":"x time series model_fn character name coercible fun_cpt() function. See, example, fit_meanshift_norm(). penalty_fn function evaluates changepoint set returned model_fn. provide AIC(), BIC(), MBIC(), MDL(), BMDL(). model_fn_args list() parameters passed model_fn ... arguments passed GA::ga()","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/segment_ga.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Segment a time series using a genetic algorithm — segment_ga","text":"segment_ga_shi(): Shi's algorithm algorithm used doi:10.1175/JCLI-D-21-0489.1 . Note order achieve reported results run algorithm really long time. Pass values maxiter = 50000 run = 10000 GA::ga() using dots. segment_ga_coen(): Coen's algorithm one used doi:10.1007/978-3-031-47372-2_20 . Note speed algorithm highly sensitive size changepoint sets consideration, large changepoint sets slow. Consider setting population argument GA::ga() improve performance. Coen's algorithm uses build_gabin_population() function purpose default. segment_ga_random(): Randomly select candidate changepoint sets. implemented genetic algorithm one generation (.e., maxiter = 1. Note function uses log_gabin_population() default.","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/segment_ga.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Segment a time series using a genetic algorithm — segment_ga","text":"Shi, et al. (2022, doi:10.1175/JCLI-D-21-0489.1 ) Taimal, et al. (2023, doi:10.1007/978-3-031-47372-2_20 )","code":""},{"path":[]},{"path":"https://beanumber.github.io/tidychangepoint/reference/segment_ga.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Segment a time series using a genetic algorithm — segment_ga","text":"","code":"if (FALSE) { res <- segment_ga(DataCPSim, maxiter = 10) summary(res) str(res) plot(res) # Shi's algorithm x <- segment(CET, method = \"ga-shi\", maxiter = 50) str(x) # GeneticBMDL y <- segment(CET, method = \"ga-coen\", maxiter = 20) changepoints(y)  z <- segment(CET, method = \"ga-coen\", maxiter = 10, model_fn_args = list(threshold = 2)) changepoints(z) } if (FALSE) { # This will take a really long time! x <- segment(CET, method = \"ga-shi\", maxiter = 500, run = 100) changepoints(x)  y <- segment(CET, method = \"ga\", model_fn = fit_lmshift, penalty_fn = BIC,    popSize = 200, maxiter = 5000, run = 1000, model_fn_args = list(trends = TRUE),    population = build_gabin_population(CET))  }  if (FALSE) { x <- segment(method = \"ga-coen\", maxiter = 50) }  x <- segment(CET, method = \"random\") #> Seeding initial population with probability: 0.0162752602536624"},{"path":"https://beanumber.github.io/tidychangepoint/reference/segment_manual.html","id":null,"dir":"Reference","previous_headings":"","what":"Manually segment a time series — segment_manual","title":"Manually segment a time series — segment_manual","text":"Segment time series manually inputting changepoint set","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/segment_manual.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Manually segment a time series — segment_manual","text":"","code":"segment_manual(x, tau, ...)"},{"path":"https://beanumber.github.io/tidychangepoint/reference/segment_manual.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Manually segment a time series — segment_manual","text":"x time series tau set indices representing changepoint set ... arguments passed seg_cpt()","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/segment_manual.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Manually segment a time series — segment_manual","text":"seg_cpt object","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/segment_manual.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Manually segment a time series — segment_manual","text":"Sometimes want see manually input set changepoints performs. function takes time series changepoint detection set inputs returns seg_cpt object representing segmenter. Note default fit_meanshift_norm() used fit model BIC() used penalized objective function.","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/segment_manual.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Manually segment a time series — segment_manual","text":"","code":"segment_manual(CET, tau = c(84, 330)) #> List of 8 #>  $ data        : Time-Series [1:362] from 1 to 362: 8.87 9.1 9.78 9.52 8.63 9.34 8.29 9.86 8.52 9.51 ... #>  $ pkg         : chr \"tidychangepoint\" #>  $ algorithm   : chr \"manual\" #>  $ changepoints: num [1:2] 84 330 #>  $ fitness     : Named num 688 #>   ..- attr(*, \"names\")= chr \"BIC\" #>  $ seg_params  : list() #>  $ model_name  : chr \"meanshift_norm\" #>  $ penalty     : chr \"BIC\" #>  - attr(*, \"class\")= chr \"seg_cpt\" segment_manual(CET, tau = NULL) #> List of 8 #>  $ data        : Time-Series [1:362] from 1 to 362: 8.87 9.1 9.78 9.52 8.63 9.34 8.29 9.86 8.52 9.51 ... #>  $ pkg         : chr \"tidychangepoint\" #>  $ algorithm   : chr \"manual\" #>  $ changepoints: NULL #>  $ fitness     : Named num 759 #>   ..- attr(*, \"names\")= chr \"BIC\" #>  $ seg_params  : list() #>  $ model_name  : chr \"meanshift_norm\" #>  $ penalty     : chr \"BIC\" #>  - attr(*, \"class\")= chr \"seg_cpt\""},{"path":"https://beanumber.github.io/tidychangepoint/reference/segment_pelt.html","id":null,"dir":"Reference","previous_headings":"","what":"Segment a time series using the PELT algorithm — segment_pelt","title":"Segment a time series using the PELT algorithm — segment_pelt","text":"Segmenting functions PELT algorithm","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/segment_pelt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Segment a time series using the PELT algorithm — segment_pelt","text":"","code":"segment_pelt(x, model_fn = fit_meanvar, ...)"},{"path":"https://beanumber.github.io/tidychangepoint/reference/segment_pelt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Segment a time series using the PELT algorithm — segment_pelt","text":"x time series model_fn character name coercible fun_cpt() function. See, example, fit_meanshift_norm(). default fit_meanvar(). ... arguments passed changepoint::cpt.meanvar()","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/segment_pelt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Segment a time series using the PELT algorithm — segment_pelt","text":"","code":"res <- segment_pelt(DataCPSim) res #> Class 'cpt' : Changepoint Object #>        ~~   : S4 class containing 12 slots with names #>               cpttype date version data.set method test.stat pen.type pen.value minseglen cpts ncpts.max param.est  #>  #> Created on  : Wed Apr 24 21:56:29 2024  #>  #> summary(.)  : #> ---------- #> Created Using changepoint version 2.2.4  #> Changepoint type      : Change in mean and variance  #> Method of analysis    : PELT  #> Test Statistic  : Normal  #> Type of penalty       : MBIC with value, 27.99769  #> Minimum Segment Length : 2  #> Maximum no. of cpts   : Inf  #> Changepoint Locations : 547 822 972  str(res) #> Formal class 'cpt' [package \"changepoint\"] with 12 slots #>   ..@ data.set : Time-Series [1:1096] from 1 to 1096: 35.5 29 35.6 33 29.5 ... #>   ..@ cpttype  : chr \"mean and variance\" #>   ..@ method   : chr \"PELT\" #>   ..@ test.stat: chr \"Normal\" #>   ..@ pen.type : chr \"MBIC\" #>   ..@ pen.value: num 28 #>   ..@ minseglen: num 2 #>   ..@ cpts     : int [1:4] 547 822 972 1096 #>   ..@ ncpts.max: num Inf #>   ..@ param.est:List of 2 #>   .. ..$ mean    : num [1:4] 35.3 58.2 96.8 156.5 #>   .. ..$ variance: num [1:4] 127 371 921 2406 #>   ..@ date     : chr \"Wed Apr 24 21:56:29 2024\" #>   ..@ version  : chr \"2.2.4\" segment_pelt(as.ts(CET)) #> Class 'cpt' : Changepoint Object #>        ~~   : S4 class containing 12 slots with names #>               cpttype date version data.set method test.stat pen.type pen.value minseglen cpts ncpts.max param.est  #>  #> Created on  : Wed Apr 24 21:56:29 2024  #>  #> summary(.)  : #> ---------- #> Created Using changepoint version 2.2.4  #> Changepoint type      : Change in mean and variance  #> Method of analysis    : PELT  #> Test Statistic  : Normal  #> Type of penalty       : MBIC with value, 23.56658  #> Minimum Segment Length : 2  #> Maximum no. of cpts   : Inf  #> Changepoint Locations : 55 57 309 311 330  segment_pelt(as.ts(CET), penalty = \"BIC\") #> Class 'cpt' : Changepoint Object #>        ~~   : S4 class containing 12 slots with names #>               cpttype date version data.set method test.stat pen.type pen.value minseglen cpts ncpts.max param.est  #>  #> Created on  : Wed Apr 24 21:56:29 2024  #>  #> summary(.)  : #> ---------- #> Created Using changepoint version 2.2.4  #> Changepoint type      : Change in mean and variance  #> Method of analysis    : PELT  #> Test Statistic  : Normal  #> Type of penalty       : BIC with value, 17.67493  #> Minimum Segment Length : 2  #> Maximum no. of cpts   : Inf  #> Changepoint Locations : 55 57 234 309 311 330  segment_pelt(as.ts(CET), model_fn = fit_meanshift_norm, penalty = \"BIC\") #> Class 'cpt' : Changepoint Object #>        ~~   : S4 class containing 12 slots with names #>               cpttype date version data.set method test.stat pen.type pen.value minseglen cpts ncpts.max param.est  #>  #> Created on  : Wed Apr 24 21:56:29 2024  #>  #> summary(.)  : #> ---------- #> Created Using changepoint version 2.2.4  #> Changepoint type      : Change in mean  #> Method of analysis    : PELT  #> Test Statistic  : Normal  #> Type of penalty       : BIC with value, 11.78329  #> Minimum Segment Length : 1  #> Maximum no. of cpts   : Inf  #> Changepoint Locations : 43 329"},{"path":"https://beanumber.github.io/tidychangepoint/reference/tbl_coef.html","id":null,"dir":"Reference","previous_headings":"","what":"Format the coefficients from a linear model as a tibble — tbl_coef","title":"Format the coefficients from a linear model as a tibble — tbl_coef","text":"Format coefficients linear model tibble","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/tbl_coef.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format the coefficients from a linear model as a tibble — tbl_coef","text":"","code":"tbl_coef(mod, ...)"},{"path":"https://beanumber.github.io/tidychangepoint/reference/tbl_coef.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format the coefficients from a linear model as a tibble — tbl_coef","text":"mod lm model object ... currently ignored","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/tbl_coef.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format the coefficients from a linear model as a tibble — tbl_coef","text":"","code":"ds <- data.frame(y = as.ts(CET), t = 1:length(CET)) tbl_coef(lm(y ~ 1, data = ds)) #> # A tibble: 1 × 2 #>   region param_mu #>   <chr>     <dbl> #> 1 NA         9.28 tbl_coef(lm(y ~ (t >= 42) + (t >= 81), data = ds)) #> # A tibble: 3 × 2 #>   region  param_mu #>   <chr>      <dbl> #> 1 NA          8.68 #> 2 t >= 42     9.38 #> 3 t >= 81     9.35 tbl_coef(lm(y ~ poly(t, 1, raw = TRUE) * (t >= 42) + poly(t, 1, raw = TRUE) * (t >= 81), data = ds)) #> # A tibble: 3 × 3 #>   region  param_mu param_beta1 #>   <chr>      <dbl>       <dbl> #> 1 NA          9.25     -0.0273 #> 2 t >= 42     7.78      0.0536 #> 3 t >= 81     8.51     -0.0225 tbl_coef(lm(y ~ poly(t, 2, raw = TRUE) * (t >= 42) + poly(t, 2, raw = TRUE) * (t >= 81), data = ds)) #> # A tibble: 3 × 4 #>   region  param_mu param_beta1 param_beta2 #>   <chr>      <dbl>       <dbl>       <dbl> #> 1 NA          9.19     -0.0190   -0.000198 #> 2 t >= 42    11.0      -0.0633    0.00109  #> 3 t >= 81     9.61      0.0747   -0.000864"},{"path":"https://beanumber.github.io/tidychangepoint/reference/test_set.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate time series with known changepoint sets — test_set","title":"Simulate time series with known changepoint sets — test_set","text":"Simulate time series known changepoint sets","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/test_set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate time series with known changepoint sets — test_set","text":"","code":"test_set(n = 1, sd = 1, seed = NULL)"},{"path":"https://beanumber.github.io/tidychangepoint/reference/test_set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate time series with known changepoint sets — test_set","text":"n Number true changepoints set sd Standard deviation passed stats::rnorm() seed Value passed base::set.seed()","code":""},{"path":[]},{"path":"https://beanumber.github.io/tidychangepoint/reference/test_set.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate time series with known changepoint sets — test_set","text":"","code":"x <- test_set() plot(x)  changepoints(x) #> [1] 165"},{"path":"https://beanumber.github.io/tidychangepoint/reference/tidychangepoint-package.html","id":null,"dir":"Reference","previous_headings":"","what":"tidychangepoint: Facilitate Changepoint Detection Analysis in a Tidy Framework — tidychangepoint-package","title":"tidychangepoint: Facilitate Changepoint Detection Analysis in a Tidy Framework — tidychangepoint-package","text":"Changepoint detection algorithms R widespread different interfaces reporting conventions. makes comparative analysis results difficult. Tidychangepoint solves problem providing unified interface several different changepoint detection algorithms. also provides consistent numerical graphical reporting using broom ggplot2 packages.","code":""},{"path":[]},{"path":"https://beanumber.github.io/tidychangepoint/reference/tidychangepoint-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"tidychangepoint: Facilitate Changepoint Detection Analysis in a Tidy Framework — tidychangepoint-package","text":"Maintainer: Benjamin S. Baumer ben.baumer@gmail.com (ORCID) Authors: Biviana Marcela Suarez Sierra bmsuarezs@eafit.edu.co (ORCID) Arrigo Coen (ORCID) Carlos . Taimal (ORCID) contributors: Xueheng Shi [contributor]","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/tidycpt-generics.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic functions for tidycpt objects — tidycpt-generics","title":"Generic functions for tidycpt objects — tidycpt-generics","text":"Generic functions tidycpt objects","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/tidycpt-generics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic functions for tidycpt objects — tidycpt-generics","text":"","code":"# S3 method for tidycpt as.ts(x, ...)  # S3 method for tidycpt augment(x, ...)  # S3 method for tidycpt tidy(x, ...)  # S3 method for tidycpt glance(x, ...)  # S3 method for tidycpt plot(x, use_time_index = FALSE, ...)  # S3 method for tidycpt print(x, ...)"},{"path":"https://beanumber.github.io/tidychangepoint/reference/tidycpt-generics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic functions for tidycpt objects — tidycpt-generics","text":"x tidycpt object, typically output segment()` ... arguments passed methods use_time_index x-axis labels time indices? time labels?","code":""},{"path":[]},{"path":"https://beanumber.github.io/tidychangepoint/reference/tidycpt-generics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic functions for tidycpt objects — tidycpt-generics","text":"","code":"plot(segment(CET, method = \"pelt\"))  plot(segment(CET, method = \"pelt\"), use_time_index = TRUE) #> Scale for x is already present. #> Adding another scale for x, which will replace the existing scale."},{"path":"https://beanumber.github.io/tidychangepoint/reference/vec_ptype2.logLik.logLik.html","id":null,"dir":"Reference","previous_headings":"","what":"Vectors implementation for logLik — vec_ptype2.logLik.logLik","title":"Vectors implementation for logLik — vec_ptype2.logLik.logLik","text":"Vectors implementation logLik","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/vec_ptype2.logLik.logLik.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vectors implementation for logLik — vec_ptype2.logLik.logLik","text":"","code":"# S3 method for logLik.logLik vec_ptype2(x, y, ...)  # S3 method for logLik.logLik vec_cast(x, to, ...)"},{"path":"https://beanumber.github.io/tidychangepoint/reference/vec_ptype2.logLik.logLik.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vectors implementation for logLik — vec_ptype2.logLik.logLik","text":"x, y Vector types. ... dots future extensions must empty. Type cast . NULL, x returned .","code":""},{"path":[]},{"path":"https://beanumber.github.io/tidychangepoint/reference/vec_ptype2.logLik.logLik.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Vectors implementation for logLik — vec_ptype2.logLik.logLik","text":"","code":"a <- logLik(lm(mpg ~ disp, data = mtcars)) b <- logLik(lm(mpg ~ am, data = mtcars)) vec_ptype2(a, b) #> 'log Lik.'  (df=3) c(a, b) #> [1] -82.10469 -95.24219 vec_cast(a, b) #> 'log Lik.' -82.10469 (df=3)"},{"path":"https://beanumber.github.io/tidychangepoint/reference/wbs-generics.html","id":null,"dir":"Reference","previous_headings":"","what":"Compatibility layer for wbs — wbs-generics","title":"Compatibility layer for wbs — wbs-generics","text":"Methods generic functions applied wbs objects","code":""},{"path":"https://beanumber.github.io/tidychangepoint/reference/wbs-generics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compatibility layer for wbs — wbs-generics","text":"","code":"# S3 method for wbs as.seg_cpt(object, ...)  # S3 method for wbs as.ts(x, ...)  # S3 method for wbs nobs(object, ...)  # S3 method for wbs seg_params(x, ...)"},{"path":"https://beanumber.github.io/tidychangepoint/reference/wbs-generics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compatibility layer for wbs — wbs-generics","text":"object cpt object. ... arguments passed methods x wbs object returned wbs::wbs()","code":""},{"path":[]},{"path":"https://beanumber.github.io/tidychangepoint/reference/wbs-generics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compatibility layer for wbs — wbs-generics","text":"","code":"cpts <- segment(DataCPSim, method = \"wbs\") x <- as.segmenter(cpts) class(x) #> [1] \"wbs\" as.seg_cpt(x) #> List of 8 #>  $ data        : Time-Series [1:1096] from 1 to 1096: 35.5 29 35.6 33 29.5 ... #>  $ pkg         : chr \"wbs\" #>  $ algorithm   : chr \"Wild BinSeg\" #>  $ changepoints: int [1:12] 547 822 939 972 997 999 1031 1033 1040 1041 ... #>  $ fitness     : Named num 0 #>   ..- attr(*, \"names\")= chr \"MBIC\" #>  $ seg_params  :List of 1 #>   ..$ :List of 6 #>   .. ..$ M             : int 5000 #>   .. ..$ integrated    : logi TRUE #>   .. ..$ rand_intervals: logi TRUE #>   .. ..$ threshold     : num 74.2 #>   .. ..$ Kmax          : int 50 #>   .. ..$ sigma         : num 15.3 #>  $ model_name  : chr \"meanshift_norm\" #>  $ penalty     : chr \"MBIC\" #>  - attr(*, \"class\")= chr \"seg_cpt\" as.ts(x)  #> Time Series: #> Start = 1  #> End = 1096  #> Frequency = 1  #>    [1]  35.50961  29.00292  35.63508  32.98452  29.53557  25.40781  28.82497 #>    [8]  50.31157  24.93185  58.88063  30.35777  33.66315  32.58653  42.78788 #>   [15]  45.23963  23.66417  20.00954  31.64746  34.65507  68.49028  43.53948 #>   [22]  25.29938  57.19244  39.51995  23.79025  27.81451  42.00712  36.09812 #>   [29]  32.74664  34.73679  60.20919  55.52211  33.92043  32.48948  22.66494 #>   [36]  24.16119  27.05582  16.09789  31.69439  27.22202  20.64027  33.97673 #>   [43]  46.71000  25.28389  24.88207  41.75347  36.50448  35.98297  31.39612 #>   [50]  44.14153  67.82557  26.81619  27.55292  30.77449  51.17371  51.34317 #>   [57]  23.10056  22.92962  29.39409  73.67531  23.46017  35.36286  29.45083 #>   [64]  54.18062  25.04895  27.47914  51.41767  32.30387  43.17916  30.11288 #>   [71]  22.45535  33.70278  34.16720  44.64931  22.60994  50.26498  50.28394 #>   [78]  33.24944  38.73890  36.75336  52.38881  36.62906  16.68155  35.12389 #>   [85]  35.89239  61.81050  47.85419  30.26446  36.93150  54.81053  30.32479 #>   [92]  37.46579  49.93442  46.01734  24.86685  35.88435  42.25720  37.78741 #>   [99]  46.26335  38.52976  47.99867  44.28395  51.05976  50.99393  36.01026 #>  [106]  37.44409  16.77029  31.05583  22.40344  27.22149  28.31583  58.06805 #>  [113]  38.30690  47.26490  31.55811  47.63268  23.38334  33.30157  46.75618 #>  [120]  30.46511  23.17060  31.52724  38.55479  35.54940  49.63486  38.85458 #>  [127]  35.80205  24.50227  20.49025  31.59546  33.84992  30.02572  23.84156 #>  [134]  27.92167  28.04857  55.54324  23.82133  46.27102  35.95369  47.65766 #>  [141]  31.37265  37.43892  26.73598  39.78209  37.23990  38.69749  25.74961 #>  [148]  15.00954  41.03282  35.55822  28.20253  34.25572  36.72560  25.87219 #>  [155]  34.25647  41.05718  45.99951  35.09617  30.10936  56.29692  21.62607 #>  [162]  32.16878  48.08144  27.56512  24.86829  23.20973  23.35380  24.87480 #>  [169]  41.98302  43.00026  42.37708  57.59545  28.58172  35.77870  28.82814 #>  [176]  35.31054  45.07452  19.92057  49.94871  42.05699  45.69919  40.55247 #>  [183]  28.77050  34.25098  39.57524  27.14581  44.69057  36.14965  49.50564 #>  [190]  49.79043  17.99559  39.65697  44.97010  18.31935  31.24522  31.07475 #>  [197]  21.61906  40.06484  34.99030  21.94425  37.44403  40.21178  38.23743 #>  [204]  31.80890  34.61897  47.81524  34.58307  30.49509  45.29616  49.07757 #>  [211]  24.17640  35.64875  17.63070  21.61867  32.29813  26.41488  28.31542 #>  [218]  25.02318  20.23520  28.13247  63.69313  42.52417  29.03129  54.03181 #>  [225]  25.60167  66.22389  26.02854  43.94607  39.26708  21.90635  33.10292 #>  [232]  31.36953  68.74632  49.57971  36.77692  62.23430  33.17239  34.70213 #>  [239]  29.33086  40.40664  20.51693  56.48982  47.57652  18.78920  39.83695 #>  [246]  23.57444  32.90584  23.97282  29.16350  33.94278  33.32760  40.39087 #>  [253]  37.08789  34.55488  28.07540  34.55889  32.50873  30.26050  31.61021 #>  [260]  29.22609  21.66017  39.99861  31.54268  54.66244  28.83481  50.43102 #>  [267]  41.57023  36.52691  41.74322  29.88869  65.63664  28.92781  31.62743 #>  [274]  60.02248  23.41874  30.41566  49.28914  30.75073  41.08489  35.95343 #>  [281]  26.30653  30.42233  35.58619  27.11696  41.07739  32.16801  54.22658 #>  [288]  30.58481  32.75808  40.14170  38.59850  34.62828  26.92407  32.65613 #>  [295]  21.12857  21.76199  31.72514  32.81883  39.57492  29.56246  26.52171 #>  [302]  33.16808  30.46846  26.71148  20.12177  28.85316  25.85809  73.07025 #>  [309]  50.11722  55.60337  42.62562  53.62811  40.37492  36.09093  54.15097 #>  [316]  52.48111  28.21508  44.33563  15.14660  31.77283  28.02836  42.85488 #>  [323]  30.07936  32.42728  33.91356  17.04858  29.01530  31.04799  24.28621 #>  [330]  35.50456  45.96182  21.99371  38.45540  25.78633  45.07985  27.04933 #>  [337]  50.03548  29.92024  26.27057  24.47919  59.13347  35.87683  42.14550 #>  [344]  29.36456  44.58931  30.97851  21.83860  46.47922  39.71751  20.74531 #>  [351]  21.96494  27.95186  40.64999  65.79466  34.95445  33.87721  27.41981 #>  [358]  19.67562  39.39982  45.69528  22.18879  37.54553  23.15847  28.45508 #>  [365]  25.23477  33.00227  27.16574  34.19212  38.82416  17.26278  38.40626 #>  [372]  57.01508  40.28032  27.15082  32.21021  41.59108  44.75365  31.57659 #>  [379]  44.49800  41.11233  35.23455  24.47634  45.13415  37.24519  42.85021 #>  [386]  32.84645  37.01077  38.96790  40.08106  43.99265  32.24746  27.24075 #>  [393]  31.66613  34.98403  27.29397  34.99001  31.25752  30.07230  27.18477 #>  [400]  37.36462  34.40921  27.16085  37.36703  47.98335  43.48091  23.31231 #>  [407]  20.68531  40.72063  13.66989  27.99689  25.61063  27.89089  17.93238 #>  [414]  23.25505  69.87353  20.53952  38.76444  45.53784  43.99368  25.86236 #>  [421]  23.02465  26.68788  51.99475  31.49945  39.98303  25.96329  18.68290 #>  [428]  45.39740  41.85522  40.88774  33.13019  36.51401  43.93668  28.72223 #>  [435]  17.36850  29.80030  29.36764  33.21636  30.98314  44.00905  49.96474 #>  [442]  32.63317  34.95938  42.09920  25.98961  26.13540  40.91752  27.13926 #>  [449]  23.93415  44.34438  24.80069  39.56627  34.17161  29.33848  51.51685 #>  [456]  38.10154  17.89906  29.84155  20.73680  17.94649  20.14526  30.60828 #>  [463]  37.05229  26.99159  48.47064  29.63704  30.29811  29.44919  50.20743 #>  [470]  25.22852  19.31610  49.49408  31.13921  45.04409  26.36500  21.37141 #>  [477]  33.60464  39.82629  23.44417  50.85233  35.55273  31.42400  52.78349 #>  [484]  46.42078  32.84158  41.58214  37.57874  92.79539  21.87917  35.86701 #>  [491]  44.63170  23.67373  49.57926  37.82632  28.51937  54.19448  25.42921 #>  [498]  31.42047  45.75800  26.14005  32.43037  30.31998  60.34780  35.38384 #>  [505]  17.65934  49.95322  48.97623  24.37608  62.05997  17.90258  35.04199 #>  [512]  25.02686  37.13100  27.42116  46.56513  14.44667  18.13457  30.41839 #>  [519]  40.06058  33.26711  58.99535  23.18483  36.67044  24.95331  27.19064 #>  [526]  26.76947  37.48431  37.13503  22.80870  32.98376  16.45626  25.22453 #>  [533]  35.59700  24.01433  58.24541  34.09432  31.09085  29.28524  20.65437 #>  [540]  24.52000  61.00638  33.59970  19.62836  30.89483  27.49646  47.74031 #>  [547]  38.48854  79.28284  49.83587  41.20827  60.84168  58.74430  73.74234 #>  [554]  62.99021  44.73661  66.14946  78.63431  58.85001  56.29965  49.76806 #>  [561]  66.31184  77.24626  30.20323  34.36305  40.14230 115.76308  53.35118 #>  [568]  56.61291  54.02821  30.86656  64.91494  51.47610  58.02405  46.19877 #>  [575]  75.46288  62.38693  62.12430  29.65914  48.83256  48.45711  87.84555 #>  [582]  48.89591  79.45862  45.43495  61.17216  44.15376  40.81283  28.66775 #>  [589] 100.81542  80.80345  59.82787  60.46746  61.44131  33.23726  52.19624 #>  [596]  83.51128  53.55938  63.91426  43.91224  55.36213  54.68760  56.36276 #>  [603]  50.26803  63.36135  71.84053  44.01963  54.90876  48.05082  73.33604 #>  [610]  40.86609  53.14413  59.74683  74.13609  72.72819  73.80368  46.35780 #>  [617]  39.46049  69.37131  69.23278  39.48316  65.63175  50.51306  79.59284 #>  [624]  43.27989  29.25963  53.94132  47.30325  89.88726  64.49022  53.12747 #>  [631]  51.61317  47.72412 102.46424  79.80996  51.62739  45.94677  44.20380 #>  [638]  62.47154  56.71323  45.20940  33.56516  93.76083  56.27748  43.03061 #>  [645]  86.12136  66.81985 103.73717  45.81972  66.39085  43.21773  56.16747 #>  [652]  59.28413  50.73493  65.26301 107.46498  68.39817  77.53655  63.00234 #>  [659] 100.37694  50.08347  51.31859  47.84582  73.28803  56.60291  49.47953 #>  [666]  74.14721  51.88331  72.97605  37.36928  50.55296  94.49818  85.63369 #>  [673]  47.21940  51.29463  30.87699  40.99069  65.22233  84.18339  36.97547 #>  [680]  67.67693 130.27515  56.50564  52.08214  36.62894  50.17403  43.98132 #>  [687]  63.78818  69.71901  58.66280  34.25625  40.01212  38.51369  31.93027 #>  [694]  70.08009  60.78508  51.19670  65.45439  70.13630  38.38639  46.42615 #>  [701]  59.55314  49.09690  60.75484  66.66783  70.41840  77.79466  57.57120 #>  [708]  66.27876  40.41878  51.19402  90.55426  28.21335  67.71025  52.72485 #>  [715]  37.34428  72.43783  92.29608  55.59297  69.66448  58.30077  50.26778 #>  [722]  74.61613  50.92561  51.97960  99.50324  47.12665  87.80435 119.15289 #>  [729]  96.67512  27.20912  42.35955  51.36019  66.15466  50.99965  31.33727 #>  [736]  29.62981  55.37496  72.04834  44.82771  46.57539  64.62869  38.82131 #>  [743]  53.86127  30.62108  27.37893  85.39840  55.85290  64.89730  94.68730 #>  [750]  35.15146  37.51919  45.72001  89.69830  46.13428  66.35095  37.41977 #>  [757]  43.10677  40.13555  43.13188  24.73451  76.52571  36.36566  71.17790 #>  [764]  56.44084  63.19831  38.86127  56.54947  83.05808  41.66112  60.14119 #>  [771]  73.36839  36.83335  46.99687  68.72470  48.02621  37.04922  67.67630 #>  [778]  46.78206  43.38829  79.76107  43.42811  34.89142  46.70848  85.92108 #>  [785]  65.54841  39.49996  41.09837  47.97916  62.31907  75.42977  83.27070 #>  [792]  73.13176  58.56810  75.03824  37.08341  57.11212  62.88590  80.01578 #>  [799]  31.43220  50.27634  20.52318  57.18749  65.93147  42.64495  60.78448 #>  [806]  42.12619  44.69412  58.64844  68.76875 163.36185  59.30573  44.16434 #>  [813]  74.02857  42.16594  47.80402  46.06946  68.13544  58.27459  44.44837 #>  [820]  49.71347  41.92370  65.10552 190.42879 100.55114  84.73240  95.19440 #>  [827]  62.62765  81.34105  62.84927 119.41128  97.69586 103.24047 132.04779 #>  [834]  63.94897  61.11686  68.83021  80.70128 118.36174  69.88491  75.67939 #>  [841]  97.87433  84.47204 167.57416 119.33953 112.87803  94.60966  54.52644 #>  [848] 134.89541  80.76840 100.86500 125.36064  80.85360  81.27602 102.14881 #>  [855]  62.87013  89.81105  90.54166  77.87923 154.26053 104.44530  89.99370 #>  [862] 137.11783 108.63313  81.65888  91.76187 153.53548  93.17887 131.28943 #>  [869]  58.95745  63.59264  86.73104 159.01308  56.48464  53.76414  79.36095 #>  [876] 104.17268  82.69108  75.47191  80.10494 123.34176 117.11018  82.67987 #>  [883]  87.24288  77.92377 105.19438  75.47461  73.26672 103.96131  88.69445 #>  [890]  67.40834 115.24510 107.64339  93.11673 129.87959 126.03289 118.21727 #>  [897] 101.24318  85.84310  83.24171  94.37437  95.52714  58.18705  70.93290 #>  [904] 135.64519 122.17646  47.94730  81.90610  71.29312  59.56557  90.96883 #>  [911] 105.27981  68.10784  62.24482 118.12494  89.29744 104.93346  54.31292 #>  [918] 118.22755  85.99992  68.28882 116.87775  59.89081  88.51994 124.96078 #>  [925]  48.99528  83.42296  39.21350 104.91602  96.76956 112.59752  71.12703 #>  [932]  88.73937  68.98548  70.70640  93.68761 131.72255  82.59086  81.56980 #>  [939]  80.12171 160.72231 130.68852  61.65840 175.64769 103.14938 133.32521 #>  [946] 160.15746  97.61800 119.62046 125.04584 120.67301 110.96952  62.16252 #>  [953] 215.10540  81.98616 110.52191  53.11782  83.00635  59.01162 167.43096 #>  [960] 146.43115 136.73301  93.53995  92.63548  98.56852  59.88143 101.45146 #>  [967] 102.84065 115.38549 110.87331  96.65850  70.26512  73.19904 204.44288 #>  [974] 120.52524 148.47584 176.52242  72.50633  98.01507  85.07589 122.09749 #>  [981] 173.47087 272.06243 114.84247 194.43547 182.95500  99.70758 155.32184 #>  [988] 234.90205 149.08372 129.43951  92.17400 150.30666 127.34289  95.56536 #>  [995] 183.85856 173.20963 119.36203 298.97556 239.90785 149.72990 145.83624 #> [1002] 199.97769 221.71715 124.50443 127.57657 126.63670 224.84161 193.52027 #> [1009]  67.17684 193.24399 163.77183 115.04808 139.80491 194.08049 142.56183 #> [1016] 150.05278 112.32713 229.27074 123.95988 146.80726 185.69923 111.44768 #> [1023] 148.97687 122.53709 127.37003  92.55487 106.25934 151.61132 166.55049 #> [1030] 166.27216  89.84812 285.64838 210.83361 119.86280 120.26534 166.67314 #> [1037] 128.77576 128.26908 203.90985 124.66021 285.09853 111.19870 185.07644 #> [1044]  88.79945  97.17543 121.60783 183.18550 113.42228 234.66441 148.81920 #> [1051] 127.67544 144.30028 183.15017 180.80073 212.84778  81.80066 156.28369 #> [1058] 217.85070 136.70053 196.65904 155.49179 120.33784 123.21350 293.16047 #> [1065] 141.29326 286.30265 137.11341 191.99534 155.88733 232.83108 141.37831 #> [1072] 114.62536 154.08698 129.56200 197.71852 143.31929 155.63173 166.92790 #> [1079] 151.48311 133.67364 183.79864 134.72402 108.41123 113.01052 145.28928 #> [1086]  85.79995 220.96699 127.18015 215.14311 190.93505 156.44133 164.06449 #> [1093] 164.81190  85.39927 179.14410 135.09159 changepoints(x) #>  [1]  547  822  939  972  997  999 1031 1033 1040 1041 1063 1066 fitness(x) #> MBIC  #>    0  model_name(x) #> [1] \"meanshift_norm\" model_args(x) #> NULL nobs(x) #> [1] 1096 seg_params(x) #> $M #> [1] 5000 #>  #> $integrated #> [1] TRUE #>  #> $rand_intervals #> [1] TRUE #>  #> $threshold #> [1] 74.18342 #>  #> $Kmax #> [1] 50 #>  #> $sigma #> [1] 15.25167 #>   cpts <- segment(DataCPSim, method = \"wbs\") as.ts(cpts) #> Time Series: #> Start = 1  #> End = 1096  #> Frequency = 1  #>    [1]  35.50961  29.00292  35.63508  32.98452  29.53557  25.40781  28.82497 #>    [8]  50.31157  24.93185  58.88063  30.35777  33.66315  32.58653  42.78788 #>   [15]  45.23963  23.66417  20.00954  31.64746  34.65507  68.49028  43.53948 #>   [22]  25.29938  57.19244  39.51995  23.79025  27.81451  42.00712  36.09812 #>   [29]  32.74664  34.73679  60.20919  55.52211  33.92043  32.48948  22.66494 #>   [36]  24.16119  27.05582  16.09789  31.69439  27.22202  20.64027  33.97673 #>   [43]  46.71000  25.28389  24.88207  41.75347  36.50448  35.98297  31.39612 #>   [50]  44.14153  67.82557  26.81619  27.55292  30.77449  51.17371  51.34317 #>   [57]  23.10056  22.92962  29.39409  73.67531  23.46017  35.36286  29.45083 #>   [64]  54.18062  25.04895  27.47914  51.41767  32.30387  43.17916  30.11288 #>   [71]  22.45535  33.70278  34.16720  44.64931  22.60994  50.26498  50.28394 #>   [78]  33.24944  38.73890  36.75336  52.38881  36.62906  16.68155  35.12389 #>   [85]  35.89239  61.81050  47.85419  30.26446  36.93150  54.81053  30.32479 #>   [92]  37.46579  49.93442  46.01734  24.86685  35.88435  42.25720  37.78741 #>   [99]  46.26335  38.52976  47.99867  44.28395  51.05976  50.99393  36.01026 #>  [106]  37.44409  16.77029  31.05583  22.40344  27.22149  28.31583  58.06805 #>  [113]  38.30690  47.26490  31.55811  47.63268  23.38334  33.30157  46.75618 #>  [120]  30.46511  23.17060  31.52724  38.55479  35.54940  49.63486  38.85458 #>  [127]  35.80205  24.50227  20.49025  31.59546  33.84992  30.02572  23.84156 #>  [134]  27.92167  28.04857  55.54324  23.82133  46.27102  35.95369  47.65766 #>  [141]  31.37265  37.43892  26.73598  39.78209  37.23990  38.69749  25.74961 #>  [148]  15.00954  41.03282  35.55822  28.20253  34.25572  36.72560  25.87219 #>  [155]  34.25647  41.05718  45.99951  35.09617  30.10936  56.29692  21.62607 #>  [162]  32.16878  48.08144  27.56512  24.86829  23.20973  23.35380  24.87480 #>  [169]  41.98302  43.00026  42.37708  57.59545  28.58172  35.77870  28.82814 #>  [176]  35.31054  45.07452  19.92057  49.94871  42.05699  45.69919  40.55247 #>  [183]  28.77050  34.25098  39.57524  27.14581  44.69057  36.14965  49.50564 #>  [190]  49.79043  17.99559  39.65697  44.97010  18.31935  31.24522  31.07475 #>  [197]  21.61906  40.06484  34.99030  21.94425  37.44403  40.21178  38.23743 #>  [204]  31.80890  34.61897  47.81524  34.58307  30.49509  45.29616  49.07757 #>  [211]  24.17640  35.64875  17.63070  21.61867  32.29813  26.41488  28.31542 #>  [218]  25.02318  20.23520  28.13247  63.69313  42.52417  29.03129  54.03181 #>  [225]  25.60167  66.22389  26.02854  43.94607  39.26708  21.90635  33.10292 #>  [232]  31.36953  68.74632  49.57971  36.77692  62.23430  33.17239  34.70213 #>  [239]  29.33086  40.40664  20.51693  56.48982  47.57652  18.78920  39.83695 #>  [246]  23.57444  32.90584  23.97282  29.16350  33.94278  33.32760  40.39087 #>  [253]  37.08789  34.55488  28.07540  34.55889  32.50873  30.26050  31.61021 #>  [260]  29.22609  21.66017  39.99861  31.54268  54.66244  28.83481  50.43102 #>  [267]  41.57023  36.52691  41.74322  29.88869  65.63664  28.92781  31.62743 #>  [274]  60.02248  23.41874  30.41566  49.28914  30.75073  41.08489  35.95343 #>  [281]  26.30653  30.42233  35.58619  27.11696  41.07739  32.16801  54.22658 #>  [288]  30.58481  32.75808  40.14170  38.59850  34.62828  26.92407  32.65613 #>  [295]  21.12857  21.76199  31.72514  32.81883  39.57492  29.56246  26.52171 #>  [302]  33.16808  30.46846  26.71148  20.12177  28.85316  25.85809  73.07025 #>  [309]  50.11722  55.60337  42.62562  53.62811  40.37492  36.09093  54.15097 #>  [316]  52.48111  28.21508  44.33563  15.14660  31.77283  28.02836  42.85488 #>  [323]  30.07936  32.42728  33.91356  17.04858  29.01530  31.04799  24.28621 #>  [330]  35.50456  45.96182  21.99371  38.45540  25.78633  45.07985  27.04933 #>  [337]  50.03548  29.92024  26.27057  24.47919  59.13347  35.87683  42.14550 #>  [344]  29.36456  44.58931  30.97851  21.83860  46.47922  39.71751  20.74531 #>  [351]  21.96494  27.95186  40.64999  65.79466  34.95445  33.87721  27.41981 #>  [358]  19.67562  39.39982  45.69528  22.18879  37.54553  23.15847  28.45508 #>  [365]  25.23477  33.00227  27.16574  34.19212  38.82416  17.26278  38.40626 #>  [372]  57.01508  40.28032  27.15082  32.21021  41.59108  44.75365  31.57659 #>  [379]  44.49800  41.11233  35.23455  24.47634  45.13415  37.24519  42.85021 #>  [386]  32.84645  37.01077  38.96790  40.08106  43.99265  32.24746  27.24075 #>  [393]  31.66613  34.98403  27.29397  34.99001  31.25752  30.07230  27.18477 #>  [400]  37.36462  34.40921  27.16085  37.36703  47.98335  43.48091  23.31231 #>  [407]  20.68531  40.72063  13.66989  27.99689  25.61063  27.89089  17.93238 #>  [414]  23.25505  69.87353  20.53952  38.76444  45.53784  43.99368  25.86236 #>  [421]  23.02465  26.68788  51.99475  31.49945  39.98303  25.96329  18.68290 #>  [428]  45.39740  41.85522  40.88774  33.13019  36.51401  43.93668  28.72223 #>  [435]  17.36850  29.80030  29.36764  33.21636  30.98314  44.00905  49.96474 #>  [442]  32.63317  34.95938  42.09920  25.98961  26.13540  40.91752  27.13926 #>  [449]  23.93415  44.34438  24.80069  39.56627  34.17161  29.33848  51.51685 #>  [456]  38.10154  17.89906  29.84155  20.73680  17.94649  20.14526  30.60828 #>  [463]  37.05229  26.99159  48.47064  29.63704  30.29811  29.44919  50.20743 #>  [470]  25.22852  19.31610  49.49408  31.13921  45.04409  26.36500  21.37141 #>  [477]  33.60464  39.82629  23.44417  50.85233  35.55273  31.42400  52.78349 #>  [484]  46.42078  32.84158  41.58214  37.57874  92.79539  21.87917  35.86701 #>  [491]  44.63170  23.67373  49.57926  37.82632  28.51937  54.19448  25.42921 #>  [498]  31.42047  45.75800  26.14005  32.43037  30.31998  60.34780  35.38384 #>  [505]  17.65934  49.95322  48.97623  24.37608  62.05997  17.90258  35.04199 #>  [512]  25.02686  37.13100  27.42116  46.56513  14.44667  18.13457  30.41839 #>  [519]  40.06058  33.26711  58.99535  23.18483  36.67044  24.95331  27.19064 #>  [526]  26.76947  37.48431  37.13503  22.80870  32.98376  16.45626  25.22453 #>  [533]  35.59700  24.01433  58.24541  34.09432  31.09085  29.28524  20.65437 #>  [540]  24.52000  61.00638  33.59970  19.62836  30.89483  27.49646  47.74031 #>  [547]  38.48854  79.28284  49.83587  41.20827  60.84168  58.74430  73.74234 #>  [554]  62.99021  44.73661  66.14946  78.63431  58.85001  56.29965  49.76806 #>  [561]  66.31184  77.24626  30.20323  34.36305  40.14230 115.76308  53.35118 #>  [568]  56.61291  54.02821  30.86656  64.91494  51.47610  58.02405  46.19877 #>  [575]  75.46288  62.38693  62.12430  29.65914  48.83256  48.45711  87.84555 #>  [582]  48.89591  79.45862  45.43495  61.17216  44.15376  40.81283  28.66775 #>  [589] 100.81542  80.80345  59.82787  60.46746  61.44131  33.23726  52.19624 #>  [596]  83.51128  53.55938  63.91426  43.91224  55.36213  54.68760  56.36276 #>  [603]  50.26803  63.36135  71.84053  44.01963  54.90876  48.05082  73.33604 #>  [610]  40.86609  53.14413  59.74683  74.13609  72.72819  73.80368  46.35780 #>  [617]  39.46049  69.37131  69.23278  39.48316  65.63175  50.51306  79.59284 #>  [624]  43.27989  29.25963  53.94132  47.30325  89.88726  64.49022  53.12747 #>  [631]  51.61317  47.72412 102.46424  79.80996  51.62739  45.94677  44.20380 #>  [638]  62.47154  56.71323  45.20940  33.56516  93.76083  56.27748  43.03061 #>  [645]  86.12136  66.81985 103.73717  45.81972  66.39085  43.21773  56.16747 #>  [652]  59.28413  50.73493  65.26301 107.46498  68.39817  77.53655  63.00234 #>  [659] 100.37694  50.08347  51.31859  47.84582  73.28803  56.60291  49.47953 #>  [666]  74.14721  51.88331  72.97605  37.36928  50.55296  94.49818  85.63369 #>  [673]  47.21940  51.29463  30.87699  40.99069  65.22233  84.18339  36.97547 #>  [680]  67.67693 130.27515  56.50564  52.08214  36.62894  50.17403  43.98132 #>  [687]  63.78818  69.71901  58.66280  34.25625  40.01212  38.51369  31.93027 #>  [694]  70.08009  60.78508  51.19670  65.45439  70.13630  38.38639  46.42615 #>  [701]  59.55314  49.09690  60.75484  66.66783  70.41840  77.79466  57.57120 #>  [708]  66.27876  40.41878  51.19402  90.55426  28.21335  67.71025  52.72485 #>  [715]  37.34428  72.43783  92.29608  55.59297  69.66448  58.30077  50.26778 #>  [722]  74.61613  50.92561  51.97960  99.50324  47.12665  87.80435 119.15289 #>  [729]  96.67512  27.20912  42.35955  51.36019  66.15466  50.99965  31.33727 #>  [736]  29.62981  55.37496  72.04834  44.82771  46.57539  64.62869  38.82131 #>  [743]  53.86127  30.62108  27.37893  85.39840  55.85290  64.89730  94.68730 #>  [750]  35.15146  37.51919  45.72001  89.69830  46.13428  66.35095  37.41977 #>  [757]  43.10677  40.13555  43.13188  24.73451  76.52571  36.36566  71.17790 #>  [764]  56.44084  63.19831  38.86127  56.54947  83.05808  41.66112  60.14119 #>  [771]  73.36839  36.83335  46.99687  68.72470  48.02621  37.04922  67.67630 #>  [778]  46.78206  43.38829  79.76107  43.42811  34.89142  46.70848  85.92108 #>  [785]  65.54841  39.49996  41.09837  47.97916  62.31907  75.42977  83.27070 #>  [792]  73.13176  58.56810  75.03824  37.08341  57.11212  62.88590  80.01578 #>  [799]  31.43220  50.27634  20.52318  57.18749  65.93147  42.64495  60.78448 #>  [806]  42.12619  44.69412  58.64844  68.76875 163.36185  59.30573  44.16434 #>  [813]  74.02857  42.16594  47.80402  46.06946  68.13544  58.27459  44.44837 #>  [820]  49.71347  41.92370  65.10552 190.42879 100.55114  84.73240  95.19440 #>  [827]  62.62765  81.34105  62.84927 119.41128  97.69586 103.24047 132.04779 #>  [834]  63.94897  61.11686  68.83021  80.70128 118.36174  69.88491  75.67939 #>  [841]  97.87433  84.47204 167.57416 119.33953 112.87803  94.60966  54.52644 #>  [848] 134.89541  80.76840 100.86500 125.36064  80.85360  81.27602 102.14881 #>  [855]  62.87013  89.81105  90.54166  77.87923 154.26053 104.44530  89.99370 #>  [862] 137.11783 108.63313  81.65888  91.76187 153.53548  93.17887 131.28943 #>  [869]  58.95745  63.59264  86.73104 159.01308  56.48464  53.76414  79.36095 #>  [876] 104.17268  82.69108  75.47191  80.10494 123.34176 117.11018  82.67987 #>  [883]  87.24288  77.92377 105.19438  75.47461  73.26672 103.96131  88.69445 #>  [890]  67.40834 115.24510 107.64339  93.11673 129.87959 126.03289 118.21727 #>  [897] 101.24318  85.84310  83.24171  94.37437  95.52714  58.18705  70.93290 #>  [904] 135.64519 122.17646  47.94730  81.90610  71.29312  59.56557  90.96883 #>  [911] 105.27981  68.10784  62.24482 118.12494  89.29744 104.93346  54.31292 #>  [918] 118.22755  85.99992  68.28882 116.87775  59.89081  88.51994 124.96078 #>  [925]  48.99528  83.42296  39.21350 104.91602  96.76956 112.59752  71.12703 #>  [932]  88.73937  68.98548  70.70640  93.68761 131.72255  82.59086  81.56980 #>  [939]  80.12171 160.72231 130.68852  61.65840 175.64769 103.14938 133.32521 #>  [946] 160.15746  97.61800 119.62046 125.04584 120.67301 110.96952  62.16252 #>  [953] 215.10540  81.98616 110.52191  53.11782  83.00635  59.01162 167.43096 #>  [960] 146.43115 136.73301  93.53995  92.63548  98.56852  59.88143 101.45146 #>  [967] 102.84065 115.38549 110.87331  96.65850  70.26512  73.19904 204.44288 #>  [974] 120.52524 148.47584 176.52242  72.50633  98.01507  85.07589 122.09749 #>  [981] 173.47087 272.06243 114.84247 194.43547 182.95500  99.70758 155.32184 #>  [988] 234.90205 149.08372 129.43951  92.17400 150.30666 127.34289  95.56536 #>  [995] 183.85856 173.20963 119.36203 298.97556 239.90785 149.72990 145.83624 #> [1002] 199.97769 221.71715 124.50443 127.57657 126.63670 224.84161 193.52027 #> [1009]  67.17684 193.24399 163.77183 115.04808 139.80491 194.08049 142.56183 #> [1016] 150.05278 112.32713 229.27074 123.95988 146.80726 185.69923 111.44768 #> [1023] 148.97687 122.53709 127.37003  92.55487 106.25934 151.61132 166.55049 #> [1030] 166.27216  89.84812 285.64838 210.83361 119.86280 120.26534 166.67314 #> [1037] 128.77576 128.26908 203.90985 124.66021 285.09853 111.19870 185.07644 #> [1044]  88.79945  97.17543 121.60783 183.18550 113.42228 234.66441 148.81920 #> [1051] 127.67544 144.30028 183.15017 180.80073 212.84778  81.80066 156.28369 #> [1058] 217.85070 136.70053 196.65904 155.49179 120.33784 123.21350 293.16047 #> [1065] 141.29326 286.30265 137.11341 191.99534 155.88733 232.83108 141.37831 #> [1072] 114.62536 154.08698 129.56200 197.71852 143.31929 155.63173 166.92790 #> [1079] 151.48311 133.67364 183.79864 134.72402 108.41123 113.01052 145.28928 #> [1086]  85.79995 220.96699 127.18015 215.14311 190.93505 156.44133 164.06449 #> [1093] 164.81190  85.39927 179.14410 135.09159  cpts <- segment(DataCPSim, method = \"wbs\") nobs(cpts$segmenter) #> [1] 1096"}]
